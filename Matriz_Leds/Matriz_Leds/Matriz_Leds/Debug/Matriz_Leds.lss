
Matriz_Leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000122  00800100  00001532  000015a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001532  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001cde  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000828  00000000  00000000  000034c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000af6  00000000  00000000  00003cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000368  00000000  00000000  000047e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000062a  00000000  00000000  00004b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000019a2  00000000  00000000  00005176  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  00006b18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	e2 e3       	ldi	r30, 0x32	; 50
      fe:	f5 e1       	ldi	r31, 0x15	; 21
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a2 32       	cpi	r26, 0x22	; 34
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>
     10c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <main>
     110:	0c 94 97 0a 	jmp	0x152e	; 0x152e <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <filas>:
	//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
	for (int i=0;i<32;i++)
	{
		filas(i,10,PORT,MENSAJE);
	}
}
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	ec 01       	movw	r28, r24
     122:	00 e0       	ldi	r16, 0x00	; 0
     124:	10 e0       	ldi	r17, 0x00	; 0
     126:	1c c0       	rjmp	.+56     	; 0x160 <filas+0x48>
     128:	da 01       	movw	r26, r20
     12a:	ae 0f       	add	r26, r30
     12c:	bf 1f       	adc	r27, r31
     12e:	9c 91       	ld	r25, X
     130:	9b b9       	out	0x0b, r25	; 11
     132:	df 01       	movw	r26, r30
     134:	ac 0f       	add	r26, r28
     136:	bd 1f       	adc	r27, r29
     138:	a2 0f       	add	r26, r18
     13a:	b3 1f       	adc	r27, r19
     13c:	9c 91       	ld	r25, X
     13e:	90 95       	com	r25
     140:	95 b9       	out	0x05, r25	; 5
     142:	83 ef       	ldi	r24, 0xF3	; 243
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	01 97       	sbiw	r24, 0x01	; 1
     148:	f1 f7       	brne	.-4      	; 0x146 <filas+0x2e>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <filas+0x34>
     14c:	00 00       	nop
     14e:	31 96       	adiw	r30, 0x01	; 1
     150:	02 c0       	rjmp	.+4      	; 0x156 <filas+0x3e>
     152:	e0 e0       	ldi	r30, 0x00	; 0
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	e8 30       	cpi	r30, 0x08	; 8
     158:	f1 05       	cpc	r31, r1
     15a:	34 f3       	brlt	.-52     	; 0x128 <filas+0x10>
     15c:	0f 5f       	subi	r16, 0xFF	; 255
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	06 17       	cp	r16, r22
     162:	17 07       	cpc	r17, r23
     164:	b4 f3       	brlt	.-20     	; 0x152 <filas+0x3a>
     166:	df 91       	pop	r29
     168:	cf 91       	pop	r28
     16a:	1f 91       	pop	r17
     16c:	0f 91       	pop	r16
     16e:	08 95       	ret

00000170 <animacion1>:
     170:	ef 92       	push	r14
     172:	ff 92       	push	r15
     174:	0f 93       	push	r16
     176:	1f 93       	push	r17
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	8c 01       	movw	r16, r24
     17e:	7b 01       	movw	r14, r22
     180:	c0 e0       	ldi	r28, 0x00	; 0
     182:	d0 e0       	ldi	r29, 0x00	; 0
     184:	08 c0       	rjmp	.+16     	; 0x196 <animacion1+0x26>
     186:	97 01       	movw	r18, r14
     188:	a8 01       	movw	r20, r16
     18a:	65 e0       	ldi	r22, 0x05	; 5
     18c:	70 e0       	ldi	r23, 0x00	; 0
     18e:	ce 01       	movw	r24, r28
     190:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
     194:	28 96       	adiw	r28, 0x08	; 8
     196:	c9 31       	cpi	r28, 0x19	; 25
     198:	d1 05       	cpc	r29, r1
     19a:	ac f3       	brlt	.-22     	; 0x186 <animacion1+0x16>
     19c:	c8 e1       	ldi	r28, 0x18	; 24
     19e:	d0 e0       	ldi	r29, 0x00	; 0
     1a0:	08 c0       	rjmp	.+16     	; 0x1b2 <animacion1+0x42>
     1a2:	97 01       	movw	r18, r14
     1a4:	a8 01       	movw	r20, r16
     1a6:	65 e0       	ldi	r22, 0x05	; 5
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	ce 01       	movw	r24, r28
     1ac:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
     1b0:	28 97       	sbiw	r28, 0x08	; 8
     1b2:	dd 23       	and	r29, r29
     1b4:	b4 f7       	brge	.-20     	; 0x1a2 <animacion1+0x32>
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	ff 90       	pop	r15
     1c0:	ef 90       	pop	r14
     1c2:	08 95       	ret

000001c4 <animacion2>:
     1c4:	ef 92       	push	r14
     1c6:	ff 92       	push	r15
     1c8:	0f 93       	push	r16
     1ca:	1f 93       	push	r17
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	8c 01       	movw	r16, r24
     1d2:	7b 01       	movw	r14, r22
     1d4:	c0 e0       	ldi	r28, 0x00	; 0
     1d6:	d0 e0       	ldi	r29, 0x00	; 0
     1d8:	08 c0       	rjmp	.+16     	; 0x1ea <animacion2+0x26>
     1da:	97 01       	movw	r18, r14
     1dc:	a8 01       	movw	r20, r16
     1de:	65 e0       	ldi	r22, 0x05	; 5
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	ce 01       	movw	r24, r28
     1e4:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
     1e8:	28 96       	adiw	r28, 0x08	; 8
     1ea:	c9 31       	cpi	r28, 0x19	; 25
     1ec:	d1 05       	cpc	r29, r1
     1ee:	ac f3       	brlt	.-22     	; 0x1da <animacion2+0x16>
     1f0:	c8 e1       	ldi	r28, 0x18	; 24
     1f2:	d0 e0       	ldi	r29, 0x00	; 0
     1f4:	08 c0       	rjmp	.+16     	; 0x206 <animacion2+0x42>
     1f6:	97 01       	movw	r18, r14
     1f8:	a8 01       	movw	r20, r16
     1fa:	65 e0       	ldi	r22, 0x05	; 5
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	ce 01       	movw	r24, r28
     200:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
     204:	28 97       	sbiw	r28, 0x08	; 8
     206:	dd 23       	and	r29, r29
     208:	b4 f7       	brge	.-20     	; 0x1f6 <animacion2+0x32>
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	1f 91       	pop	r17
     210:	0f 91       	pop	r16
     212:	ff 90       	pop	r15
     214:	ef 90       	pop	r14
     216:	08 95       	ret

00000218 <squid_game>:

// MENSAJE DE SQUID GAME AL INICIO DEL JUEGO
void squid_game(char PORT[], char SQUID_GAME[]) {
     218:	ef 92       	push	r14
     21a:	ff 92       	push	r15
     21c:	0f 93       	push	r16
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	7c 01       	movw	r14, r24
     226:	8b 01       	movw	r16, r22
	PORTC = ((1<<3));
     228:	88 e0       	ldi	r24, 0x08	; 8
     22a:	88 b9       	out	0x08, r24	; 8
	//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
	for (int i=0;i<80;i++)
     22c:	c0 e0       	ldi	r28, 0x00	; 0
     22e:	d0 e0       	ldi	r29, 0x00	; 0
     230:	08 c0       	rjmp	.+16     	; 0x242 <squid_game+0x2a>
	{
		filas(i,7,PORT,SQUID_GAME);
     232:	98 01       	movw	r18, r16
     234:	a7 01       	movw	r20, r14
     236:	67 e0       	ldi	r22, 0x07	; 7
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	ce 01       	movw	r24, r28
     23c:	0e 94 8c 00 	call	0x118	; 0x118 <filas>

// MENSAJE DE SQUID GAME AL INICIO DEL JUEGO
void squid_game(char PORT[], char SQUID_GAME[]) {
	PORTC = ((1<<3));
	//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
	for (int i=0;i<80;i++)
     240:	21 96       	adiw	r28, 0x01	; 1
     242:	c0 35       	cpi	r28, 0x50	; 80
     244:	d1 05       	cpc	r29, r1
     246:	ac f3       	brlt	.-22     	; 0x232 <squid_game+0x1a>
	{
		filas(i,7,PORT,SQUID_GAME);
	}
	PORTC = ((0<<3));
     248:	18 b8       	out	0x08, r1	; 8
}
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
     252:	ff 90       	pop	r15
     254:	ef 90       	pop	r14
     256:	08 95       	ret

00000258 <sonido_click>:

// SONIDO DEL CLICK PARA DIFERENTES USOS
void sonido_click(){
	PORTC = ((1<<4));
     258:	80 e1       	ldi	r24, 0x10	; 16
     25a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25c:	83 ef       	ldi	r24, 0xF3	; 243
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	01 97       	sbiw	r24, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <sonido_click+0x8>
     264:	00 c0       	rjmp	.+0      	; 0x266 <sonido_click+0xe>
     266:	00 00       	nop
	_delay_ms(0.25);
	PORTC = ((0<<4));
     268:	18 b8       	out	0x08, r1	; 8
     26a:	08 95       	ret

0000026c <numero>:
}

// NUMEROS DEL 1 AL 4 EN PANTALLA
void numero(char PORT[], char NUMERO[]){
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	7c 01       	movw	r14, r24
     27a:	8b 01       	movw	r16, r22
	for (int i=0;i<8;i+=8)
     27c:	c0 e0       	ldi	r28, 0x00	; 0
     27e:	d0 e0       	ldi	r29, 0x00	; 0
     280:	08 c0       	rjmp	.+16     	; 0x292 <numero+0x26>
	{
		filas(i,10,PORT,NUMERO);
     282:	98 01       	movw	r18, r16
     284:	a7 01       	movw	r20, r14
     286:	6a e0       	ldi	r22, 0x0A	; 10
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	ce 01       	movw	r24, r28
     28c:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
	PORTC = ((0<<4));
}

// NUMEROS DEL 1 AL 4 EN PANTALLA
void numero(char PORT[], char NUMERO[]){
	for (int i=0;i<8;i+=8)
     290:	28 96       	adiw	r28, 0x08	; 8
     292:	c8 30       	cpi	r28, 0x08	; 8
     294:	d1 05       	cpc	r29, r1
     296:	ac f3       	brlt	.-22     	; 0x282 <numero+0x16>
	{
		filas(i,10,PORT,NUMERO);
	}
}
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	08 95       	ret

000002a6 <esquina>:

// ESQUINA DEL JUGADOR ACTUAL
void esquina(char PORT[], char ESQUINA[]){
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	7c 01       	movw	r14, r24
     2b4:	8b 01       	movw	r16, r22
	for (int i=0;i<=8;i+=8)
     2b6:	c0 e0       	ldi	r28, 0x00	; 0
     2b8:	d0 e0       	ldi	r29, 0x00	; 0
     2ba:	08 c0       	rjmp	.+16     	; 0x2cc <esquina+0x26>
	{
		filas(i,100,PORT,ESQUINA);
     2bc:	98 01       	movw	r18, r16
     2be:	a7 01       	movw	r20, r14
     2c0:	64 e6       	ldi	r22, 0x64	; 100
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	ce 01       	movw	r24, r28
     2c6:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
	}
}

// ESQUINA DEL JUGADOR ACTUAL
void esquina(char PORT[], char ESQUINA[]){
	for (int i=0;i<=8;i+=8)
     2ca:	28 96       	adiw	r28, 0x08	; 8
     2cc:	c9 30       	cpi	r28, 0x09	; 9
     2ce:	d1 05       	cpc	r29, r1
     2d0:	ac f3       	brlt	.-22     	; 0x2bc <esquina+0x16>
	{
		filas(i,100,PORT,ESQUINA);
	}
}
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	1f 91       	pop	r17
     2d8:	0f 91       	pop	r16
     2da:	ff 90       	pop	r15
     2dc:	ef 90       	pop	r14
     2de:	08 95       	ret

000002e0 <numeros_sorteo>:

// MOVIMIENTO DE NUMEROS HASTA LLEGAR AL VALOR ALEATORIO DESEADO
void numeros_sorteo(char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
     2e0:	af 92       	push	r10
     2e2:	bf 92       	push	r11
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	ec 01       	movw	r28, r24
     2f6:	5b 01       	movw	r10, r22
     2f8:	7a 01       	movw	r14, r20
     2fa:	69 01       	movw	r12, r18
	numero(PORT,DOS);_delay_ms(20);
     2fc:	ba 01       	movw	r22, r20
     2fe:	0e 94 36 01 	call	0x26c	; 0x26c <numero>
     302:	8f e3       	ldi	r24, 0x3F	; 63
     304:	9c e9       	ldi	r25, 0x9C	; 156
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <numeros_sorteo+0x26>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <numeros_sorteo+0x2c>
     30c:	00 00       	nop
	numero(PORT,UNO);_delay_ms(20);
     30e:	b5 01       	movw	r22, r10
     310:	ce 01       	movw	r24, r28
     312:	0e 94 36 01 	call	0x26c	; 0x26c <numero>
     316:	8f e3       	ldi	r24, 0x3F	; 63
     318:	9c e9       	ldi	r25, 0x9C	; 156
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <numeros_sorteo+0x3a>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <numeros_sorteo+0x40>
     320:	00 00       	nop
	numero(PORT,CUATRO);_delay_ms(20);
     322:	b8 01       	movw	r22, r16
     324:	ce 01       	movw	r24, r28
     326:	0e 94 36 01 	call	0x26c	; 0x26c <numero>
     32a:	8f e3       	ldi	r24, 0x3F	; 63
     32c:	9c e9       	ldi	r25, 0x9C	; 156
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	f1 f7       	brne	.-4      	; 0x32e <numeros_sorteo+0x4e>
     332:	00 c0       	rjmp	.+0      	; 0x334 <numeros_sorteo+0x54>
     334:	00 00       	nop
	numero(PORT,TRES);_delay_ms(20);
     336:	b6 01       	movw	r22, r12
     338:	ce 01       	movw	r24, r28
     33a:	0e 94 36 01 	call	0x26c	; 0x26c <numero>
     33e:	8f e3       	ldi	r24, 0x3F	; 63
     340:	9c e9       	ldi	r25, 0x9C	; 156
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	f1 f7       	brne	.-4      	; 0x342 <numeros_sorteo+0x62>
     346:	00 c0       	rjmp	.+0      	; 0x348 <numeros_sorteo+0x68>
     348:	00 00       	nop
	numero(PORT,UNO);_delay_ms(20);
     34a:	b5 01       	movw	r22, r10
     34c:	ce 01       	movw	r24, r28
     34e:	0e 94 36 01 	call	0x26c	; 0x26c <numero>
     352:	8f e3       	ldi	r24, 0x3F	; 63
     354:	9c e9       	ldi	r25, 0x9C	; 156
     356:	01 97       	sbiw	r24, 0x01	; 1
     358:	f1 f7       	brne	.-4      	; 0x356 <numeros_sorteo+0x76>
     35a:	00 c0       	rjmp	.+0      	; 0x35c <numeros_sorteo+0x7c>
     35c:	00 00       	nop
	numero(PORT,TRES);_delay_ms(20);
     35e:	b6 01       	movw	r22, r12
     360:	ce 01       	movw	r24, r28
     362:	0e 94 36 01 	call	0x26c	; 0x26c <numero>
     366:	8f e3       	ldi	r24, 0x3F	; 63
     368:	9c e9       	ldi	r25, 0x9C	; 156
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <numeros_sorteo+0x8a>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <numeros_sorteo+0x90>
     370:	00 00       	nop
	numero(PORT,DOS);_delay_ms(20);
     372:	b7 01       	movw	r22, r14
     374:	ce 01       	movw	r24, r28
     376:	0e 94 36 01 	call	0x26c	; 0x26c <numero>
     37a:	8f e3       	ldi	r24, 0x3F	; 63
     37c:	9c e9       	ldi	r25, 0x9C	; 156
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <numeros_sorteo+0x9e>
     382:	00 c0       	rjmp	.+0      	; 0x384 <numeros_sorteo+0xa4>
     384:	00 00       	nop
}
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	ef 90       	pop	r14
     392:	df 90       	pop	r13
     394:	cf 90       	pop	r12
     396:	bf 90       	pop	r11
     398:	af 90       	pop	r10
     39a:	08 95       	ret

0000039c <seleccion_aleatoria>:
void semilla(unsigned char valor){
	srandom(valor);
}*/

// REALIZA LA SELECCION ALEATORIA PARA 3 O 4 JUGADORES
void seleccion_aleatoria(int jugadores, int aleatorio, int REFER[], int ORDEN[]) {
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	ec 01       	movw	r28, r24
     3ae:	8a 01       	movw	r16, r20
     3b0:	69 01       	movw	r12, r18
	for (int i=0; i<jugadores; i++){
     3b2:	e1 2c       	mov	r14, r1
     3b4:	f1 2c       	mov	r15, r1
     3b6:	1f c0       	rjmp	.+62     	; 0x3f6 <seleccion_aleatoria+0x5a>
		// VALOR ALEATORIO PARA ESCOGER UNA POSICION DE LA REFERENCIA
		do {
			aleatorio = random()%jugadores; //[0,3) // LO USO PARA LAS POSICIONES
     3b8:	0e 94 1e 0a 	call	0x143c	; 0x143c <random>
     3bc:	9e 01       	movw	r18, r28
     3be:	0d 2e       	mov	r0, r29
     3c0:	00 0c       	add	r0, r0
     3c2:	44 0b       	sbc	r20, r20
     3c4:	55 0b       	sbc	r21, r21
     3c6:	0e 94 92 09 	call	0x1324	; 0x1324 <__divmodsi4>
		} while (REFER[aleatorio] == 0);
     3ca:	66 0f       	add	r22, r22
     3cc:	77 1f       	adc	r23, r23
     3ce:	d8 01       	movw	r26, r16
     3d0:	a6 0f       	add	r26, r22
     3d2:	b7 1f       	adc	r27, r23
     3d4:	8d 91       	ld	r24, X+
     3d6:	9c 91       	ld	r25, X
     3d8:	11 97       	sbiw	r26, 0x01	; 1
     3da:	00 97       	sbiw	r24, 0x00	; 0
     3dc:	69 f3       	breq	.-38     	; 0x3b8 <seleccion_aleatoria+0x1c>
		
		ORDEN[i] = REFER[aleatorio];
     3de:	f7 01       	movw	r30, r14
     3e0:	ee 0f       	add	r30, r30
     3e2:	ff 1f       	adc	r31, r31
     3e4:	ec 0d       	add	r30, r12
     3e6:	fd 1d       	adc	r31, r13
     3e8:	91 83       	std	Z+1, r25	; 0x01
     3ea:	80 83       	st	Z, r24
		REFER[aleatorio] = 0;
     3ec:	1d 92       	st	X+, r1
     3ee:	1c 92       	st	X, r1
	srandom(valor);
}*/

// REALIZA LA SELECCION ALEATORIA PARA 3 O 4 JUGADORES
void seleccion_aleatoria(int jugadores, int aleatorio, int REFER[], int ORDEN[]) {
	for (int i=0; i<jugadores; i++){
     3f0:	8f ef       	ldi	r24, 0xFF	; 255
     3f2:	e8 1a       	sub	r14, r24
     3f4:	f8 0a       	sbc	r15, r24
     3f6:	ec 16       	cp	r14, r28
     3f8:	fd 06       	cpc	r15, r29
     3fa:	f4 f2       	brlt	.-68     	; 0x3b8 <seleccion_aleatoria+0x1c>
		} while (REFER[aleatorio] == 0);
		
		ORDEN[i] = REFER[aleatorio];
		REFER[aleatorio] = 0;
	}
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	ef 90       	pop	r14
     408:	df 90       	pop	r13
     40a:	cf 90       	pop	r12
     40c:	08 95       	ret

0000040e <seleccion_orden>:

// PERMITE MOSTRAR EL NUMERO ALEATORIO EN PANTALLA
void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
     40e:	af 92       	push	r10
     410:	bf 92       	push	r11
     412:	cf 92       	push	r12
     414:	df 92       	push	r13
     416:	ef 92       	push	r14
     418:	ff 92       	push	r15
     41a:	0f 93       	push	r16
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	eb 01       	movw	r28, r22
     424:	5a 01       	movw	r10, r20
     426:	69 01       	movw	r12, r18
	switch(valor){
     428:	82 30       	cpi	r24, 0x02	; 2
     42a:	91 05       	cpc	r25, r1
     42c:	f1 f0       	breq	.+60     	; 0x46a <seleccion_orden+0x5c>
     42e:	1c f4       	brge	.+6      	; 0x436 <seleccion_orden+0x28>
     430:	01 97       	sbiw	r24, 0x01	; 1
     432:	71 f0       	breq	.+28     	; 0x450 <seleccion_orden+0x42>
     434:	3b c0       	rjmp	.+118    	; 0x4ac <seleccion_orden+0x9e>
     436:	83 30       	cpi	r24, 0x03	; 3
     438:	91 05       	cpc	r25, r1
     43a:	29 f1       	breq	.+74     	; 0x486 <seleccion_orden+0x78>
     43c:	04 97       	sbiw	r24, 0x04	; 4
     43e:	89 f1       	breq	.+98     	; 0x4a2 <seleccion_orden+0x94>
     440:	35 c0       	rjmp	.+106    	; 0x4ac <seleccion_orden+0x9e>
		case 1:
			for (int i=0; i<20; i++){
				numero(PORT,UNO);
     442:	b5 01       	movw	r22, r10
     444:	ce 01       	movw	r24, r28
     446:	0e 94 36 01 	call	0x26c	; 0x26c <numero>

// PERMITE MOSTRAR EL NUMERO ALEATORIO EN PANTALLA
void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
		case 1:
			for (int i=0; i<20; i++){
     44a:	0f 5f       	subi	r16, 0xFF	; 255
     44c:	1f 4f       	sbci	r17, 0xFF	; 255
     44e:	02 c0       	rjmp	.+4      	; 0x454 <seleccion_orden+0x46>
	}
}

// PERMITE MOSTRAR EL NUMERO ALEATORIO EN PANTALLA
void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
     450:	00 e0       	ldi	r16, 0x00	; 0
     452:	10 e0       	ldi	r17, 0x00	; 0
		case 1:
			for (int i=0; i<20; i++){
     454:	04 31       	cpi	r16, 0x14	; 20
     456:	11 05       	cpc	r17, r1
     458:	a4 f3       	brlt	.-24     	; 0x442 <seleccion_orden+0x34>
     45a:	28 c0       	rjmp	.+80     	; 0x4ac <seleccion_orden+0x9e>
				numero(PORT,UNO);
			}
			break;
		case 2:
			for (int i=0; i<20; i++){
				numero(PORT,DOS);
     45c:	b6 01       	movw	r22, r12
     45e:	ce 01       	movw	r24, r28
     460:	0e 94 36 01 	call	0x26c	; 0x26c <numero>
			for (int i=0; i<20; i++){
				numero(PORT,UNO);
			}
			break;
		case 2:
			for (int i=0; i<20; i++){
     464:	0f 5f       	subi	r16, 0xFF	; 255
     466:	1f 4f       	sbci	r17, 0xFF	; 255
     468:	02 c0       	rjmp	.+4      	; 0x46e <seleccion_orden+0x60>
	}
}

// PERMITE MOSTRAR EL NUMERO ALEATORIO EN PANTALLA
void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
     46a:	00 e0       	ldi	r16, 0x00	; 0
     46c:	10 e0       	ldi	r17, 0x00	; 0
			for (int i=0; i<20; i++){
				numero(PORT,UNO);
			}
			break;
		case 2:
			for (int i=0; i<20; i++){
     46e:	04 31       	cpi	r16, 0x14	; 20
     470:	11 05       	cpc	r17, r1
     472:	a4 f3       	brlt	.-24     	; 0x45c <seleccion_orden+0x4e>
     474:	1b c0       	rjmp	.+54     	; 0x4ac <seleccion_orden+0x9e>
				numero(PORT,DOS);
			}
			break;
		case 3:
			for (int i=0; i<20; i++){
				numero(PORT,TRES);
     476:	b8 01       	movw	r22, r16
     478:	ce 01       	movw	r24, r28
     47a:	0e 94 36 01 	call	0x26c	; 0x26c <numero>
			for (int i=0; i<20; i++){
				numero(PORT,DOS);
			}
			break;
		case 3:
			for (int i=0; i<20; i++){
     47e:	8f ef       	ldi	r24, 0xFF	; 255
     480:	e8 1a       	sub	r14, r24
     482:	f8 0a       	sbc	r15, r24
     484:	02 c0       	rjmp	.+4      	; 0x48a <seleccion_orden+0x7c>
	}
}

// PERMITE MOSTRAR EL NUMERO ALEATORIO EN PANTALLA
void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
     486:	e1 2c       	mov	r14, r1
     488:	f1 2c       	mov	r15, r1
			for (int i=0; i<20; i++){
				numero(PORT,DOS);
			}
			break;
		case 3:
			for (int i=0; i<20; i++){
     48a:	84 e1       	ldi	r24, 0x14	; 20
     48c:	e8 16       	cp	r14, r24
     48e:	f1 04       	cpc	r15, r1
     490:	94 f3       	brlt	.-28     	; 0x476 <seleccion_orden+0x68>
     492:	0c c0       	rjmp	.+24     	; 0x4ac <seleccion_orden+0x9e>
				numero(PORT,TRES);
			}
			break;
		case 4:
			for (int i=0; i<20; i++){
				numero(PORT,CUATRO);
     494:	b7 01       	movw	r22, r14
     496:	ce 01       	movw	r24, r28
     498:	0e 94 36 01 	call	0x26c	; 0x26c <numero>
			for (int i=0; i<20; i++){
				numero(PORT,TRES);
			}
			break;
		case 4:
			for (int i=0; i<20; i++){
     49c:	0f 5f       	subi	r16, 0xFF	; 255
     49e:	1f 4f       	sbci	r17, 0xFF	; 255
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <seleccion_orden+0x98>
	}
}

// PERMITE MOSTRAR EL NUMERO ALEATORIO EN PANTALLA
void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
     4a2:	00 e0       	ldi	r16, 0x00	; 0
     4a4:	10 e0       	ldi	r17, 0x00	; 0
			for (int i=0; i<20; i++){
				numero(PORT,TRES);
			}
			break;
		case 4:
			for (int i=0; i<20; i++){
     4a6:	04 31       	cpi	r16, 0x14	; 20
     4a8:	11 05       	cpc	r17, r1
     4aa:	a4 f3       	brlt	.-24     	; 0x494 <seleccion_orden+0x86>
				numero(PORT,CUATRO);
			}
			break;
	}
}
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	bf 90       	pop	r11
     4be:	af 90       	pop	r10
     4c0:	08 95       	ret

000004c2 <visualizar_turno>:

// COMPACTA TODO EL PROCESO DE SELECCION ALEATORIA Y MOSTRAR NUMEROS EN PANTALLA
void visualizar_turno(char PORT[], char ESQUINA[], int ORDEN[], int indice, char UNO[], char DOS[], char TRES[], char CUATRO[]){
     4c2:	2f 92       	push	r2
     4c4:	3f 92       	push	r3
     4c6:	4f 92       	push	r4
     4c8:	5f 92       	push	r5
     4ca:	6f 92       	push	r6
     4cc:	7f 92       	push	r7
     4ce:	8f 92       	push	r8
     4d0:	9f 92       	push	r9
     4d2:	af 92       	push	r10
     4d4:	bf 92       	push	r11
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <visualizar_turno+0x26>
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <visualizar_turno+0x28>
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	4c 01       	movw	r8, r24
     4f0:	7a 83       	std	Y+2, r23	; 0x02
     4f2:	69 83       	std	Y+1, r22	; 0x01
     4f4:	3a 01       	movw	r6, r20
     4f6:	3c 83       	std	Y+4, r19	; 0x04
     4f8:	2b 83       	std	Y+3, r18	; 0x03
     4fa:	18 01       	movw	r2, r16
     4fc:	27 01       	movw	r4, r14
     4fe:	75 01       	movw	r14, r10
	sonido_click();
     500:	0e 94 2c 01 	call	0x258	; 0x258 <sonido_click>
	esquina(PORT,ESQUINA);
     504:	69 81       	ldd	r22, Y+1	; 0x01
     506:	7a 81       	ldd	r23, Y+2	; 0x02
     508:	c4 01       	movw	r24, r8
     50a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <esquina>
	numeros_sorteo(PORT,UNO,DOS,TRES,CUATRO);
     50e:	85 01       	movw	r16, r10
     510:	96 01       	movw	r18, r12
     512:	a2 01       	movw	r20, r4
     514:	b1 01       	movw	r22, r2
     516:	c4 01       	movw	r24, r8
     518:	0e 94 70 01 	call	0x2e0	; 0x2e0 <numeros_sorteo>
	seleccion_orden(ORDEN[indice],PORT,UNO,DOS,TRES,CUATRO);
     51c:	8b 81       	ldd	r24, Y+3	; 0x03
     51e:	9c 81       	ldd	r25, Y+4	; 0x04
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	86 0d       	add	r24, r6
     526:	97 1d       	adc	r25, r7
     528:	9a 83       	std	Y+2, r25	; 0x02
     52a:	89 83       	std	Y+1, r24	; 0x01
     52c:	86 01       	movw	r16, r12
     52e:	92 01       	movw	r18, r4
     530:	a1 01       	movw	r20, r2
     532:	b4 01       	movw	r22, r8
     534:	fc 01       	movw	r30, r24
     536:	80 81       	ld	r24, Z
     538:	91 81       	ldd	r25, Z+1	; 0x01
     53a:	0e 94 07 02 	call	0x40e	; 0x40e <seleccion_orden>
}
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	0f 91       	pop	r16
     54e:	ff 90       	pop	r15
     550:	ef 90       	pop	r14
     552:	df 90       	pop	r13
     554:	cf 90       	pop	r12
     556:	bf 90       	pop	r11
     558:	af 90       	pop	r10
     55a:	9f 90       	pop	r9
     55c:	8f 90       	pop	r8
     55e:	7f 90       	pop	r7
     560:	6f 90       	pop	r6
     562:	5f 90       	pop	r5
     564:	4f 90       	pop	r4
     566:	3f 90       	pop	r3
     568:	2f 90       	pop	r2
     56a:	08 95       	ret

0000056c <piso>:

// VISUALIZACION DEL PISO DEL JUEGO
void piso(char PORT[], char PISO[]){
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	7c 01       	movw	r14, r24
     57a:	8b 01       	movw	r16, r22
	for (int i=0;i<8;i+=8)
     57c:	c0 e0       	ldi	r28, 0x00	; 0
     57e:	d0 e0       	ldi	r29, 0x00	; 0
     580:	08 c0       	rjmp	.+16     	; 0x592 <piso+0x26>
	{
		filas(i,10,PORT,PISO);
     582:	98 01       	movw	r18, r16
     584:	a7 01       	movw	r20, r14
     586:	6a e0       	ldi	r22, 0x0A	; 10
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	ce 01       	movw	r24, r28
     58c:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
	seleccion_orden(ORDEN[indice],PORT,UNO,DOS,TRES,CUATRO);
}

// VISUALIZACION DEL PISO DEL JUEGO
void piso(char PORT[], char PISO[]){
	for (int i=0;i<8;i+=8)
     590:	28 96       	adiw	r28, 0x08	; 8
     592:	c8 30       	cpi	r28, 0x08	; 8
     594:	d1 05       	cpc	r29, r1
     596:	ac f3       	brlt	.-22     	; 0x582 <piso+0x16>
	{
		filas(i,10,PORT,PISO);
	}
}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	1f 91       	pop	r17
     59e:	0f 91       	pop	r16
     5a0:	ff 90       	pop	r15
     5a2:	ef 90       	pop	r14
     5a4:	08 95       	ret

000005a6 <ganaste>:

// MENSAJE DE "GANASTE" AL FINAL DEL JUEGO EN CASO DE LLEGAR A LA VICTORIA
void ganaste(char PORT[], char GANASTE[]) {
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	7c 01       	movw	r14, r24
     5b4:	8b 01       	movw	r16, r22
	//MENSAJE DE VICTORIA
	PORTC = ((1<<5));
     5b6:	80 e2       	ldi	r24, 0x20	; 32
     5b8:	88 b9       	out	0x08, r24	; 8
	for (int i=0;i<56;i++)
     5ba:	c0 e0       	ldi	r28, 0x00	; 0
     5bc:	d0 e0       	ldi	r29, 0x00	; 0
     5be:	08 c0       	rjmp	.+16     	; 0x5d0 <ganaste+0x2a>
	{
		filas(i,10,PORT,GANASTE);
     5c0:	98 01       	movw	r18, r16
     5c2:	a7 01       	movw	r20, r14
     5c4:	6a e0       	ldi	r22, 0x0A	; 10
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	ce 01       	movw	r24, r28
     5ca:	0e 94 8c 00 	call	0x118	; 0x118 <filas>

// MENSAJE DE "GANASTE" AL FINAL DEL JUEGO EN CASO DE LLEGAR A LA VICTORIA
void ganaste(char PORT[], char GANASTE[]) {
	//MENSAJE DE VICTORIA
	PORTC = ((1<<5));
	for (int i=0;i<56;i++)
     5ce:	21 96       	adiw	r28, 0x01	; 1
     5d0:	c8 33       	cpi	r28, 0x38	; 56
     5d2:	d1 05       	cpc	r29, r1
     5d4:	ac f3       	brlt	.-22     	; 0x5c0 <ganaste+0x1a>
	{
		filas(i,10,PORT,GANASTE);
	}
	PORTC = ((1<<5));
     5d6:	80 e2       	ldi	r24, 0x20	; 32
     5d8:	88 b9       	out	0x08, r24	; 8
}
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	08 95       	ret

000005e8 <main>:

// ******************************* MAIN *************************************
int main(void)
{
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	cc 56       	subi	r28, 0x6C	; 108
     5f2:	d1 40       	sbci	r29, 0x01	; 1
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
	// PUERTOS PARA EL DATO DE LA MATRIZ
	DDRB = 0B11111111; // SALIDA TODO EL PUERTO B
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
     600:	84 b9       	out	0x04, r24	; 4
	
	// PUERTOS PARA EL DESPLAZMIENTO DE LA MATRIZ
	DDRD = 0B11111111; // SALIDAS TODO EL PUERTO D
     602:	8a b9       	out	0x0a, r24	; 10
	
	// PUERTOS PARA LAS BOTONERAS
	DDRC |= (0<<0)|(0<<1)|(0<<2); //ENTRADAS PARA LOS PUERTOS C0,C1,C2
     604:	87 b1       	in	r24, 0x07	; 7
     606:	87 b9       	out	0x07, r24	; 7
	
	// PUERTOS PARA LOS SONIDOS
	DDRC |= (1<<3)|(1<<4)|(1<<5); //SALIDA PARA EL PUERTO C3 MUSICA RED LIGHT GREEN LIGHT, C4 CLICK, y C5 VICTORIA
     608:	87 b1       	in	r24, 0x07	; 7
     60a:	88 63       	ori	r24, 0x38	; 56
     60c:	87 b9       	out	0x07, r24	; 7
		
	//UART_init();
	
	// PUERTOS EN DECIMAL CORRESPONDIENTE AL DESPLAZMIENTO
	char PORT[8] =  {1,2,4,8,16,32,64,128};//VALORES DE PINES DEL PORTD
     60e:	88 e0       	ldi	r24, 0x08	; 8
     610:	e4 e0       	ldi	r30, 0x04	; 4
     612:	f1 e0       	ldi	r31, 0x01	; 1
     614:	de 01       	movw	r26, r28
     616:	11 96       	adiw	r26, 0x01	; 1
     618:	01 90       	ld	r0, Z+
     61a:	0d 92       	st	X+, r0
     61c:	8a 95       	dec	r24
     61e:	e1 f7       	brne	.-8      	; 0x618 <main+0x30>
	// VALORES DE LA ELIMINACION DE CADA PISO DE ABAJO HACIA ARRIBA
	char PISO_FUERA[8] = {127,191,223,239,247,251,253,254};
		
	// UBICACIONES
	char UBICACION_SUPERIOR[2] = {129,80};
	char UBICACION_INFERIOR[2] = {129,1};
     620:	0f 2e       	mov	r0, r31
     622:	f1 e8       	ldi	r31, 0x81	; 129
     624:	3f 2e       	mov	r3, r31
     626:	f0 2d       	mov	r31, r0
     628:	22 24       	eor	r2, r2
     62a:	23 94       	inc	r2
	
	// ********************* MENSAJES, NUMEROS, FORMAS *********************
	char SQUID_GAME[]={0x0, 0x44, 0x4A, 0x4A, 0x4A, 0x4A, 0x32, 0x0, //S
     62c:	88 e5       	ldi	r24, 0x58	; 88
     62e:	ec e0       	ldi	r30, 0x0C	; 12
     630:	f1 e0       	ldi	r31, 0x01	; 1
     632:	de 01       	movw	r26, r28
     634:	19 96       	adiw	r26, 0x09	; 9
     636:	01 90       	ld	r0, Z+
     638:	0d 92       	st	X+, r0
     63a:	8a 95       	dec	r24
     63c:	e1 f7       	brne	.-8      	; 0x636 <main+0x4e>
		0x0, 0x7e, 0x7e, 0x66, 0x66, 0x7e, 0x7e, 0x0, //O
		0x0, 0x7e, 0x7e, 0x60, 0x60, 0x60, 0x60, 0x0, //L
		0x0, 0x7e, 0x7e, 0x16, 0x16, 0x7e, 0x7e, 0x0, //A
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}; //ESPACIO
	
	char ANIMACION1[] = {
     63e:	80 e2       	ldi	r24, 0x20	; 32
     640:	e4 e6       	ldi	r30, 0x64	; 100
     642:	f1 e0       	ldi	r31, 0x01	; 1
     644:	de 01       	movw	r26, r28
     646:	af 59       	subi	r26, 0x9F	; 159
     648:	bf 4f       	sbci	r27, 0xFF	; 255
     64a:	01 90       	ld	r0, Z+
     64c:	0d 92       	st	X+, r0
     64e:	8a 95       	dec	r24
     650:	e1 f7       	brne	.-8      	; 0x64a <main+0x62>
		0x0, 0x0, 0x24, 0x0, 0x0, 0x24, 0x0, 0x0, // CENTRO 2
		0x0, 0x42, 0x0, 0x0, 0x0, 0x0, 0x42, 0x0, // CENTRO 3
		0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81 // CENTRO 4
	};
	
	char ANIMACION2[] = {
     652:	80 e2       	ldi	r24, 0x20	; 32
     654:	e4 e8       	ldi	r30, 0x84	; 132
     656:	f1 e0       	ldi	r31, 0x01	; 1
     658:	de 01       	movw	r26, r28
     65a:	af 57       	subi	r26, 0x7F	; 127
     65c:	bf 4f       	sbci	r27, 0xFF	; 255
     65e:	01 90       	ld	r0, Z+
     660:	0d 92       	st	X+, r0
     662:	8a 95       	dec	r24
     664:	e1 f7       	brne	.-8      	; 0x65e <main+0x76>
		0x0, 0x0, 0x3C, 0x24, 0x24, 0x3C, 0x0, 0x0, // CENTRO 2
		0x0, 0x7E, 0x42, 0x42, 0x42, 0x42, 0x7E, 0x0, // CENTRO 3
		0xFF, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xFF // CENTRO 4
	};
	
	char NUMERO3[] = {
     666:	88 e0       	ldi	r24, 0x08	; 8
     668:	e4 ea       	ldi	r30, 0xA4	; 164
     66a:	f1 e0       	ldi	r31, 0x01	; 1
     66c:	de 01       	movw	r26, r28
     66e:	af 55       	subi	r26, 0x5F	; 95
     670:	bf 4f       	sbci	r27, 0xFF	; 255
     672:	01 90       	ld	r0, Z+
     674:	0d 92       	st	X+, r0
     676:	8a 95       	dec	r24
     678:	e1 f7       	brne	.-8      	; 0x672 <main+0x8a>
		0x00, 0x00, 0x11, 0x15, 0x15, 0x1F, 0xA0, 0x40 // CON FLECHAS
	};
	
	char NUMERO4[] = {
     67a:	88 e0       	ldi	r24, 0x08	; 8
     67c:	ec ea       	ldi	r30, 0xAC	; 172
     67e:	f1 e0       	ldi	r31, 0x01	; 1
     680:	de 01       	movw	r26, r28
     682:	a7 55       	subi	r26, 0x57	; 87
     684:	bf 4f       	sbci	r27, 0xFF	; 255
     686:	01 90       	ld	r0, Z+
     688:	0d 92       	st	X+, r0
     68a:	8a 95       	dec	r24
     68c:	e1 f7       	brne	.-8      	; 0x686 <main+0x9e>
		0x40, 0xA0, 0x07, 0x04, 0x04, 0x1F, 0x0, 0x0 // CON FLECHAS
	};
	
	char UNO[] = {
     68e:	88 e0       	ldi	r24, 0x08	; 8
     690:	e4 eb       	ldi	r30, 0xB4	; 180
     692:	f1 e0       	ldi	r31, 0x01	; 1
     694:	de 01       	movw	r26, r28
     696:	af 54       	subi	r26, 0x4F	; 79
     698:	bf 4f       	sbci	r27, 0xFF	; 255
     69a:	01 90       	ld	r0, Z+
     69c:	0d 92       	st	X+, r0
     69e:	8a 95       	dec	r24
     6a0:	e1 f7       	brne	.-8      	; 0x69a <main+0xb2>
		0x0, 0x0, 0x04, 0x04, 0x7E, 0x7E, 0x0, 0x0 // UNO DEL SORTEO
	};
	
	char DOS[] = {
     6a2:	88 e0       	ldi	r24, 0x08	; 8
     6a4:	ec eb       	ldi	r30, 0xBC	; 188
     6a6:	f1 e0       	ldi	r31, 0x01	; 1
     6a8:	de 01       	movw	r26, r28
     6aa:	a7 54       	subi	r26, 0x47	; 71
     6ac:	bf 4f       	sbci	r27, 0xFF	; 255
     6ae:	01 90       	ld	r0, Z+
     6b0:	0d 92       	st	X+, r0
     6b2:	8a 95       	dec	r24
     6b4:	e1 f7       	brne	.-8      	; 0x6ae <main+0xc6>
		0x0, 0x0, 0x7A, 0x7A, 0x5E, 0x5E, 0x0, 0x0 // DOS DEL SORTEO
	};
	
	char TRES[] = {
     6b6:	88 e0       	ldi	r24, 0x08	; 8
     6b8:	e4 ec       	ldi	r30, 0xC4	; 196
     6ba:	f1 e0       	ldi	r31, 0x01	; 1
     6bc:	de 01       	movw	r26, r28
     6be:	af 53       	subi	r26, 0x3F	; 63
     6c0:	bf 4f       	sbci	r27, 0xFF	; 255
     6c2:	01 90       	ld	r0, Z+
     6c4:	0d 92       	st	X+, r0
     6c6:	8a 95       	dec	r24
     6c8:	e1 f7       	brne	.-8      	; 0x6c2 <main+0xda>
		0x0, 0x0, 0x5A, 0x5A, 0x7E, 0x7E, 0x0, 0x0 // TRES DEL SORTEO
	};
	
	char CUATRO[] = {
     6ca:	88 e0       	ldi	r24, 0x08	; 8
     6cc:	ec ec       	ldi	r30, 0xCC	; 204
     6ce:	f1 e0       	ldi	r31, 0x01	; 1
     6d0:	de 01       	movw	r26, r28
     6d2:	a7 53       	subi	r26, 0x37	; 55
     6d4:	bf 4f       	sbci	r27, 0xFF	; 255
     6d6:	01 90       	ld	r0, Z+
     6d8:	0d 92       	st	X+, r0
     6da:	8a 95       	dec	r24
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <main+0xee>
		0x0, 0x0, 0x18, 0x1C, 0x72, 0x7E, 0x0, 0x0 // CUATRO DEL SORTEO
	};
	
	char ESQUINA1[] = {
     6de:	fe 01       	movw	r30, r28
     6e0:	ef 52       	subi	r30, 0x2F	; 47
     6e2:	ff 4f       	sbci	r31, 0xFF	; 255
     6e4:	80 e1       	ldi	r24, 0x10	; 16
     6e6:	df 01       	movw	r26, r30
     6e8:	28 2f       	mov	r18, r24
     6ea:	1d 92       	st	X+, r1
     6ec:	2a 95       	dec	r18
     6ee:	e9 f7       	brne	.-6      	; 0x6ea <main+0x102>
     6f0:	20 82       	st	Z, r2
		0x01, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // ESQUINA 'A' ENCENDIDA
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 // ESQUINA 'A' APAGADA
	};
	
	char ESQUINA2[] = {
     6f2:	70 96       	adiw	r30, 0x10	; 16
     6f4:	df 01       	movw	r26, r30
     6f6:	28 2f       	mov	r18, r24
     6f8:	1d 92       	st	X+, r1
     6fa:	2a 95       	dec	r18
     6fc:	e9 f7       	brne	.-6      	; 0x6f8 <main+0x110>
     6fe:	27 82       	std	Z+7, r2	; 0x07
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x01, // ESQUINA 'B' ENCENDIDA
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 // ESQUINA 'B' APAGADA
	};
	
	char ESQUINA3[] = {
     700:	70 96       	adiw	r30, 0x10	; 16
     702:	df 01       	movw	r26, r30
     704:	28 2f       	mov	r18, r24
     706:	1d 92       	st	X+, r1
     708:	2a 95       	dec	r18
     70a:	e9 f7       	brne	.-6      	; 0x706 <main+0x11e>
     70c:	90 e8       	ldi	r25, 0x80	; 128
     70e:	90 83       	st	Z, r25
		0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // ESQUINA 'C' ENCENDIDA
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 // ESQUINA 'C' APAGADA
	};
	
	char ESQUINA4[] = {
     710:	70 96       	adiw	r30, 0x10	; 16
     712:	df 01       	movw	r26, r30
     714:	1d 92       	st	X+, r1
     716:	8a 95       	dec	r24
     718:	e9 f7       	brne	.-6      	; 0x714 <main+0x12c>
     71a:	97 83       	std	Z+7, r25	; 0x07
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, // ESQUINA 'D' ENCENDIDA
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 // ESQUINA 'D' APAGADA
	};
	
	char PISO[] = {
     71c:	70 96       	adiw	r30, 0x10	; 16
     71e:	88 e0       	ldi	r24, 0x08	; 8
     720:	df 01       	movw	r26, r30
     722:	1d 92       	st	X+, r1
     724:	8a 95       	dec	r24
     726:	e9 f7       	brne	.-6      	; 0x722 <main+0x13a>
		0,0,0,0,0,0,0,0 //REFERENCIA INCIAL DEL PISO APAGADO POR COMPLETO
	};
	
	char GANASTE[] = {
     728:	80 e4       	ldi	r24, 0x40	; 64
     72a:	e4 ed       	ldi	r30, 0xD4	; 212
     72c:	f1 e0       	ldi	r31, 0x01	; 1
     72e:	de 01       	movw	r26, r28
     730:	a7 5e       	subi	r26, 0xE7	; 231
     732:	be 4f       	sbci	r27, 0xFE	; 254
     734:	01 90       	ld	r0, Z+
     736:	0d 92       	st	X+, r0
     738:	8a 95       	dec	r24
     73a:	e1 f7       	brne	.-8      	; 0x734 <main+0x14c>
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 //ESPACIO
	};
	
	// VARIABLES INICIALES PREVIO A LA ENTRADA AL WHILE(1)
	int inicio = 0;
	int valor3 = 1;
     73c:	01 e0       	ldi	r16, 0x01	; 1
     73e:	10 e0       	ldi	r17, 0x00	; 0
		0x0, 0x7E, 0x4A, 0x4A, 0x4A, 0x42, 0x42, 0x0, //E
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 //ESPACIO
	};
	
	// VARIABLES INICIALES PREVIO A LA ENTRADA AL WHILE(1)
	int inicio = 0;
     740:	81 2c       	mov	r8, r1
     742:	91 2c       	mov	r9, r1
     744:	2a c0       	rjmp	.+84     	; 0x79a <main+0x1b2>
	// ********************* WHILE(1) *********************
	while(1){
		
		// ANIMACION DE ENTRADA
		while (!inicio) {
			animacion1(PORT,ANIMACION1);
     746:	be 01       	movw	r22, r28
     748:	6f 59       	subi	r22, 0x9F	; 159
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	ce 01       	movw	r24, r28
     74e:	01 96       	adiw	r24, 0x01	; 1
     750:	0e 94 b8 00 	call	0x170	; 0x170 <animacion1>
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
     754:	86 b1       	in	r24, 0x06	; 6
     756:	81 34       	cpi	r24, 0x41	; 65
     758:	59 f4       	brne	.+22     	; 0x770 <main+0x188>
				inicio = 1;
				squid_game(PORT,SQUID_GAME);
     75a:	be 01       	movw	r22, r28
     75c:	67 5f       	subi	r22, 0xF7	; 247
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	ce 01       	movw	r24, r28
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	0e 94 0c 01 	call	0x218	; 0x218 <squid_game>
		// ANIMACION DE ENTRADA
		while (!inicio) {
			animacion1(PORT,ANIMACION1);
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
				inicio = 1;
     768:	88 24       	eor	r8, r8
     76a:	83 94       	inc	r8
     76c:	91 2c       	mov	r9, r1
				squid_game(PORT,SQUID_GAME);
				break;
     76e:	18 c0       	rjmp	.+48     	; 0x7a0 <main+0x1b8>
			}
			animacion2(PORT,ANIMACION2);
     770:	be 01       	movw	r22, r28
     772:	6f 57       	subi	r22, 0x7F	; 127
     774:	7f 4f       	sbci	r23, 0xFF	; 255
     776:	ce 01       	movw	r24, r28
     778:	01 96       	adiw	r24, 0x01	; 1
     77a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <animacion2>
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
     77e:	86 b1       	in	r24, 0x06	; 6
     780:	81 34       	cpi	r24, 0x41	; 65
     782:	59 f4       	brne	.+22     	; 0x79a <main+0x1b2>
				inicio = 1;
				squid_game(PORT,SQUID_GAME);
     784:	be 01       	movw	r22, r28
     786:	67 5f       	subi	r22, 0xF7	; 247
     788:	7f 4f       	sbci	r23, 0xFF	; 255
     78a:	ce 01       	movw	r24, r28
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	0e 94 0c 01 	call	0x218	; 0x218 <squid_game>
				break;
			}
			animacion2(PORT,ANIMACION2);
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
				inicio = 1;
     792:	88 24       	eor	r8, r8
     794:	83 94       	inc	r8
     796:	91 2c       	mov	r9, r1
				squid_game(PORT,SQUID_GAME);
				break;
     798:	03 c0       	rjmp	.+6      	; 0x7a0 <main+0x1b8>
	
	// ********************* WHILE(1) *********************
	while(1){
		
		// ANIMACION DE ENTRADA
		while (!inicio) {
     79a:	81 14       	cp	r8, r1
     79c:	91 04       	cpc	r9, r1
     79e:	99 f2       	breq	.-90     	; 0x746 <main+0x15e>
		/* EMPIEZA LA SELECCION DE CANTIDAD DE JUGADORES CON:
		DERECHA:   0B 0100 0010
		IZQUIERDA: 0B 0100 0100 */
		
		//NUMERO 3 CON FLECHA A LA DERECHA
		jugadores = 0;
     7a0:	61 2c       	mov	r6, r1
     7a2:	71 2c       	mov	r7, r1
		while (valor3) {
     7a4:	28 c0       	rjmp	.+80     	; 0x7f6 <main+0x20e>
			numero(PORT,NUMERO3);
     7a6:	be 01       	movw	r22, r28
     7a8:	6f 55       	subi	r22, 0x5F	; 95
     7aa:	7f 4f       	sbci	r23, 0xFF	; 255
     7ac:	ce 01       	movw	r24, r28
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	0e 94 36 01 	call	0x26c	; 0x26c <numero>
			// SI PRESIONA PARA LA DERECHA
			if (PINC == 0x42) {
     7b4:	86 b1       	in	r24, 0x06	; 6
     7b6:	82 34       	cpi	r24, 0x42	; 66
     7b8:	c1 f4       	brne	.+48     	; 0x7ea <main+0x202>
				// SONIDO DEL CLICK
				sonido_click();
     7ba:	0e 94 2c 01 	call	0x258	; 0x258 <sonido_click>
				while (1) {
					numero(PORT,NUMERO4);
     7be:	be 01       	movw	r22, r28
     7c0:	67 55       	subi	r22, 0x57	; 87
     7c2:	7f 4f       	sbci	r23, 0xFF	; 255
     7c4:	ce 01       	movw	r24, r28
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	0e 94 36 01 	call	0x26c	; 0x26c <numero>
					// SI PRESIONA PARA LA IZQUIERDA
					if (PINC == 0x44) {
     7cc:	86 b1       	in	r24, 0x06	; 6
     7ce:	84 34       	cpi	r24, 0x44	; 68
     7d0:	19 f4       	brne	.+6      	; 0x7d8 <main+0x1f0>
						// SONIDO DEL CLICK
						sonido_click();
     7d2:	0e 94 2c 01 	call	0x258	; 0x258 <sonido_click>
						break;
     7d6:	09 c0       	rjmp	.+18     	; 0x7ea <main+0x202>
					}
					// SI SELECCIONA LA OPCION DE 4 JUGADORES
					if (PINC == 0x41) {
     7d8:	86 b1       	in	r24, 0x06	; 6
     7da:	81 34       	cpi	r24, 0x41	; 65
     7dc:	81 f7       	brne	.-32     	; 0x7be <main+0x1d6>
						jugadores = 4;
     7de:	68 94       	set
     7e0:	66 24       	eor	r6, r6
     7e2:	62 f8       	bld	r6, 2
     7e4:	71 2c       	mov	r7, r1
						valor3 = 0;
     7e6:	00 e0       	ldi	r16, 0x00	; 0
     7e8:	10 e0       	ldi	r17, 0x00	; 0
						break;
					}
				}
			}
			// SI SELECCIONA LA OPCION DE 3 JUGADORES
			if (PINC == 0x41 && valor3) {
     7ea:	86 b1       	in	r24, 0x06	; 6
     7ec:	81 34       	cpi	r24, 0x41	; 65
     7ee:	19 f4       	brne	.+6      	; 0x7f6 <main+0x20e>
     7f0:	01 15       	cp	r16, r1
     7f2:	11 05       	cpc	r17, r1
     7f4:	21 f4       	brne	.+8      	; 0x7fe <main+0x216>
		DERECHA:   0B 0100 0010
		IZQUIERDA: 0B 0100 0100 */
		
		//NUMERO 3 CON FLECHA A LA DERECHA
		jugadores = 0;
		while (valor3) {
     7f6:	01 15       	cp	r16, r1
     7f8:	11 05       	cpc	r17, r1
     7fa:	a9 f6       	brne	.-86     	; 0x7a6 <main+0x1be>
     7fc:	05 c0       	rjmp	.+10     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
					}
				}
			}
			// SI SELECCIONA LA OPCION DE 3 JUGADORES
			if (PINC == 0x41 && valor3) {
				jugadores = 3;
     7fe:	0f 2e       	mov	r0, r31
     800:	f3 e0       	ldi	r31, 0x03	; 3
     802:	6f 2e       	mov	r6, r31
     804:	71 2c       	mov	r7, r1
     806:	f0 2d       	mov	r31, r0
		// SE VUELVE AL VALOR3 = 0 PARA NO ENTRAR A LA SELECCION NUEVAMENTE
		valor3 = 0;
		
		// EMPIEZA EL JUEGO EN BASE A CANTIDAD DE JUGADORES (3 O 4)
		// ---> ESTO ES PARA EL CASO QUE SE SELECCIONE 3 JUGADORES
		if (jugadores == 3){
     808:	b3 e0       	ldi	r27, 0x03	; 3
     80a:	6b 16       	cp	r6, r27
     80c:	71 04       	cpc	r7, r1
     80e:	09 f0       	breq	.+2      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     810:	5b c0       	rjmp	.+182    	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
			//PARA EL CASO DE LAS 3 ESQUINAS
			int referencia[3] = {1,2,3};
     812:	86 e0       	ldi	r24, 0x06	; 6
     814:	e4 e1       	ldi	r30, 0x14	; 20
     816:	f2 e0       	ldi	r31, 0x02	; 2
     818:	de 01       	movw	r26, r28
     81a:	af 59       	subi	r26, 0x9F	; 159
     81c:	be 4f       	sbci	r27, 0xFE	; 254
     81e:	01 90       	ld	r0, Z+
     820:	0d 92       	st	X+, r0
     822:	8a 95       	dec	r24
     824:	e1 f7       	brne	.-8      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
			int orden_juego[3] = {0,0,0};
     826:	c7 5a       	subi	r28, 0xA7	; 167
     828:	de 4f       	sbci	r29, 0xFE	; 254
     82a:	19 82       	std	Y+1, r1	; 0x01
     82c:	18 82       	st	Y, r1
     82e:	c9 55       	subi	r28, 0x59	; 89
     830:	d1 40       	sbci	r29, 0x01	; 1
     832:	c5 5a       	subi	r28, 0xA5	; 165
     834:	de 4f       	sbci	r29, 0xFE	; 254
     836:	19 82       	std	Y+1, r1	; 0x01
     838:	18 82       	st	Y, r1
     83a:	cb 55       	subi	r28, 0x5B	; 91
     83c:	d1 40       	sbci	r29, 0x01	; 1
     83e:	c3 5a       	subi	r28, 0xA3	; 163
     840:	de 4f       	sbci	r29, 0xFE	; 254
     842:	19 82       	std	Y+1, r1	; 0x01
     844:	18 82       	st	Y, r1
     846:	cd 55       	subi	r28, 0x5D	; 93
     848:	d1 40       	sbci	r29, 0x01	; 1
			int aleatorio = 0;
			
			// SELECCION ALEATORIA DE LOS 3 JUGADORES
			seleccion_aleatoria(jugadores,aleatorio,referencia,orden_juego);
     84a:	9e 01       	movw	r18, r28
     84c:	27 5a       	subi	r18, 0xA7	; 167
     84e:	3e 4f       	sbci	r19, 0xFE	; 254
     850:	ae 01       	movw	r20, r28
     852:	4f 59       	subi	r20, 0x9F	; 159
     854:	5e 4f       	sbci	r21, 0xFE	; 254
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	c3 01       	movw	r24, r6
     85c:	0e 94 ce 01 	call	0x39c	; 0x39c <seleccion_aleatoria>
			
			// MOVIMIENTO DE LOS NUMEROS
			// TURNO ESQUINA 1
			visualizar_turno(PORT,ESQUINA1,orden_juego,0,UNO,DOS,TRES,CUATRO);
     860:	fe 01       	movw	r30, r28
     862:	e7 53       	subi	r30, 0x37	; 55
     864:	ff 4f       	sbci	r31, 0xFF	; 255
     866:	5f 01       	movw	r10, r30
     868:	9e 01       	movw	r18, r28
     86a:	2f 53       	subi	r18, 0x3F	; 63
     86c:	3f 4f       	sbci	r19, 0xFF	; 255
     86e:	69 01       	movw	r12, r18
     870:	ce 01       	movw	r24, r28
     872:	87 54       	subi	r24, 0x47	; 71
     874:	9f 4f       	sbci	r25, 0xFF	; 255
     876:	7c 01       	movw	r14, r24
     878:	8e 01       	movw	r16, r28
     87a:	0f 54       	subi	r16, 0x4F	; 79
     87c:	1f 4f       	sbci	r17, 0xFF	; 255
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	ae 01       	movw	r20, r28
     884:	47 5a       	subi	r20, 0xA7	; 167
     886:	5e 4f       	sbci	r21, 0xFE	; 254
     888:	be 01       	movw	r22, r28
     88a:	6f 52       	subi	r22, 0x2F	; 47
     88c:	7f 4f       	sbci	r23, 0xFF	; 255
     88e:	88 5b       	subi	r24, 0xB8	; 184
     890:	91 09       	sbc	r25, r1
     892:	0e 94 61 02 	call	0x4c2	; 0x4c2 <visualizar_turno>
			
			// TURNO ESQUINA 2
			visualizar_turno(PORT,ESQUINA2,orden_juego,1,UNO,DOS,TRES,CUATRO);
     896:	21 e0       	ldi	r18, 0x01	; 1
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	ae 01       	movw	r20, r28
     89c:	47 5a       	subi	r20, 0xA7	; 167
     89e:	5e 4f       	sbci	r21, 0xFE	; 254
     8a0:	be 01       	movw	r22, r28
     8a2:	6f 51       	subi	r22, 0x1F	; 31
     8a4:	7f 4f       	sbci	r23, 0xFF	; 255
     8a6:	ce 01       	movw	r24, r28
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	0e 94 61 02 	call	0x4c2	; 0x4c2 <visualizar_turno>
			
			// TURNO ESQUINA 3
			visualizar_turno(PORT,ESQUINA3,orden_juego,2,UNO,DOS,TRES,CUATRO);
     8ae:	c5 01       	movw	r24, r10
     8b0:	22 e0       	ldi	r18, 0x02	; 2
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	ae 01       	movw	r20, r28
     8b6:	47 5a       	subi	r20, 0xA7	; 167
     8b8:	5e 4f       	sbci	r21, 0xFE	; 254
     8ba:	be 01       	movw	r22, r28
     8bc:	6f 50       	subi	r22, 0x0F	; 15
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	88 5c       	subi	r24, 0xC8	; 200
     8c2:	91 09       	sbc	r25, r1
     8c4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <visualizar_turno>
			
		}
		
		// ---> ESTO ES PARA EL CASO QUE SE SELECCIONE 4 JUGADORES
		if (jugadores == 4){
     8c8:	f4 e0       	ldi	r31, 0x04	; 4
     8ca:	6f 16       	cp	r6, r31
     8cc:	71 04       	cpc	r7, r1
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
     8d0:	8a c1       	rjmp	.+788    	; 0xbe6 <__stack+0x2e7>
			//PARA EL CASO DE LAS 4 ESQUINAS
			int referencia[4] = {1,2,3,4};
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	ea e1       	ldi	r30, 0x1A	; 26
     8d6:	f2 e0       	ldi	r31, 0x02	; 2
     8d8:	de 01       	movw	r26, r28
     8da:	af 59       	subi	r26, 0x9F	; 159
     8dc:	be 4f       	sbci	r27, 0xFE	; 254
     8de:	01 90       	ld	r0, Z+
     8e0:	0d 92       	st	X+, r0
     8e2:	8a 95       	dec	r24
     8e4:	e1 f7       	brne	.-8      	; 0x8de <__DATA_REGION_LENGTH__+0xde>
			int orden_juego[4] = {0,0,0,0};
     8e6:	2e 01       	movw	r4, r28
     8e8:	27 ea       	ldi	r18, 0xA7	; 167
     8ea:	42 1a       	sub	r4, r18
     8ec:	2e ef       	ldi	r18, 0xFE	; 254
     8ee:	52 0a       	sbc	r5, r18
     8f0:	88 e0       	ldi	r24, 0x08	; 8
     8f2:	d2 01       	movw	r26, r4
     8f4:	1d 92       	st	X+, r1
     8f6:	8a 95       	dec	r24
     8f8:	e9 f7       	brne	.-6      	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
			int aleatorio = 0;
			
			// SELECCION ALEATORIA DE LOS 3 JUGADORES
			seleccion_aleatoria(jugadores,aleatorio,referencia,orden_juego);
     8fa:	92 01       	movw	r18, r4
     8fc:	ae 01       	movw	r20, r28
     8fe:	4f 59       	subi	r20, 0x9F	; 159
     900:	5e 4f       	sbci	r21, 0xFE	; 254
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	c3 01       	movw	r24, r6
     908:	0e 94 ce 01 	call	0x39c	; 0x39c <seleccion_aleatoria>
			
			// MOVIMIENTO DE LOS NUMEROS
			// TURNO ESQUINA 1
			visualizar_turno(PORT,ESQUINA1,orden_juego,0,UNO,DOS,TRES,CUATRO);
     90c:	fe 01       	movw	r30, r28
     90e:	e7 53       	subi	r30, 0x37	; 55
     910:	ff 4f       	sbci	r31, 0xFF	; 255
     912:	5f 01       	movw	r10, r30
     914:	9e 01       	movw	r18, r28
     916:	2f 53       	subi	r18, 0x3F	; 63
     918:	3f 4f       	sbci	r19, 0xFF	; 255
     91a:	69 01       	movw	r12, r18
     91c:	ce 01       	movw	r24, r28
     91e:	87 54       	subi	r24, 0x47	; 71
     920:	9f 4f       	sbci	r25, 0xFF	; 255
     922:	7c 01       	movw	r14, r24
     924:	8e 01       	movw	r16, r28
     926:	0f 54       	subi	r16, 0x4F	; 79
     928:	1f 4f       	sbci	r17, 0xFF	; 255
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	a2 01       	movw	r20, r4
     930:	be 01       	movw	r22, r28
     932:	6f 52       	subi	r22, 0x2F	; 47
     934:	7f 4f       	sbci	r23, 0xFF	; 255
     936:	88 5b       	subi	r24, 0xB8	; 184
     938:	91 09       	sbc	r25, r1
     93a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <visualizar_turno>
			
			// TURNO ESQUINA 2
			visualizar_turno(PORT,ESQUINA2,orden_juego,1,UNO,DOS,TRES,CUATRO);
     93e:	21 e0       	ldi	r18, 0x01	; 1
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	a2 01       	movw	r20, r4
     944:	be 01       	movw	r22, r28
     946:	6f 51       	subi	r22, 0x1F	; 31
     948:	7f 4f       	sbci	r23, 0xFF	; 255
     94a:	ce 01       	movw	r24, r28
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <visualizar_turno>
			
			// TURNO ESQUINA 3
			visualizar_turno(PORT,ESQUINA3,orden_juego,2,UNO,DOS,TRES,CUATRO);
     952:	c5 01       	movw	r24, r10
     954:	22 e0       	ldi	r18, 0x02	; 2
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	a2 01       	movw	r20, r4
     95a:	be 01       	movw	r22, r28
     95c:	6f 50       	subi	r22, 0x0F	; 15
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	88 5c       	subi	r24, 0xC8	; 200
     962:	91 09       	sbc	r25, r1
     964:	0e 94 61 02 	call	0x4c2	; 0x4c2 <visualizar_turno>
			
			// TURNO ESQUINA 4
			visualizar_turno(PORT,ESQUINA4,orden_juego,3,UNO,DOS,TRES,CUATRO);
     968:	c6 01       	movw	r24, r12
     96a:	23 e0       	ldi	r18, 0x03	; 3
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	a2 01       	movw	r20, r4
     970:	be 01       	movw	r22, r28
     972:	6f 5f       	subi	r22, 0xFF	; 255
     974:	7e 4f       	sbci	r23, 0xFE	; 254
     976:	80 5c       	subi	r24, 0xC0	; 192
     978:	91 09       	sbc	r25, r1
     97a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <visualizar_turno>
     97e:	bf ef       	ldi	r27, 0xFF	; 255
     980:	e1 ee       	ldi	r30, 0xE1	; 225
     982:	f4 e0       	ldi	r31, 0x04	; 4
     984:	b1 50       	subi	r27, 0x01	; 1
     986:	e0 40       	sbci	r30, 0x00	; 0
     988:	f0 40       	sbci	r31, 0x00	; 0
     98a:	e1 f7       	brne	.-8      	; 0x984 <__stack+0x85>
     98c:	00 c0       	rjmp	.+0      	; 0x98e <__stack+0x8f>
     98e:	00 00       	nop
			
			_delay_ms(200);
			
			char orden_indice [4] = {0,0,0,0};
     990:	c7 59       	subi	r28, 0x97	; 151
     992:	de 4f       	sbci	r29, 0xFE	; 254
     994:	18 82       	st	Y, r1
     996:	19 82       	std	Y+1, r1	; 0x01
     998:	1a 82       	std	Y+2, r1	; 0x02
     99a:	1b 82       	std	Y+3, r1	; 0x03
     99c:	c9 56       	subi	r28, 0x69	; 105
     99e:	d1 40       	sbci	r29, 0x01	; 1
			int bandera = 0;
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	70 e0       	ldi	r23, 0x00	; 0
			while (bandera < 4){
     9a4:	21 c0       	rjmp	.+66     	; 0x9e8 <__stack+0xe9>
				for (int i = 0; i<4; i++) {
					int jugador_actual = orden_juego[i];
     9a6:	fc 01       	movw	r30, r24
     9a8:	ee 0f       	add	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	29 e5       	ldi	r18, 0x59	; 89
     9ae:	31 e0       	ldi	r19, 0x01	; 1
     9b0:	2c 0f       	add	r18, r28
     9b2:	3d 1f       	adc	r19, r29
     9b4:	e2 0f       	add	r30, r18
     9b6:	f3 1f       	adc	r31, r19
     9b8:	40 81       	ld	r20, Z
     9ba:	51 81       	ldd	r21, Z+1	; 0x01
					if (jugador_actual == bandera+1){
     9bc:	9b 01       	movw	r18, r22
     9be:	2f 5f       	subi	r18, 0xFF	; 255
     9c0:	3f 4f       	sbci	r19, 0xFF	; 255
     9c2:	42 17       	cp	r20, r18
     9c4:	53 07       	cpc	r21, r19
     9c6:	49 f4       	brne	.+18     	; 0x9da <__stack+0xdb>
						orden_indice[bandera] = i;
     9c8:	e9 e6       	ldi	r30, 0x69	; 105
     9ca:	f1 e0       	ldi	r31, 0x01	; 1
     9cc:	ec 0f       	add	r30, r28
     9ce:	fd 1f       	adc	r31, r29
     9d0:	e6 0f       	add	r30, r22
     9d2:	f7 1f       	adc	r31, r23
     9d4:	80 83       	st	Z, r24
						bandera += 1;
     9d6:	b9 01       	movw	r22, r18
						break;
     9d8:	07 c0       	rjmp	.+14     	; 0x9e8 <__stack+0xe9>
			_delay_ms(200);
			
			char orden_indice [4] = {0,0,0,0};
			int bandera = 0;
			while (bandera < 4){
				for (int i = 0; i<4; i++) {
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <__stack+0xe3>
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	84 30       	cpi	r24, 0x04	; 4
     9e4:	91 05       	cpc	r25, r1
     9e6:	fc f2       	brlt	.-66     	; 0x9a6 <__stack+0xa7>
			
			_delay_ms(200);
			
			char orden_indice [4] = {0,0,0,0};
			int bandera = 0;
			while (bandera < 4){
     9e8:	64 30       	cpi	r22, 0x04	; 4
     9ea:	71 05       	cpc	r23, r1
     9ec:	c4 f3       	brlt	.-16     	; 0x9de <__stack+0xdf>
     9ee:	66 24       	eor	r6, r6
     9f0:	6a 94       	dec	r6
     9f2:	77 24       	eor	r7, r7
     9f4:	7a 94       	dec	r7
     9f6:	0f 2e       	mov	r0, r31
     9f8:	f7 e0       	ldi	r31, 0x07	; 7
     9fa:	af 2e       	mov	r10, r31
     9fc:	b1 2c       	mov	r11, r1
     9fe:	f0 2d       	mov	r31, r0
     a00:	0f 2e       	mov	r0, r31
     a02:	f7 e0       	ldi	r31, 0x07	; 7
     a04:	cf 2e       	mov	r12, r31
     a06:	d1 2c       	mov	r13, r1
     a08:	f0 2d       	mov	r31, r0
     a0a:	e1 2c       	mov	r14, r1
     a0c:	f1 2c       	mov	r15, r1
     a0e:	e7 c0       	rjmp	.+462    	; 0xbde <__stack+0x2df>
			int avance_izquierda = 7;
			int resultado = 255;
			int resultado_derecha = 255;
			int resultado_izquierda = 255;
			while (bandera < 1){
				int indice = orden_indice[bandera];
     a10:	e9 e6       	ldi	r30, 0x69	; 105
     a12:	f1 e0       	ldi	r31, 0x01	; 1
     a14:	ec 0f       	add	r30, r28
     a16:	fd 1f       	adc	r31, r29
     a18:	ee 0d       	add	r30, r14
     a1a:	ff 1d       	adc	r31, r15
     a1c:	80 81       	ld	r24, Z
				switch(indice){
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	01 f1       	breq	.+64     	; 0xa62 <__stack+0x163>
     a22:	78 f0       	brcs	.+30     	; 0xa42 <__stack+0x143>
     a24:	82 30       	cpi	r24, 0x02	; 2
     a26:	69 f1       	breq	.+90     	; 0xa82 <__stack+0x183>
     a28:	83 30       	cpi	r24, 0x03	; 3
     a2a:	89 f1       	breq	.+98     	; 0xa8e <__stack+0x18f>
     a2c:	d5 c0       	rjmp	.+426    	; 0xbd8 <__stack+0x2d9>
					case 0:
						for (int i=0; i<20; i++){
							numero(PORT,UNO);
     a2e:	be 01       	movw	r22, r28
     a30:	6f 54       	subi	r22, 0x4F	; 79
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 36 01 	call	0x26c	; 0x26c <numero>
			int resultado_izquierda = 255;
			while (bandera < 1){
				int indice = orden_indice[bandera];
				switch(indice){
					case 0:
						for (int i=0; i<20; i++){
     a3c:	0f 5f       	subi	r16, 0xFF	; 255
     a3e:	1f 4f       	sbci	r17, 0xFF	; 255
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <__stack+0x147>
			int resultado = 255;
			int resultado_derecha = 255;
			int resultado_izquierda = 255;
			while (bandera < 1){
				int indice = orden_indice[bandera];
				switch(indice){
     a42:	00 e0       	ldi	r16, 0x00	; 0
     a44:	10 e0       	ldi	r17, 0x00	; 0
					case 0:
						for (int i=0; i<20; i++){
     a46:	04 31       	cpi	r16, 0x14	; 20
     a48:	11 05       	cpc	r17, r1
     a4a:	8c f3       	brlt	.-30     	; 0xa2e <__stack+0x12f>
     a4c:	c5 c0       	rjmp	.+394    	; 0xbd8 <__stack+0x2d9>
							numero(PORT,UNO);
						}
						break;
					case 1:
						for (int i=0; i<20; i++){
							numero(PORT,DOS);
     a4e:	be 01       	movw	r22, r28
     a50:	67 54       	subi	r22, 0x47	; 71
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
     a54:	ce 01       	movw	r24, r28
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	0e 94 36 01 	call	0x26c	; 0x26c <numero>
						for (int i=0; i<20; i++){
							numero(PORT,UNO);
						}
						break;
					case 1:
						for (int i=0; i<20; i++){
     a5c:	0f 5f       	subi	r16, 0xFF	; 255
     a5e:	1f 4f       	sbci	r17, 0xFF	; 255
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <__stack+0x167>
			int resultado = 255;
			int resultado_derecha = 255;
			int resultado_izquierda = 255;
			while (bandera < 1){
				int indice = orden_indice[bandera];
				switch(indice){
     a62:	00 e0       	ldi	r16, 0x00	; 0
     a64:	10 e0       	ldi	r17, 0x00	; 0
						for (int i=0; i<20; i++){
							numero(PORT,UNO);
						}
						break;
					case 1:
						for (int i=0; i<20; i++){
     a66:	04 31       	cpi	r16, 0x14	; 20
     a68:	11 05       	cpc	r17, r1
     a6a:	8c f3       	brlt	.-30     	; 0xa4e <__stack+0x14f>
     a6c:	b5 c0       	rjmp	.+362    	; 0xbd8 <__stack+0x2d9>
							numero(PORT,DOS);
						}
						break;
					case 2:
						for (int i=0; i<20; i++){
							numero(PORT,TRES);
     a6e:	be 01       	movw	r22, r28
     a70:	6f 53       	subi	r22, 0x3F	; 63
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	0e 94 36 01 	call	0x26c	; 0x26c <numero>
						for (int i=0; i<20; i++){
							numero(PORT,DOS);
						}
						break;
					case 2:
						for (int i=0; i<20; i++){
     a7c:	0f 5f       	subi	r16, 0xFF	; 255
     a7e:	1f 4f       	sbci	r17, 0xFF	; 255
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <__stack+0x187>
			int resultado = 255;
			int resultado_derecha = 255;
			int resultado_izquierda = 255;
			while (bandera < 1){
				int indice = orden_indice[bandera];
				switch(indice){
     a82:	00 e0       	ldi	r16, 0x00	; 0
     a84:	10 e0       	ldi	r17, 0x00	; 0
						for (int i=0; i<20; i++){
							numero(PORT,DOS);
						}
						break;
					case 2:
						for (int i=0; i<20; i++){
     a86:	04 31       	cpi	r16, 0x14	; 20
     a88:	11 05       	cpc	r17, r1
     a8a:	8c f3       	brlt	.-30     	; 0xa6e <__stack+0x16f>
     a8c:	a5 c0       	rjmp	.+330    	; 0xbd8 <__stack+0x2d9>
							numero(PORT,TRES);
						}
						break;
					case 3:
						PISO[0] = 129;
     a8e:	81 e8       	ldi	r24, 0x81	; 129
     a90:	cf 5e       	subi	r28, 0xEF	; 239
     a92:	de 4f       	sbci	r29, 0xFE	; 254
     a94:	88 83       	st	Y, r24
     a96:	c1 51       	subi	r28, 0x11	; 17
     a98:	d1 40       	sbci	r29, 0x01	; 1
						PISO[3] = resultado;
     a9a:	8f ef       	ldi	r24, 0xFF	; 255
     a9c:	cc 5e       	subi	r28, 0xEC	; 236
     a9e:	de 4f       	sbci	r29, 0xFE	; 254
     aa0:	88 83       	st	Y, r24
     aa2:	c4 51       	subi	r28, 0x14	; 20
     aa4:	d1 40       	sbci	r29, 0x01	; 1
						PISO[4] = resultado;
     aa6:	cb 5e       	subi	r28, 0xEB	; 235
     aa8:	de 4f       	sbci	r29, 0xFE	; 254
     aaa:	88 83       	st	Y, r24
     aac:	c5 51       	subi	r28, 0x15	; 21
     aae:	d1 40       	sbci	r29, 0x01	; 1
						PISO[7] = UBICACION_INFERIOR[0];
     ab0:	c8 5e       	subi	r28, 0xE8	; 232
     ab2:	de 4f       	sbci	r29, 0xFE	; 254
     ab4:	38 82       	st	Y, r3
     ab6:	c8 51       	subi	r28, 0x18	; 24
     ab8:	d1 40       	sbci	r29, 0x01	; 1
						while (entrada && avance_derecha>=0 && avance_izquierda>=0) {
     aba:	89 c0       	rjmp	.+274    	; 0xbce <__stack+0x2cf>
							//129,0,0,255,255,0,0,129
							piso(PORT,PISO);
     abc:	be 01       	movw	r22, r28
     abe:	6f 5e       	subi	r22, 0xEF	; 239
     ac0:	7e 4f       	sbci	r23, 0xFE	; 254
     ac2:	ce 01       	movw	r24, r28
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	0e 94 b6 02 	call	0x56c	; 0x56c <piso>
							//129,0,0,255,255,0,0,1
							PISO[7] = UBICACION_INFERIOR[1];
     aca:	c8 5e       	subi	r28, 0xE8	; 232
     acc:	de 4f       	sbci	r29, 0xFE	; 254
     ace:	28 82       	st	Y, r2
     ad0:	c8 51       	subi	r28, 0x18	; 24
     ad2:	d1 40       	sbci	r29, 0x01	; 1
							PISO[3] = resultado;
     ad4:	8f ef       	ldi	r24, 0xFF	; 255
     ad6:	cc 5e       	subi	r28, 0xEC	; 236
     ad8:	de 4f       	sbci	r29, 0xFE	; 254
     ada:	88 83       	st	Y, r24
     adc:	c4 51       	subi	r28, 0x14	; 20
     ade:	d1 40       	sbci	r29, 0x01	; 1
							PISO[4] = resultado;
     ae0:	cb 5e       	subi	r28, 0xEB	; 235
     ae2:	de 4f       	sbci	r29, 0xFE	; 254
     ae4:	88 83       	st	Y, r24
     ae6:	c5 51       	subi	r28, 0x15	; 21
     ae8:	d1 40       	sbci	r29, 0x01	; 1
							//81,0,0,255,255,0,0,1
							piso(PORT,PISO);
     aea:	be 01       	movw	r22, r28
     aec:	6f 5e       	subi	r22, 0xEF	; 239
     aee:	7e 4f       	sbci	r23, 0xFE	; 254
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 b6 02 	call	0x56c	; 0x56c <piso>
							//129,0,0,255,127,0,0,129
							PISO[7] = UBICACION_INFERIOR[0];
     af8:	c8 5e       	subi	r28, 0xE8	; 232
     afa:	de 4f       	sbci	r29, 0xFE	; 254
     afc:	38 82       	st	Y, r3
     afe:	c8 51       	subi	r28, 0x18	; 24
     b00:	d1 40       	sbci	r29, 0x01	; 1
							PISO[3] = resultado_izquierda;
     b02:	cc 5e       	subi	r28, 0xEC	; 236
     b04:	de 4f       	sbci	r29, 0xFE	; 254
     b06:	68 82       	st	Y, r6
     b08:	c4 51       	subi	r28, 0x14	; 20
     b0a:	d1 40       	sbci	r29, 0x01	; 1
							PISO[4] = resultado_derecha;
     b0c:	cb 5e       	subi	r28, 0xEB	; 235
     b0e:	de 4f       	sbci	r29, 0xFE	; 254
     b10:	78 82       	st	Y, r7
     b12:	c5 51       	subi	r28, 0x15	; 21
     b14:	d1 40       	sbci	r29, 0x01	; 1
							// SI PRESIONA PARA LA DERECHA
							if (PINC == 0x42) {
     b16:	86 b1       	in	r24, 0x06	; 6
     b18:	82 34       	cpi	r24, 0x42	; 66
     b1a:	59 f5       	brne	.+86     	; 0xb72 <__stack+0x273>
								// SONIDO DEL CLICK
								PORTC = ((1<<4));
     b1c:	80 e1       	ldi	r24, 0x10	; 16
     b1e:	88 b9       	out	0x08, r24	; 8
     b20:	83 ef       	ldi	r24, 0xF3	; 243
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <__stack+0x225>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <__stack+0x22b>
     b2a:	00 00       	nop
								_delay_ms(0.25);
								PORTC = ((0<<4));
     b2c:	18 b8       	out	0x08, r1	; 8
								resultado_derecha = (pow(2,8)-1) - (pow(2,avance_derecha));
     b2e:	b6 01       	movw	r22, r12
     b30:	0d 2c       	mov	r0, r13
     b32:	00 0c       	add	r0, r0
     b34:	88 0b       	sbc	r24, r24
     b36:	99 0b       	sbc	r25, r25
     b38:	0e 94 a2 06 	call	0xd44	; 0xd44 <__floatsisf>
     b3c:	9b 01       	movw	r18, r22
     b3e:	ac 01       	movw	r20, r24
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e4       	ldi	r25, 0x40	; 64
     b48:	0e 94 2e 07 	call	0xe5c	; 0xe5c <pow>
     b4c:	9b 01       	movw	r18, r22
     b4e:	ac 01       	movw	r20, r24
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	8f e7       	ldi	r24, 0x7F	; 127
     b56:	93 e4       	ldi	r25, 0x43	; 67
     b58:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__subsf3>
     b5c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__fixsfsi>
     b60:	76 2e       	mov	r7, r22
								PISO[4] = resultado_derecha;
     b62:	cb 5e       	subi	r28, 0xEB	; 235
     b64:	de 4f       	sbci	r29, 0xFE	; 254
     b66:	68 83       	st	Y, r22
     b68:	c5 51       	subi	r28, 0x15	; 21
     b6a:	d1 40       	sbci	r29, 0x01	; 1
								avance_derecha -= 1;
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	c9 1a       	sub	r12, r25
     b70:	d1 08       	sbc	r13, r1
							}
							if (PINC == 0x44) {
     b72:	86 b1       	in	r24, 0x06	; 6
     b74:	84 34       	cpi	r24, 0x44	; 68
     b76:	59 f5       	brne	.+86     	; 0xbce <__stack+0x2cf>
								// SONIDO DEL CLICK
								PORTC = ((1<<4));
     b78:	80 e1       	ldi	r24, 0x10	; 16
     b7a:	88 b9       	out	0x08, r24	; 8
     b7c:	a3 ef       	ldi	r26, 0xF3	; 243
     b7e:	b1 e0       	ldi	r27, 0x01	; 1
     b80:	11 97       	sbiw	r26, 0x01	; 1
     b82:	f1 f7       	brne	.-4      	; 0xb80 <__stack+0x281>
     b84:	00 c0       	rjmp	.+0      	; 0xb86 <__stack+0x287>
     b86:	00 00       	nop
								_delay_ms(0.25);
								PORTC = ((0<<4));
     b88:	18 b8       	out	0x08, r1	; 8
								resultado_izquierda = (pow(2,8)-1) - (pow(2,avance_izquierda));
     b8a:	b5 01       	movw	r22, r10
     b8c:	0b 2c       	mov	r0, r11
     b8e:	00 0c       	add	r0, r0
     b90:	88 0b       	sbc	r24, r24
     b92:	99 0b       	sbc	r25, r25
     b94:	0e 94 a2 06 	call	0xd44	; 0xd44 <__floatsisf>
     b98:	9b 01       	movw	r18, r22
     b9a:	ac 01       	movw	r20, r24
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e4       	ldi	r25, 0x40	; 64
     ba4:	0e 94 2e 07 	call	0xe5c	; 0xe5c <pow>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	8f e7       	ldi	r24, 0x7F	; 127
     bb2:	93 e4       	ldi	r25, 0x43	; 67
     bb4:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__subsf3>
     bb8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__fixsfsi>
     bbc:	66 2e       	mov	r6, r22
								PISO[4] = resultado_izquierda;
     bbe:	cb 5e       	subi	r28, 0xEB	; 235
     bc0:	de 4f       	sbci	r29, 0xFE	; 254
     bc2:	68 83       	st	Y, r22
     bc4:	c5 51       	subi	r28, 0x15	; 21
     bc6:	d1 40       	sbci	r29, 0x01	; 1
								avance_izquierda -= 1;
     bc8:	b1 e0       	ldi	r27, 0x01	; 1
     bca:	ab 1a       	sub	r10, r27
     bcc:	b1 08       	sbc	r11, r1
					case 3:
						PISO[0] = 129;
						PISO[3] = resultado;
						PISO[4] = resultado;
						PISO[7] = UBICACION_INFERIOR[0];
						while (entrada && avance_derecha>=0 && avance_izquierda>=0) {
     bce:	dd 20       	and	r13, r13
     bd0:	1c f0       	brlt	.+6      	; 0xbd8 <__stack+0x2d9>
     bd2:	bb 20       	and	r11, r11
     bd4:	0c f0       	brlt	.+2      	; 0xbd8 <__stack+0x2d9>
     bd6:	72 cf       	rjmp	.-284    	; 0xabc <__stack+0x1bd>
								avance_izquierda -= 1;
							}	
						}
						break;
				}
				bandera += 1;
     bd8:	ef ef       	ldi	r30, 0xFF	; 255
     bda:	ee 1a       	sub	r14, r30
     bdc:	fe 0a       	sbc	r15, r30
			int avance_derecha = 7;
			int avance_izquierda = 7;
			int resultado = 255;
			int resultado_derecha = 255;
			int resultado_izquierda = 255;
			while (bandera < 1){
     bde:	1e 14       	cp	r1, r14
     be0:	1f 04       	cpc	r1, r15
     be2:	0c f0       	brlt	.+2      	; 0xbe6 <__stack+0x2e7>
     be4:	15 cf       	rjmp	.-470    	; 0xa10 <__stack+0x111>
				}
				bandera += 1;
			}
		}
		
		ganaste(PORT,GANASTE);
     be6:	be 01       	movw	r22, r28
     be8:	67 5e       	subi	r22, 0xE7	; 231
     bea:	7e 4f       	sbci	r23, 0xFE	; 254
     bec:	ce 01       	movw	r24, r28
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <ganaste>
				jugadores = 3;
				break;
			}
		}
		// SE VUELVE AL VALOR3 = 0 PARA NO ENTRAR A LA SELECCION NUEVAMENTE
		valor3 = 0;
     bf4:	00 e0       	ldi	r16, 0x00	; 0
     bf6:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		
		ganaste(PORT,GANASTE);
		
	}
     bf8:	d0 cd       	rjmp	.-1120   	; 0x79a <main+0x1b2>

00000bfa <__subsf3>:
     bfa:	50 58       	subi	r21, 0x80	; 128

00000bfc <__addsf3>:
     bfc:	bb 27       	eor	r27, r27
     bfe:	aa 27       	eor	r26, r26
     c00:	0e 94 15 06 	call	0xc2a	; 0xc2a <__addsf3x>
     c04:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_round>
     c08:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fp_pscA>
     c0c:	38 f0       	brcs	.+14     	; 0xc1c <__addsf3+0x20>
     c0e:	0e 94 ed 06 	call	0xdda	; 0xdda <__fp_pscB>
     c12:	20 f0       	brcs	.+8      	; 0xc1c <__addsf3+0x20>
     c14:	39 f4       	brne	.+14     	; 0xc24 <__addsf3+0x28>
     c16:	9f 3f       	cpi	r25, 0xFF	; 255
     c18:	19 f4       	brne	.+6      	; 0xc20 <__addsf3+0x24>
     c1a:	26 f4       	brtc	.+8      	; 0xc24 <__addsf3+0x28>
     c1c:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_nan>
     c20:	0e f4       	brtc	.+2      	; 0xc24 <__addsf3+0x28>
     c22:	e0 95       	com	r30
     c24:	e7 fb       	bst	r30, 7
     c26:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_inf>

00000c2a <__addsf3x>:
     c2a:	e9 2f       	mov	r30, r25
     c2c:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fp_split3>
     c30:	58 f3       	brcs	.-42     	; 0xc08 <__addsf3+0xc>
     c32:	ba 17       	cp	r27, r26
     c34:	62 07       	cpc	r22, r18
     c36:	73 07       	cpc	r23, r19
     c38:	84 07       	cpc	r24, r20
     c3a:	95 07       	cpc	r25, r21
     c3c:	20 f0       	brcs	.+8      	; 0xc46 <__addsf3x+0x1c>
     c3e:	79 f4       	brne	.+30     	; 0xc5e <__addsf3x+0x34>
     c40:	a6 f5       	brtc	.+104    	; 0xcaa <__addsf3x+0x80>
     c42:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_zero>
     c46:	0e f4       	brtc	.+2      	; 0xc4a <__addsf3x+0x20>
     c48:	e0 95       	com	r30
     c4a:	0b 2e       	mov	r0, r27
     c4c:	ba 2f       	mov	r27, r26
     c4e:	a0 2d       	mov	r26, r0
     c50:	0b 01       	movw	r0, r22
     c52:	b9 01       	movw	r22, r18
     c54:	90 01       	movw	r18, r0
     c56:	0c 01       	movw	r0, r24
     c58:	ca 01       	movw	r24, r20
     c5a:	a0 01       	movw	r20, r0
     c5c:	11 24       	eor	r1, r1
     c5e:	ff 27       	eor	r31, r31
     c60:	59 1b       	sub	r21, r25
     c62:	99 f0       	breq	.+38     	; 0xc8a <__addsf3x+0x60>
     c64:	59 3f       	cpi	r21, 0xF9	; 249
     c66:	50 f4       	brcc	.+20     	; 0xc7c <__addsf3x+0x52>
     c68:	50 3e       	cpi	r21, 0xE0	; 224
     c6a:	68 f1       	brcs	.+90     	; 0xcc6 <__addsf3x+0x9c>
     c6c:	1a 16       	cp	r1, r26
     c6e:	f0 40       	sbci	r31, 0x00	; 0
     c70:	a2 2f       	mov	r26, r18
     c72:	23 2f       	mov	r18, r19
     c74:	34 2f       	mov	r19, r20
     c76:	44 27       	eor	r20, r20
     c78:	58 5f       	subi	r21, 0xF8	; 248
     c7a:	f3 cf       	rjmp	.-26     	; 0xc62 <__addsf3x+0x38>
     c7c:	46 95       	lsr	r20
     c7e:	37 95       	ror	r19
     c80:	27 95       	ror	r18
     c82:	a7 95       	ror	r26
     c84:	f0 40       	sbci	r31, 0x00	; 0
     c86:	53 95       	inc	r21
     c88:	c9 f7       	brne	.-14     	; 0xc7c <__addsf3x+0x52>
     c8a:	7e f4       	brtc	.+30     	; 0xcaa <__addsf3x+0x80>
     c8c:	1f 16       	cp	r1, r31
     c8e:	ba 0b       	sbc	r27, r26
     c90:	62 0b       	sbc	r22, r18
     c92:	73 0b       	sbc	r23, r19
     c94:	84 0b       	sbc	r24, r20
     c96:	ba f0       	brmi	.+46     	; 0xcc6 <__addsf3x+0x9c>
     c98:	91 50       	subi	r25, 0x01	; 1
     c9a:	a1 f0       	breq	.+40     	; 0xcc4 <__addsf3x+0x9a>
     c9c:	ff 0f       	add	r31, r31
     c9e:	bb 1f       	adc	r27, r27
     ca0:	66 1f       	adc	r22, r22
     ca2:	77 1f       	adc	r23, r23
     ca4:	88 1f       	adc	r24, r24
     ca6:	c2 f7       	brpl	.-16     	; 0xc98 <__addsf3x+0x6e>
     ca8:	0e c0       	rjmp	.+28     	; 0xcc6 <__addsf3x+0x9c>
     caa:	ba 0f       	add	r27, r26
     cac:	62 1f       	adc	r22, r18
     cae:	73 1f       	adc	r23, r19
     cb0:	84 1f       	adc	r24, r20
     cb2:	48 f4       	brcc	.+18     	; 0xcc6 <__addsf3x+0x9c>
     cb4:	87 95       	ror	r24
     cb6:	77 95       	ror	r23
     cb8:	67 95       	ror	r22
     cba:	b7 95       	ror	r27
     cbc:	f7 95       	ror	r31
     cbe:	9e 3f       	cpi	r25, 0xFE	; 254
     cc0:	08 f0       	brcs	.+2      	; 0xcc4 <__addsf3x+0x9a>
     cc2:	b0 cf       	rjmp	.-160    	; 0xc24 <__addsf3+0x28>
     cc4:	93 95       	inc	r25
     cc6:	88 0f       	add	r24, r24
     cc8:	08 f0       	brcs	.+2      	; 0xccc <__addsf3x+0xa2>
     cca:	99 27       	eor	r25, r25
     ccc:	ee 0f       	add	r30, r30
     cce:	97 95       	ror	r25
     cd0:	87 95       	ror	r24
     cd2:	08 95       	ret

00000cd4 <__fixsfsi>:
     cd4:	0e 94 71 06 	call	0xce2	; 0xce2 <__fixunssfsi>
     cd8:	68 94       	set
     cda:	b1 11       	cpse	r27, r1
     cdc:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_szero>
     ce0:	08 95       	ret

00000ce2 <__fixunssfsi>:
     ce2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_splitA>
     ce6:	88 f0       	brcs	.+34     	; 0xd0a <__fixunssfsi+0x28>
     ce8:	9f 57       	subi	r25, 0x7F	; 127
     cea:	98 f0       	brcs	.+38     	; 0xd12 <__fixunssfsi+0x30>
     cec:	b9 2f       	mov	r27, r25
     cee:	99 27       	eor	r25, r25
     cf0:	b7 51       	subi	r27, 0x17	; 23
     cf2:	b0 f0       	brcs	.+44     	; 0xd20 <__fixunssfsi+0x3e>
     cf4:	e1 f0       	breq	.+56     	; 0xd2e <__fixunssfsi+0x4c>
     cf6:	66 0f       	add	r22, r22
     cf8:	77 1f       	adc	r23, r23
     cfa:	88 1f       	adc	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	1a f0       	brmi	.+6      	; 0xd06 <__fixunssfsi+0x24>
     d00:	ba 95       	dec	r27
     d02:	c9 f7       	brne	.-14     	; 0xcf6 <__fixunssfsi+0x14>
     d04:	14 c0       	rjmp	.+40     	; 0xd2e <__fixunssfsi+0x4c>
     d06:	b1 30       	cpi	r27, 0x01	; 1
     d08:	91 f0       	breq	.+36     	; 0xd2e <__fixunssfsi+0x4c>
     d0a:	0e 94 27 07 	call	0xe4e	; 0xe4e <__fp_zero>
     d0e:	b1 e0       	ldi	r27, 0x01	; 1
     d10:	08 95       	ret
     d12:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_zero>
     d16:	67 2f       	mov	r22, r23
     d18:	78 2f       	mov	r23, r24
     d1a:	88 27       	eor	r24, r24
     d1c:	b8 5f       	subi	r27, 0xF8	; 248
     d1e:	39 f0       	breq	.+14     	; 0xd2e <__fixunssfsi+0x4c>
     d20:	b9 3f       	cpi	r27, 0xF9	; 249
     d22:	cc f3       	brlt	.-14     	; 0xd16 <__fixunssfsi+0x34>
     d24:	86 95       	lsr	r24
     d26:	77 95       	ror	r23
     d28:	67 95       	ror	r22
     d2a:	b3 95       	inc	r27
     d2c:	d9 f7       	brne	.-10     	; 0xd24 <__fixunssfsi+0x42>
     d2e:	3e f4       	brtc	.+14     	; 0xd3e <__fixunssfsi+0x5c>
     d30:	90 95       	com	r25
     d32:	80 95       	com	r24
     d34:	70 95       	com	r23
     d36:	61 95       	neg	r22
     d38:	7f 4f       	sbci	r23, 0xFF	; 255
     d3a:	8f 4f       	sbci	r24, 0xFF	; 255
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	08 95       	ret

00000d40 <__floatunsisf>:
     d40:	e8 94       	clt
     d42:	09 c0       	rjmp	.+18     	; 0xd56 <__floatsisf+0x12>

00000d44 <__floatsisf>:
     d44:	97 fb       	bst	r25, 7
     d46:	3e f4       	brtc	.+14     	; 0xd56 <__floatsisf+0x12>
     d48:	90 95       	com	r25
     d4a:	80 95       	com	r24
     d4c:	70 95       	com	r23
     d4e:	61 95       	neg	r22
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	8f 4f       	sbci	r24, 0xFF	; 255
     d54:	9f 4f       	sbci	r25, 0xFF	; 255
     d56:	99 23       	and	r25, r25
     d58:	a9 f0       	breq	.+42     	; 0xd84 <__floatsisf+0x40>
     d5a:	f9 2f       	mov	r31, r25
     d5c:	96 e9       	ldi	r25, 0x96	; 150
     d5e:	bb 27       	eor	r27, r27
     d60:	93 95       	inc	r25
     d62:	f6 95       	lsr	r31
     d64:	87 95       	ror	r24
     d66:	77 95       	ror	r23
     d68:	67 95       	ror	r22
     d6a:	b7 95       	ror	r27
     d6c:	f1 11       	cpse	r31, r1
     d6e:	f8 cf       	rjmp	.-16     	; 0xd60 <__floatsisf+0x1c>
     d70:	fa f4       	brpl	.+62     	; 0xdb0 <__floatsisf+0x6c>
     d72:	bb 0f       	add	r27, r27
     d74:	11 f4       	brne	.+4      	; 0xd7a <__floatsisf+0x36>
     d76:	60 ff       	sbrs	r22, 0
     d78:	1b c0       	rjmp	.+54     	; 0xdb0 <__floatsisf+0x6c>
     d7a:	6f 5f       	subi	r22, 0xFF	; 255
     d7c:	7f 4f       	sbci	r23, 0xFF	; 255
     d7e:	8f 4f       	sbci	r24, 0xFF	; 255
     d80:	9f 4f       	sbci	r25, 0xFF	; 255
     d82:	16 c0       	rjmp	.+44     	; 0xdb0 <__floatsisf+0x6c>
     d84:	88 23       	and	r24, r24
     d86:	11 f0       	breq	.+4      	; 0xd8c <__floatsisf+0x48>
     d88:	96 e9       	ldi	r25, 0x96	; 150
     d8a:	11 c0       	rjmp	.+34     	; 0xdae <__floatsisf+0x6a>
     d8c:	77 23       	and	r23, r23
     d8e:	21 f0       	breq	.+8      	; 0xd98 <__floatsisf+0x54>
     d90:	9e e8       	ldi	r25, 0x8E	; 142
     d92:	87 2f       	mov	r24, r23
     d94:	76 2f       	mov	r23, r22
     d96:	05 c0       	rjmp	.+10     	; 0xda2 <__floatsisf+0x5e>
     d98:	66 23       	and	r22, r22
     d9a:	71 f0       	breq	.+28     	; 0xdb8 <__floatsisf+0x74>
     d9c:	96 e8       	ldi	r25, 0x86	; 134
     d9e:	86 2f       	mov	r24, r22
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	2a f0       	brmi	.+10     	; 0xdb0 <__floatsisf+0x6c>
     da6:	9a 95       	dec	r25
     da8:	66 0f       	add	r22, r22
     daa:	77 1f       	adc	r23, r23
     dac:	88 1f       	adc	r24, r24
     dae:	da f7       	brpl	.-10     	; 0xda6 <__floatsisf+0x62>
     db0:	88 0f       	add	r24, r24
     db2:	96 95       	lsr	r25
     db4:	87 95       	ror	r24
     db6:	97 f9       	bld	r25, 7
     db8:	08 95       	ret

00000dba <__fp_inf>:
     dba:	97 f9       	bld	r25, 7
     dbc:	9f 67       	ori	r25, 0x7F	; 127
     dbe:	80 e8       	ldi	r24, 0x80	; 128
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	08 95       	ret

00000dc6 <__fp_nan>:
     dc6:	9f ef       	ldi	r25, 0xFF	; 255
     dc8:	80 ec       	ldi	r24, 0xC0	; 192
     dca:	08 95       	ret

00000dcc <__fp_pscA>:
     dcc:	00 24       	eor	r0, r0
     dce:	0a 94       	dec	r0
     dd0:	16 16       	cp	r1, r22
     dd2:	17 06       	cpc	r1, r23
     dd4:	18 06       	cpc	r1, r24
     dd6:	09 06       	cpc	r0, r25
     dd8:	08 95       	ret

00000dda <__fp_pscB>:
     dda:	00 24       	eor	r0, r0
     ddc:	0a 94       	dec	r0
     dde:	12 16       	cp	r1, r18
     de0:	13 06       	cpc	r1, r19
     de2:	14 06       	cpc	r1, r20
     de4:	05 06       	cpc	r0, r21
     de6:	08 95       	ret

00000de8 <__fp_round>:
     de8:	09 2e       	mov	r0, r25
     dea:	03 94       	inc	r0
     dec:	00 0c       	add	r0, r0
     dee:	11 f4       	brne	.+4      	; 0xdf4 <__fp_round+0xc>
     df0:	88 23       	and	r24, r24
     df2:	52 f0       	brmi	.+20     	; 0xe08 <__fp_round+0x20>
     df4:	bb 0f       	add	r27, r27
     df6:	40 f4       	brcc	.+16     	; 0xe08 <__fp_round+0x20>
     df8:	bf 2b       	or	r27, r31
     dfa:	11 f4       	brne	.+4      	; 0xe00 <__fp_round+0x18>
     dfc:	60 ff       	sbrs	r22, 0
     dfe:	04 c0       	rjmp	.+8      	; 0xe08 <__fp_round+0x20>
     e00:	6f 5f       	subi	r22, 0xFF	; 255
     e02:	7f 4f       	sbci	r23, 0xFF	; 255
     e04:	8f 4f       	sbci	r24, 0xFF	; 255
     e06:	9f 4f       	sbci	r25, 0xFF	; 255
     e08:	08 95       	ret

00000e0a <__fp_split3>:
     e0a:	57 fd       	sbrc	r21, 7
     e0c:	90 58       	subi	r25, 0x80	; 128
     e0e:	44 0f       	add	r20, r20
     e10:	55 1f       	adc	r21, r21
     e12:	59 f0       	breq	.+22     	; 0xe2a <__fp_splitA+0x10>
     e14:	5f 3f       	cpi	r21, 0xFF	; 255
     e16:	71 f0       	breq	.+28     	; 0xe34 <__fp_splitA+0x1a>
     e18:	47 95       	ror	r20

00000e1a <__fp_splitA>:
     e1a:	88 0f       	add	r24, r24
     e1c:	97 fb       	bst	r25, 7
     e1e:	99 1f       	adc	r25, r25
     e20:	61 f0       	breq	.+24     	; 0xe3a <__fp_splitA+0x20>
     e22:	9f 3f       	cpi	r25, 0xFF	; 255
     e24:	79 f0       	breq	.+30     	; 0xe44 <__fp_splitA+0x2a>
     e26:	87 95       	ror	r24
     e28:	08 95       	ret
     e2a:	12 16       	cp	r1, r18
     e2c:	13 06       	cpc	r1, r19
     e2e:	14 06       	cpc	r1, r20
     e30:	55 1f       	adc	r21, r21
     e32:	f2 cf       	rjmp	.-28     	; 0xe18 <__fp_split3+0xe>
     e34:	46 95       	lsr	r20
     e36:	f1 df       	rcall	.-30     	; 0xe1a <__fp_splitA>
     e38:	08 c0       	rjmp	.+16     	; 0xe4a <__fp_splitA+0x30>
     e3a:	16 16       	cp	r1, r22
     e3c:	17 06       	cpc	r1, r23
     e3e:	18 06       	cpc	r1, r24
     e40:	99 1f       	adc	r25, r25
     e42:	f1 cf       	rjmp	.-30     	; 0xe26 <__fp_splitA+0xc>
     e44:	86 95       	lsr	r24
     e46:	71 05       	cpc	r23, r1
     e48:	61 05       	cpc	r22, r1
     e4a:	08 94       	sec
     e4c:	08 95       	ret

00000e4e <__fp_zero>:
     e4e:	e8 94       	clt

00000e50 <__fp_szero>:
     e50:	bb 27       	eor	r27, r27
     e52:	66 27       	eor	r22, r22
     e54:	77 27       	eor	r23, r23
     e56:	cb 01       	movw	r24, r22
     e58:	97 f9       	bld	r25, 7
     e5a:	08 95       	ret

00000e5c <pow>:
     e5c:	fa 01       	movw	r30, r20
     e5e:	ee 0f       	add	r30, r30
     e60:	ff 1f       	adc	r31, r31
     e62:	30 96       	adiw	r30, 0x00	; 0
     e64:	21 05       	cpc	r18, r1
     e66:	31 05       	cpc	r19, r1
     e68:	a1 f1       	breq	.+104    	; 0xed2 <pow+0x76>
     e6a:	61 15       	cp	r22, r1
     e6c:	71 05       	cpc	r23, r1
     e6e:	61 f4       	brne	.+24     	; 0xe88 <pow+0x2c>
     e70:	80 38       	cpi	r24, 0x80	; 128
     e72:	bf e3       	ldi	r27, 0x3F	; 63
     e74:	9b 07       	cpc	r25, r27
     e76:	49 f1       	breq	.+82     	; 0xeca <pow+0x6e>
     e78:	68 94       	set
     e7a:	90 38       	cpi	r25, 0x80	; 128
     e7c:	81 05       	cpc	r24, r1
     e7e:	61 f0       	breq	.+24     	; 0xe98 <pow+0x3c>
     e80:	80 38       	cpi	r24, 0x80	; 128
     e82:	bf ef       	ldi	r27, 0xFF	; 255
     e84:	9b 07       	cpc	r25, r27
     e86:	41 f0       	breq	.+16     	; 0xe98 <pow+0x3c>
     e88:	99 23       	and	r25, r25
     e8a:	4a f5       	brpl	.+82     	; 0xede <pow+0x82>
     e8c:	ff 3f       	cpi	r31, 0xFF	; 255
     e8e:	e1 05       	cpc	r30, r1
     e90:	31 05       	cpc	r19, r1
     e92:	21 05       	cpc	r18, r1
     e94:	19 f1       	breq	.+70     	; 0xedc <pow+0x80>
     e96:	e8 94       	clt
     e98:	08 94       	sec
     e9a:	e7 95       	ror	r30
     e9c:	d9 01       	movw	r26, r18
     e9e:	aa 23       	and	r26, r26
     ea0:	29 f4       	brne	.+10     	; 0xeac <pow+0x50>
     ea2:	ab 2f       	mov	r26, r27
     ea4:	be 2f       	mov	r27, r30
     ea6:	f8 5f       	subi	r31, 0xF8	; 248
     ea8:	d0 f3       	brcs	.-12     	; 0xe9e <pow+0x42>
     eaa:	10 c0       	rjmp	.+32     	; 0xecc <pow+0x70>
     eac:	ff 5f       	subi	r31, 0xFF	; 255
     eae:	70 f4       	brcc	.+28     	; 0xecc <pow+0x70>
     eb0:	a6 95       	lsr	r26
     eb2:	e0 f7       	brcc	.-8      	; 0xeac <pow+0x50>
     eb4:	f7 39       	cpi	r31, 0x97	; 151
     eb6:	50 f0       	brcs	.+20     	; 0xecc <pow+0x70>
     eb8:	19 f0       	breq	.+6      	; 0xec0 <pow+0x64>
     eba:	ff 3a       	cpi	r31, 0xAF	; 175
     ebc:	38 f4       	brcc	.+14     	; 0xecc <pow+0x70>
     ebe:	9f 77       	andi	r25, 0x7F	; 127
     ec0:	9f 93       	push	r25
     ec2:	0d d0       	rcall	.+26     	; 0xede <pow+0x82>
     ec4:	0f 90       	pop	r0
     ec6:	07 fc       	sbrc	r0, 7
     ec8:	90 58       	subi	r25, 0x80	; 128
     eca:	08 95       	ret
     ecc:	46 f0       	brts	.+16     	; 0xede <pow+0x82>
     ece:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_nan>
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	80 e8       	ldi	r24, 0x80	; 128
     ed8:	9f e3       	ldi	r25, 0x3F	; 63
     eda:	08 95       	ret
     edc:	4f e7       	ldi	r20, 0x7F	; 127
     ede:	9f 77       	andi	r25, 0x7F	; 127
     ee0:	5f 93       	push	r21
     ee2:	4f 93       	push	r20
     ee4:	3f 93       	push	r19
     ee6:	2f 93       	push	r18
     ee8:	0e 94 29 08 	call	0x1052	; 0x1052 <log>
     eec:	2f 91       	pop	r18
     eee:	3f 91       	pop	r19
     ef0:	4f 91       	pop	r20
     ef2:	5f 91       	pop	r21
     ef4:	0e 94 a5 08 	call	0x114a	; 0x114a <__mulsf3>
     ef8:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <exp>
     efc:	29 f4       	brne	.+10     	; 0xf08 <pow+0xac>
     efe:	16 f0       	brts	.+4      	; 0xf04 <pow+0xa8>
     f00:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_inf>
     f04:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_zero>
     f08:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_nan>

00000f0c <exp>:
     f0c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_splitA>
     f10:	a8 f3       	brcs	.-22     	; 0xefc <pow+0xa0>
     f12:	96 38       	cpi	r25, 0x86	; 134
     f14:	a0 f7       	brcc	.-24     	; 0xefe <pow+0xa2>
     f16:	07 f8       	bld	r0, 7
     f18:	0f 92       	push	r0
     f1a:	e8 94       	clt
     f1c:	2b e3       	ldi	r18, 0x3B	; 59
     f1e:	3a ea       	ldi	r19, 0xAA	; 170
     f20:	48 eb       	ldi	r20, 0xB8	; 184
     f22:	5f e7       	ldi	r21, 0x7F	; 127
     f24:	0e 94 bb 08 	call	0x1176	; 0x1176 <__mulsf3_pse>
     f28:	0f 92       	push	r0
     f2a:	0f 92       	push	r0
     f2c:	0f 92       	push	r0
     f2e:	4d b7       	in	r20, 0x3d	; 61
     f30:	5e b7       	in	r21, 0x3e	; 62
     f32:	0f 92       	push	r0
     f34:	0e 94 71 08 	call	0x10e2	; 0x10e2 <modf>
     f38:	e8 e6       	ldi	r30, 0x68	; 104
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_powser>
     f40:	4f 91       	pop	r20
     f42:	5f 91       	pop	r21
     f44:	ef 91       	pop	r30
     f46:	ff 91       	pop	r31
     f48:	e5 95       	asr	r30
     f4a:	ee 1f       	adc	r30, r30
     f4c:	ff 1f       	adc	r31, r31
     f4e:	49 f0       	breq	.+18     	; 0xf62 <exp+0x56>
     f50:	fe 57       	subi	r31, 0x7E	; 126
     f52:	e0 68       	ori	r30, 0x80	; 128
     f54:	44 27       	eor	r20, r20
     f56:	ee 0f       	add	r30, r30
     f58:	44 1f       	adc	r20, r20
     f5a:	fa 95       	dec	r31
     f5c:	e1 f7       	brne	.-8      	; 0xf56 <exp+0x4a>
     f5e:	41 95       	neg	r20
     f60:	55 0b       	sbc	r21, r21
     f62:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <ldexp>
     f66:	0f 90       	pop	r0
     f68:	07 fe       	sbrs	r0, 7
     f6a:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <inverse>
     f6e:	08 95       	ret

00000f70 <__fp_powser>:
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	1f 93       	push	r17
     f76:	0f 93       	push	r16
     f78:	ff 92       	push	r15
     f7a:	ef 92       	push	r14
     f7c:	df 92       	push	r13
     f7e:	7b 01       	movw	r14, r22
     f80:	8c 01       	movw	r16, r24
     f82:	68 94       	set
     f84:	06 c0       	rjmp	.+12     	; 0xf92 <__fp_powser+0x22>
     f86:	da 2e       	mov	r13, r26
     f88:	ef 01       	movw	r28, r30
     f8a:	0e 94 b8 08 	call	0x1170	; 0x1170 <__mulsf3x>
     f8e:	fe 01       	movw	r30, r28
     f90:	e8 94       	clt
     f92:	a5 91       	lpm	r26, Z+
     f94:	25 91       	lpm	r18, Z+
     f96:	35 91       	lpm	r19, Z+
     f98:	45 91       	lpm	r20, Z+
     f9a:	55 91       	lpm	r21, Z+
     f9c:	a6 f3       	brts	.-24     	; 0xf86 <__fp_powser+0x16>
     f9e:	ef 01       	movw	r28, r30
     fa0:	0e 94 15 06 	call	0xc2a	; 0xc2a <__addsf3x>
     fa4:	fe 01       	movw	r30, r28
     fa6:	97 01       	movw	r18, r14
     fa8:	a8 01       	movw	r20, r16
     faa:	da 94       	dec	r13
     fac:	69 f7       	brne	.-38     	; 0xf88 <__fp_powser+0x18>
     fae:	df 90       	pop	r13
     fb0:	ef 90       	pop	r14
     fb2:	ff 90       	pop	r15
     fb4:	0f 91       	pop	r16
     fb6:	1f 91       	pop	r17
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <inverse>:
     fbe:	9b 01       	movw	r18, r22
     fc0:	ac 01       	movw	r20, r24
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	80 e8       	ldi	r24, 0x80	; 128
     fc8:	9f e3       	ldi	r25, 0x3F	; 63
     fca:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__divsf3>
     fce:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_inf>
     fd2:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__fp_mpack>

00000fd6 <ldexp>:
     fd6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_splitA>
     fda:	d8 f3       	brcs	.-10     	; 0xfd2 <inverse+0x14>
     fdc:	99 23       	and	r25, r25
     fde:	c9 f3       	breq	.-14     	; 0xfd2 <inverse+0x14>
     fe0:	94 0f       	add	r25, r20
     fe2:	51 1d       	adc	r21, r1
     fe4:	a3 f3       	brvs	.-24     	; 0xfce <inverse+0x10>
     fe6:	91 50       	subi	r25, 0x01	; 1
     fe8:	50 40       	sbci	r21, 0x00	; 0
     fea:	94 f0       	brlt	.+36     	; 0x1010 <ldexp+0x3a>
     fec:	59 f0       	breq	.+22     	; 0x1004 <ldexp+0x2e>
     fee:	88 23       	and	r24, r24
     ff0:	32 f0       	brmi	.+12     	; 0xffe <ldexp+0x28>
     ff2:	66 0f       	add	r22, r22
     ff4:	77 1f       	adc	r23, r23
     ff6:	88 1f       	adc	r24, r24
     ff8:	91 50       	subi	r25, 0x01	; 1
     ffa:	50 40       	sbci	r21, 0x00	; 0
     ffc:	c1 f7       	brne	.-16     	; 0xfee <ldexp+0x18>
     ffe:	9e 3f       	cpi	r25, 0xFE	; 254
    1000:	51 05       	cpc	r21, r1
    1002:	2c f7       	brge	.-54     	; 0xfce <inverse+0x10>
    1004:	88 0f       	add	r24, r24
    1006:	91 1d       	adc	r25, r1
    1008:	96 95       	lsr	r25
    100a:	87 95       	ror	r24
    100c:	97 f9       	bld	r25, 7
    100e:	08 95       	ret
    1010:	5f 3f       	cpi	r21, 0xFF	; 255
    1012:	ac f0       	brlt	.+42     	; 0x103e <ldexp+0x68>
    1014:	98 3e       	cpi	r25, 0xE8	; 232
    1016:	9c f0       	brlt	.+38     	; 0x103e <ldexp+0x68>
    1018:	bb 27       	eor	r27, r27
    101a:	86 95       	lsr	r24
    101c:	77 95       	ror	r23
    101e:	67 95       	ror	r22
    1020:	b7 95       	ror	r27
    1022:	08 f4       	brcc	.+2      	; 0x1026 <ldexp+0x50>
    1024:	b1 60       	ori	r27, 0x01	; 1
    1026:	93 95       	inc	r25
    1028:	c1 f7       	brne	.-16     	; 0x101a <ldexp+0x44>
    102a:	bb 0f       	add	r27, r27
    102c:	58 f7       	brcc	.-42     	; 0x1004 <ldexp+0x2e>
    102e:	11 f4       	brne	.+4      	; 0x1034 <ldexp+0x5e>
    1030:	60 ff       	sbrs	r22, 0
    1032:	e8 cf       	rjmp	.-48     	; 0x1004 <ldexp+0x2e>
    1034:	6f 5f       	subi	r22, 0xFF	; 255
    1036:	7f 4f       	sbci	r23, 0xFF	; 255
    1038:	8f 4f       	sbci	r24, 0xFF	; 255
    103a:	9f 4f       	sbci	r25, 0xFF	; 255
    103c:	e3 cf       	rjmp	.-58     	; 0x1004 <ldexp+0x2e>
    103e:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_szero>
    1042:	16 f0       	brts	.+4      	; 0x1048 <ldexp+0x72>
    1044:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__fp_mpack>
    1048:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_nan>
    104c:	68 94       	set
    104e:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_inf>

00001052 <log>:
    1052:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_splitA>
    1056:	a8 f3       	brcs	.-22     	; 0x1042 <ldexp+0x6c>
    1058:	99 23       	and	r25, r25
    105a:	c1 f3       	breq	.-16     	; 0x104c <ldexp+0x76>
    105c:	ae f3       	brts	.-22     	; 0x1048 <ldexp+0x72>
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	1f 93       	push	r17
    1064:	0f 93       	push	r16
    1066:	ff 92       	push	r15
    1068:	c9 2f       	mov	r28, r25
    106a:	dd 27       	eor	r29, r29
    106c:	88 23       	and	r24, r24
    106e:	2a f0       	brmi	.+10     	; 0x107a <log+0x28>
    1070:	21 97       	sbiw	r28, 0x01	; 1
    1072:	66 0f       	add	r22, r22
    1074:	77 1f       	adc	r23, r23
    1076:	88 1f       	adc	r24, r24
    1078:	da f7       	brpl	.-10     	; 0x1070 <log+0x1e>
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e8       	ldi	r20, 0x80	; 128
    1080:	5f eb       	ldi	r21, 0xBF	; 191
    1082:	9f e3       	ldi	r25, 0x3F	; 63
    1084:	88 39       	cpi	r24, 0x98	; 152
    1086:	20 f0       	brcs	.+8      	; 0x1090 <log+0x3e>
    1088:	80 3e       	cpi	r24, 0xE0	; 224
    108a:	38 f0       	brcs	.+14     	; 0x109a <log+0x48>
    108c:	21 96       	adiw	r28, 0x01	; 1
    108e:	8f 77       	andi	r24, 0x7F	; 127
    1090:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__addsf3>
    1094:	e0 e9       	ldi	r30, 0x90	; 144
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <log+0x50>
    109a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__addsf3>
    109e:	ed eb       	ldi	r30, 0xBD	; 189
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_powser>
    10a6:	8b 01       	movw	r16, r22
    10a8:	be 01       	movw	r22, r28
    10aa:	ec 01       	movw	r28, r24
    10ac:	fb 2e       	mov	r15, r27
    10ae:	6f 57       	subi	r22, 0x7F	; 127
    10b0:	71 09       	sbc	r23, r1
    10b2:	75 95       	asr	r23
    10b4:	77 1f       	adc	r23, r23
    10b6:	88 0b       	sbc	r24, r24
    10b8:	99 0b       	sbc	r25, r25
    10ba:	0e 94 a2 06 	call	0xd44	; 0xd44 <__floatsisf>
    10be:	28 e1       	ldi	r18, 0x18	; 24
    10c0:	32 e7       	ldi	r19, 0x72	; 114
    10c2:	41 e3       	ldi	r20, 0x31	; 49
    10c4:	5f e3       	ldi	r21, 0x3F	; 63
    10c6:	0e 94 b8 08 	call	0x1170	; 0x1170 <__mulsf3x>
    10ca:	af 2d       	mov	r26, r15
    10cc:	98 01       	movw	r18, r16
    10ce:	ae 01       	movw	r20, r28
    10d0:	ff 90       	pop	r15
    10d2:	0f 91       	pop	r16
    10d4:	1f 91       	pop	r17
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	0e 94 15 06 	call	0xc2a	; 0xc2a <__addsf3x>
    10de:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_round>

000010e2 <modf>:
    10e2:	fa 01       	movw	r30, r20
    10e4:	dc 01       	movw	r26, r24
    10e6:	aa 0f       	add	r26, r26
    10e8:	bb 1f       	adc	r27, r27
    10ea:	9b 01       	movw	r18, r22
    10ec:	ac 01       	movw	r20, r24
    10ee:	bf 57       	subi	r27, 0x7F	; 127
    10f0:	28 f4       	brcc	.+10     	; 0x10fc <modf+0x1a>
    10f2:	22 27       	eor	r18, r18
    10f4:	33 27       	eor	r19, r19
    10f6:	44 27       	eor	r20, r20
    10f8:	50 78       	andi	r21, 0x80	; 128
    10fa:	20 c0       	rjmp	.+64     	; 0x113c <modf+0x5a>
    10fc:	b7 51       	subi	r27, 0x17	; 23
    10fe:	90 f4       	brcc	.+36     	; 0x1124 <modf+0x42>
    1100:	ab 2f       	mov	r26, r27
    1102:	00 24       	eor	r0, r0
    1104:	46 95       	lsr	r20
    1106:	37 95       	ror	r19
    1108:	27 95       	ror	r18
    110a:	01 1c       	adc	r0, r1
    110c:	a3 95       	inc	r26
    110e:	d2 f3       	brmi	.-12     	; 0x1104 <modf+0x22>
    1110:	00 20       	and	r0, r0
    1112:	71 f0       	breq	.+28     	; 0x1130 <modf+0x4e>
    1114:	22 0f       	add	r18, r18
    1116:	33 1f       	adc	r19, r19
    1118:	44 1f       	adc	r20, r20
    111a:	b3 95       	inc	r27
    111c:	da f3       	brmi	.-10     	; 0x1114 <modf+0x32>
    111e:	0e d0       	rcall	.+28     	; 0x113c <modf+0x5a>
    1120:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__subsf3>
    1124:	61 30       	cpi	r22, 0x01	; 1
    1126:	71 05       	cpc	r23, r1
    1128:	a0 e8       	ldi	r26, 0x80	; 128
    112a:	8a 07       	cpc	r24, r26
    112c:	b9 46       	sbci	r27, 0x69	; 105
    112e:	30 f4       	brcc	.+12     	; 0x113c <modf+0x5a>
    1130:	9b 01       	movw	r18, r22
    1132:	ac 01       	movw	r20, r24
    1134:	66 27       	eor	r22, r22
    1136:	77 27       	eor	r23, r23
    1138:	88 27       	eor	r24, r24
    113a:	90 78       	andi	r25, 0x80	; 128
    113c:	30 96       	adiw	r30, 0x00	; 0
    113e:	21 f0       	breq	.+8      	; 0x1148 <modf+0x66>
    1140:	20 83       	st	Z, r18
    1142:	31 83       	std	Z+1, r19	; 0x01
    1144:	42 83       	std	Z+2, r20	; 0x02
    1146:	53 83       	std	Z+3, r21	; 0x03
    1148:	08 95       	ret

0000114a <__mulsf3>:
    114a:	0e 94 b8 08 	call	0x1170	; 0x1170 <__mulsf3x>
    114e:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_round>
    1152:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fp_pscA>
    1156:	38 f0       	brcs	.+14     	; 0x1166 <__mulsf3+0x1c>
    1158:	0e 94 ed 06 	call	0xdda	; 0xdda <__fp_pscB>
    115c:	20 f0       	brcs	.+8      	; 0x1166 <__mulsf3+0x1c>
    115e:	95 23       	and	r25, r21
    1160:	11 f0       	breq	.+4      	; 0x1166 <__mulsf3+0x1c>
    1162:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_inf>
    1166:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_nan>
    116a:	11 24       	eor	r1, r1
    116c:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_szero>

00001170 <__mulsf3x>:
    1170:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fp_split3>
    1174:	70 f3       	brcs	.-36     	; 0x1152 <__mulsf3+0x8>

00001176 <__mulsf3_pse>:
    1176:	95 9f       	mul	r25, r21
    1178:	c1 f3       	breq	.-16     	; 0x116a <__mulsf3+0x20>
    117a:	95 0f       	add	r25, r21
    117c:	50 e0       	ldi	r21, 0x00	; 0
    117e:	55 1f       	adc	r21, r21
    1180:	62 9f       	mul	r22, r18
    1182:	f0 01       	movw	r30, r0
    1184:	72 9f       	mul	r23, r18
    1186:	bb 27       	eor	r27, r27
    1188:	f0 0d       	add	r31, r0
    118a:	b1 1d       	adc	r27, r1
    118c:	63 9f       	mul	r22, r19
    118e:	aa 27       	eor	r26, r26
    1190:	f0 0d       	add	r31, r0
    1192:	b1 1d       	adc	r27, r1
    1194:	aa 1f       	adc	r26, r26
    1196:	64 9f       	mul	r22, r20
    1198:	66 27       	eor	r22, r22
    119a:	b0 0d       	add	r27, r0
    119c:	a1 1d       	adc	r26, r1
    119e:	66 1f       	adc	r22, r22
    11a0:	82 9f       	mul	r24, r18
    11a2:	22 27       	eor	r18, r18
    11a4:	b0 0d       	add	r27, r0
    11a6:	a1 1d       	adc	r26, r1
    11a8:	62 1f       	adc	r22, r18
    11aa:	73 9f       	mul	r23, r19
    11ac:	b0 0d       	add	r27, r0
    11ae:	a1 1d       	adc	r26, r1
    11b0:	62 1f       	adc	r22, r18
    11b2:	83 9f       	mul	r24, r19
    11b4:	a0 0d       	add	r26, r0
    11b6:	61 1d       	adc	r22, r1
    11b8:	22 1f       	adc	r18, r18
    11ba:	74 9f       	mul	r23, r20
    11bc:	33 27       	eor	r19, r19
    11be:	a0 0d       	add	r26, r0
    11c0:	61 1d       	adc	r22, r1
    11c2:	23 1f       	adc	r18, r19
    11c4:	84 9f       	mul	r24, r20
    11c6:	60 0d       	add	r22, r0
    11c8:	21 1d       	adc	r18, r1
    11ca:	82 2f       	mov	r24, r18
    11cc:	76 2f       	mov	r23, r22
    11ce:	6a 2f       	mov	r22, r26
    11d0:	11 24       	eor	r1, r1
    11d2:	9f 57       	subi	r25, 0x7F	; 127
    11d4:	50 40       	sbci	r21, 0x00	; 0
    11d6:	9a f0       	brmi	.+38     	; 0x11fe <__mulsf3_pse+0x88>
    11d8:	f1 f0       	breq	.+60     	; 0x1216 <__mulsf3_pse+0xa0>
    11da:	88 23       	and	r24, r24
    11dc:	4a f0       	brmi	.+18     	; 0x11f0 <__mulsf3_pse+0x7a>
    11de:	ee 0f       	add	r30, r30
    11e0:	ff 1f       	adc	r31, r31
    11e2:	bb 1f       	adc	r27, r27
    11e4:	66 1f       	adc	r22, r22
    11e6:	77 1f       	adc	r23, r23
    11e8:	88 1f       	adc	r24, r24
    11ea:	91 50       	subi	r25, 0x01	; 1
    11ec:	50 40       	sbci	r21, 0x00	; 0
    11ee:	a9 f7       	brne	.-22     	; 0x11da <__mulsf3_pse+0x64>
    11f0:	9e 3f       	cpi	r25, 0xFE	; 254
    11f2:	51 05       	cpc	r21, r1
    11f4:	80 f0       	brcs	.+32     	; 0x1216 <__mulsf3_pse+0xa0>
    11f6:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_inf>
    11fa:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_szero>
    11fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1200:	e4 f3       	brlt	.-8      	; 0x11fa <__mulsf3_pse+0x84>
    1202:	98 3e       	cpi	r25, 0xE8	; 232
    1204:	d4 f3       	brlt	.-12     	; 0x11fa <__mulsf3_pse+0x84>
    1206:	86 95       	lsr	r24
    1208:	77 95       	ror	r23
    120a:	67 95       	ror	r22
    120c:	b7 95       	ror	r27
    120e:	f7 95       	ror	r31
    1210:	e7 95       	ror	r30
    1212:	9f 5f       	subi	r25, 0xFF	; 255
    1214:	c1 f7       	brne	.-16     	; 0x1206 <__mulsf3_pse+0x90>
    1216:	fe 2b       	or	r31, r30
    1218:	88 0f       	add	r24, r24
    121a:	91 1d       	adc	r25, r1
    121c:	96 95       	lsr	r25
    121e:	87 95       	ror	r24
    1220:	97 f9       	bld	r25, 7
    1222:	08 95       	ret

00001224 <__divsf3>:
    1224:	0e 94 26 09 	call	0x124c	; 0x124c <__divsf3x>
    1228:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_round>
    122c:	0e 94 ed 06 	call	0xdda	; 0xdda <__fp_pscB>
    1230:	58 f0       	brcs	.+22     	; 0x1248 <__divsf3+0x24>
    1232:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fp_pscA>
    1236:	40 f0       	brcs	.+16     	; 0x1248 <__divsf3+0x24>
    1238:	29 f4       	brne	.+10     	; 0x1244 <__divsf3+0x20>
    123a:	5f 3f       	cpi	r21, 0xFF	; 255
    123c:	29 f0       	breq	.+10     	; 0x1248 <__divsf3+0x24>
    123e:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_inf>
    1242:	51 11       	cpse	r21, r1
    1244:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_szero>
    1248:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_nan>

0000124c <__divsf3x>:
    124c:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fp_split3>
    1250:	68 f3       	brcs	.-38     	; 0x122c <__divsf3+0x8>

00001252 <__divsf3_pse>:
    1252:	99 23       	and	r25, r25
    1254:	b1 f3       	breq	.-20     	; 0x1242 <__divsf3+0x1e>
    1256:	55 23       	and	r21, r21
    1258:	91 f3       	breq	.-28     	; 0x123e <__divsf3+0x1a>
    125a:	95 1b       	sub	r25, r21
    125c:	55 0b       	sbc	r21, r21
    125e:	bb 27       	eor	r27, r27
    1260:	aa 27       	eor	r26, r26
    1262:	62 17       	cp	r22, r18
    1264:	73 07       	cpc	r23, r19
    1266:	84 07       	cpc	r24, r20
    1268:	38 f0       	brcs	.+14     	; 0x1278 <__divsf3_pse+0x26>
    126a:	9f 5f       	subi	r25, 0xFF	; 255
    126c:	5f 4f       	sbci	r21, 0xFF	; 255
    126e:	22 0f       	add	r18, r18
    1270:	33 1f       	adc	r19, r19
    1272:	44 1f       	adc	r20, r20
    1274:	aa 1f       	adc	r26, r26
    1276:	a9 f3       	breq	.-22     	; 0x1262 <__divsf3_pse+0x10>
    1278:	35 d0       	rcall	.+106    	; 0x12e4 <__divsf3_pse+0x92>
    127a:	0e 2e       	mov	r0, r30
    127c:	3a f0       	brmi	.+14     	; 0x128c <__divsf3_pse+0x3a>
    127e:	e0 e8       	ldi	r30, 0x80	; 128
    1280:	32 d0       	rcall	.+100    	; 0x12e6 <__divsf3_pse+0x94>
    1282:	91 50       	subi	r25, 0x01	; 1
    1284:	50 40       	sbci	r21, 0x00	; 0
    1286:	e6 95       	lsr	r30
    1288:	00 1c       	adc	r0, r0
    128a:	ca f7       	brpl	.-14     	; 0x127e <__divsf3_pse+0x2c>
    128c:	2b d0       	rcall	.+86     	; 0x12e4 <__divsf3_pse+0x92>
    128e:	fe 2f       	mov	r31, r30
    1290:	29 d0       	rcall	.+82     	; 0x12e4 <__divsf3_pse+0x92>
    1292:	66 0f       	add	r22, r22
    1294:	77 1f       	adc	r23, r23
    1296:	88 1f       	adc	r24, r24
    1298:	bb 1f       	adc	r27, r27
    129a:	26 17       	cp	r18, r22
    129c:	37 07       	cpc	r19, r23
    129e:	48 07       	cpc	r20, r24
    12a0:	ab 07       	cpc	r26, r27
    12a2:	b0 e8       	ldi	r27, 0x80	; 128
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <__divsf3_pse+0x56>
    12a6:	bb 0b       	sbc	r27, r27
    12a8:	80 2d       	mov	r24, r0
    12aa:	bf 01       	movw	r22, r30
    12ac:	ff 27       	eor	r31, r31
    12ae:	93 58       	subi	r25, 0x83	; 131
    12b0:	5f 4f       	sbci	r21, 0xFF	; 255
    12b2:	3a f0       	brmi	.+14     	; 0x12c2 <__divsf3_pse+0x70>
    12b4:	9e 3f       	cpi	r25, 0xFE	; 254
    12b6:	51 05       	cpc	r21, r1
    12b8:	78 f0       	brcs	.+30     	; 0x12d8 <__divsf3_pse+0x86>
    12ba:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_inf>
    12be:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_szero>
    12c2:	5f 3f       	cpi	r21, 0xFF	; 255
    12c4:	e4 f3       	brlt	.-8      	; 0x12be <__divsf3_pse+0x6c>
    12c6:	98 3e       	cpi	r25, 0xE8	; 232
    12c8:	d4 f3       	brlt	.-12     	; 0x12be <__divsf3_pse+0x6c>
    12ca:	86 95       	lsr	r24
    12cc:	77 95       	ror	r23
    12ce:	67 95       	ror	r22
    12d0:	b7 95       	ror	r27
    12d2:	f7 95       	ror	r31
    12d4:	9f 5f       	subi	r25, 0xFF	; 255
    12d6:	c9 f7       	brne	.-14     	; 0x12ca <__divsf3_pse+0x78>
    12d8:	88 0f       	add	r24, r24
    12da:	91 1d       	adc	r25, r1
    12dc:	96 95       	lsr	r25
    12de:	87 95       	ror	r24
    12e0:	97 f9       	bld	r25, 7
    12e2:	08 95       	ret
    12e4:	e1 e0       	ldi	r30, 0x01	; 1
    12e6:	66 0f       	add	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	88 1f       	adc	r24, r24
    12ec:	bb 1f       	adc	r27, r27
    12ee:	62 17       	cp	r22, r18
    12f0:	73 07       	cpc	r23, r19
    12f2:	84 07       	cpc	r24, r20
    12f4:	ba 07       	cpc	r27, r26
    12f6:	20 f0       	brcs	.+8      	; 0x1300 <__divsf3_pse+0xae>
    12f8:	62 1b       	sub	r22, r18
    12fa:	73 0b       	sbc	r23, r19
    12fc:	84 0b       	sbc	r24, r20
    12fe:	ba 0b       	sbc	r27, r26
    1300:	ee 1f       	adc	r30, r30
    1302:	88 f7       	brcc	.-30     	; 0x12e6 <__divsf3_pse+0x94>
    1304:	e0 95       	com	r30
    1306:	08 95       	ret

00001308 <__fp_mpack>:
    1308:	9f 3f       	cpi	r25, 0xFF	; 255
    130a:	31 f0       	breq	.+12     	; 0x1318 <__fp_mpack_finite+0xc>

0000130c <__fp_mpack_finite>:
    130c:	91 50       	subi	r25, 0x01	; 1
    130e:	20 f4       	brcc	.+8      	; 0x1318 <__fp_mpack_finite+0xc>
    1310:	87 95       	ror	r24
    1312:	77 95       	ror	r23
    1314:	67 95       	ror	r22
    1316:	b7 95       	ror	r27
    1318:	88 0f       	add	r24, r24
    131a:	91 1d       	adc	r25, r1
    131c:	96 95       	lsr	r25
    131e:	87 95       	ror	r24
    1320:	97 f9       	bld	r25, 7
    1322:	08 95       	ret

00001324 <__divmodsi4>:
    1324:	05 2e       	mov	r0, r21
    1326:	97 fb       	bst	r25, 7
    1328:	1e f4       	brtc	.+6      	; 0x1330 <__divmodsi4+0xc>
    132a:	00 94       	com	r0
    132c:	0e 94 a9 09 	call	0x1352	; 0x1352 <__negsi2>
    1330:	57 fd       	sbrc	r21, 7
    1332:	07 d0       	rcall	.+14     	; 0x1342 <__divmodsi4_neg2>
    1334:	0e 94 b1 09 	call	0x1362	; 0x1362 <__udivmodsi4>
    1338:	07 fc       	sbrc	r0, 7
    133a:	03 d0       	rcall	.+6      	; 0x1342 <__divmodsi4_neg2>
    133c:	4e f4       	brtc	.+18     	; 0x1350 <__divmodsi4_exit>
    133e:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__negsi2>

00001342 <__divmodsi4_neg2>:
    1342:	50 95       	com	r21
    1344:	40 95       	com	r20
    1346:	30 95       	com	r19
    1348:	21 95       	neg	r18
    134a:	3f 4f       	sbci	r19, 0xFF	; 255
    134c:	4f 4f       	sbci	r20, 0xFF	; 255
    134e:	5f 4f       	sbci	r21, 0xFF	; 255

00001350 <__divmodsi4_exit>:
    1350:	08 95       	ret

00001352 <__negsi2>:
    1352:	90 95       	com	r25
    1354:	80 95       	com	r24
    1356:	70 95       	com	r23
    1358:	61 95       	neg	r22
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	8f 4f       	sbci	r24, 0xFF	; 255
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	08 95       	ret

00001362 <__udivmodsi4>:
    1362:	a1 e2       	ldi	r26, 0x21	; 33
    1364:	1a 2e       	mov	r1, r26
    1366:	aa 1b       	sub	r26, r26
    1368:	bb 1b       	sub	r27, r27
    136a:	fd 01       	movw	r30, r26
    136c:	0d c0       	rjmp	.+26     	; 0x1388 <__udivmodsi4_ep>

0000136e <__udivmodsi4_loop>:
    136e:	aa 1f       	adc	r26, r26
    1370:	bb 1f       	adc	r27, r27
    1372:	ee 1f       	adc	r30, r30
    1374:	ff 1f       	adc	r31, r31
    1376:	a2 17       	cp	r26, r18
    1378:	b3 07       	cpc	r27, r19
    137a:	e4 07       	cpc	r30, r20
    137c:	f5 07       	cpc	r31, r21
    137e:	20 f0       	brcs	.+8      	; 0x1388 <__udivmodsi4_ep>
    1380:	a2 1b       	sub	r26, r18
    1382:	b3 0b       	sbc	r27, r19
    1384:	e4 0b       	sbc	r30, r20
    1386:	f5 0b       	sbc	r31, r21

00001388 <__udivmodsi4_ep>:
    1388:	66 1f       	adc	r22, r22
    138a:	77 1f       	adc	r23, r23
    138c:	88 1f       	adc	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	1a 94       	dec	r1
    1392:	69 f7       	brne	.-38     	; 0x136e <__udivmodsi4_loop>
    1394:	60 95       	com	r22
    1396:	70 95       	com	r23
    1398:	80 95       	com	r24
    139a:	90 95       	com	r25
    139c:	9b 01       	movw	r18, r22
    139e:	ac 01       	movw	r20, r24
    13a0:	bd 01       	movw	r22, r26
    13a2:	cf 01       	movw	r24, r30
    13a4:	08 95       	ret

000013a6 <random_r>:
    13a6:	8f 92       	push	r8
    13a8:	9f 92       	push	r9
    13aa:	af 92       	push	r10
    13ac:	bf 92       	push	r11
    13ae:	cf 92       	push	r12
    13b0:	df 92       	push	r13
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	ec 01       	movw	r28, r24
    13bc:	68 81       	ld	r22, Y
    13be:	79 81       	ldd	r23, Y+1	; 0x01
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	9b 81       	ldd	r25, Y+3	; 0x03
    13c4:	61 15       	cp	r22, r1
    13c6:	71 05       	cpc	r23, r1
    13c8:	81 05       	cpc	r24, r1
    13ca:	91 05       	cpc	r25, r1
    13cc:	21 f4       	brne	.+8      	; 0x13d6 <random_r+0x30>
    13ce:	64 e2       	ldi	r22, 0x24	; 36
    13d0:	79 ed       	ldi	r23, 0xD9	; 217
    13d2:	8b e5       	ldi	r24, 0x5B	; 91
    13d4:	97 e0       	ldi	r25, 0x07	; 7
    13d6:	2d e1       	ldi	r18, 0x1D	; 29
    13d8:	33 ef       	ldi	r19, 0xF3	; 243
    13da:	41 e0       	ldi	r20, 0x01	; 1
    13dc:	50 e0       	ldi	r21, 0x00	; 0
    13de:	0e 94 92 09 	call	0x1324	; 0x1324 <__divmodsi4>
    13e2:	49 01       	movw	r8, r18
    13e4:	5a 01       	movw	r10, r20
    13e6:	9b 01       	movw	r18, r22
    13e8:	ac 01       	movw	r20, r24
    13ea:	a7 ea       	ldi	r26, 0xA7	; 167
    13ec:	b1 e4       	ldi	r27, 0x41	; 65
    13ee:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__muluhisi3>
    13f2:	6b 01       	movw	r12, r22
    13f4:	7c 01       	movw	r14, r24
    13f6:	ac ee       	ldi	r26, 0xEC	; 236
    13f8:	b4 ef       	ldi	r27, 0xF4	; 244
    13fa:	a5 01       	movw	r20, r10
    13fc:	94 01       	movw	r18, r8
    13fe:	0e 94 83 0a 	call	0x1506	; 0x1506 <__mulohisi3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	8c 0d       	add	r24, r12
    1408:	9d 1d       	adc	r25, r13
    140a:	ae 1d       	adc	r26, r14
    140c:	bf 1d       	adc	r27, r15
    140e:	b7 ff       	sbrs	r27, 7
    1410:	03 c0       	rjmp	.+6      	; 0x1418 <random_r+0x72>
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	a1 09       	sbc	r26, r1
    1416:	b0 48       	sbci	r27, 0x80	; 128
    1418:	88 83       	st	Y, r24
    141a:	99 83       	std	Y+1, r25	; 0x01
    141c:	aa 83       	std	Y+2, r26	; 0x02
    141e:	bb 83       	std	Y+3, r27	; 0x03
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	9f 77       	andi	r25, 0x7F	; 127
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	ff 90       	pop	r15
    142c:	ef 90       	pop	r14
    142e:	df 90       	pop	r13
    1430:	cf 90       	pop	r12
    1432:	bf 90       	pop	r11
    1434:	af 90       	pop	r10
    1436:	9f 90       	pop	r9
    1438:	8f 90       	pop	r8
    143a:	08 95       	ret

0000143c <random>:
    143c:	8f 92       	push	r8
    143e:	9f 92       	push	r9
    1440:	af 92       	push	r10
    1442:	bf 92       	push	r11
    1444:	cf 92       	push	r12
    1446:	df 92       	push	r13
    1448:	ef 92       	push	r14
    144a:	ff 92       	push	r15
    144c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1450:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1454:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    1458:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    145c:	61 15       	cp	r22, r1
    145e:	71 05       	cpc	r23, r1
    1460:	81 05       	cpc	r24, r1
    1462:	91 05       	cpc	r25, r1
    1464:	21 f4       	brne	.+8      	; 0x146e <random+0x32>
    1466:	64 e2       	ldi	r22, 0x24	; 36
    1468:	79 ed       	ldi	r23, 0xD9	; 217
    146a:	8b e5       	ldi	r24, 0x5B	; 91
    146c:	97 e0       	ldi	r25, 0x07	; 7
    146e:	2d e1       	ldi	r18, 0x1D	; 29
    1470:	33 ef       	ldi	r19, 0xF3	; 243
    1472:	41 e0       	ldi	r20, 0x01	; 1
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	0e 94 92 09 	call	0x1324	; 0x1324 <__divmodsi4>
    147a:	49 01       	movw	r8, r18
    147c:	5a 01       	movw	r10, r20
    147e:	9b 01       	movw	r18, r22
    1480:	ac 01       	movw	r20, r24
    1482:	a7 ea       	ldi	r26, 0xA7	; 167
    1484:	b1 e4       	ldi	r27, 0x41	; 65
    1486:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__muluhisi3>
    148a:	6b 01       	movw	r12, r22
    148c:	7c 01       	movw	r14, r24
    148e:	ac ee       	ldi	r26, 0xEC	; 236
    1490:	b4 ef       	ldi	r27, 0xF4	; 244
    1492:	a5 01       	movw	r20, r10
    1494:	94 01       	movw	r18, r8
    1496:	0e 94 83 0a 	call	0x1506	; 0x1506 <__mulohisi3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	8c 0d       	add	r24, r12
    14a0:	9d 1d       	adc	r25, r13
    14a2:	ae 1d       	adc	r26, r14
    14a4:	bf 1d       	adc	r27, r15
    14a6:	b7 ff       	sbrs	r27, 7
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <random+0x74>
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	a1 09       	sbc	r26, r1
    14ae:	b0 48       	sbci	r27, 0x80	; 128
    14b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    14b4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    14b8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    14bc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    14c0:	bc 01       	movw	r22, r24
    14c2:	cd 01       	movw	r24, r26
    14c4:	9f 77       	andi	r25, 0x7F	; 127
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	df 90       	pop	r13
    14cc:	cf 90       	pop	r12
    14ce:	bf 90       	pop	r11
    14d0:	af 90       	pop	r10
    14d2:	9f 90       	pop	r9
    14d4:	8f 90       	pop	r8
    14d6:	08 95       	ret

000014d8 <srandom>:
    14d8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
    14dc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    14e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    14e4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    14e8:	08 95       	ret

000014ea <__muluhisi3>:
    14ea:	0e 94 88 0a 	call	0x1510	; 0x1510 <__umulhisi3>
    14ee:	a5 9f       	mul	r26, r21
    14f0:	90 0d       	add	r25, r0
    14f2:	b4 9f       	mul	r27, r20
    14f4:	90 0d       	add	r25, r0
    14f6:	a4 9f       	mul	r26, r20
    14f8:	80 0d       	add	r24, r0
    14fa:	91 1d       	adc	r25, r1
    14fc:	11 24       	eor	r1, r1
    14fe:	08 95       	ret

00001500 <__mulshisi3>:
    1500:	b7 ff       	sbrs	r27, 7
    1502:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__muluhisi3>

00001506 <__mulohisi3>:
    1506:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__muluhisi3>
    150a:	82 1b       	sub	r24, r18
    150c:	93 0b       	sbc	r25, r19
    150e:	08 95       	ret

00001510 <__umulhisi3>:
    1510:	a2 9f       	mul	r26, r18
    1512:	b0 01       	movw	r22, r0
    1514:	b3 9f       	mul	r27, r19
    1516:	c0 01       	movw	r24, r0
    1518:	a3 9f       	mul	r26, r19
    151a:	70 0d       	add	r23, r0
    151c:	81 1d       	adc	r24, r1
    151e:	11 24       	eor	r1, r1
    1520:	91 1d       	adc	r25, r1
    1522:	b2 9f       	mul	r27, r18
    1524:	70 0d       	add	r23, r0
    1526:	81 1d       	adc	r24, r1
    1528:	11 24       	eor	r1, r1
    152a:	91 1d       	adc	r25, r1
    152c:	08 95       	ret

0000152e <_exit>:
    152e:	f8 94       	cli

00001530 <__stop_program>:
    1530:	ff cf       	rjmp	.-2      	; 0x1530 <__stop_program>
