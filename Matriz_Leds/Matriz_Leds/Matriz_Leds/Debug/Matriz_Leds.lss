
Matriz_Leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000104  00800100  00000b68  00000bdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b68  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d10  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019ae  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080b  00000000  00000000  000027a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009c2  00000000  00000000  00002fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  00003974  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000052b  00000000  00000000  00003c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015e2  00000000  00000000  000041af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00005791  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <main>
  8e:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <filas>:
#include <util/delay.h>
#include "UART.h"


// RECORRIDO DEL CODIGO HEXADECIMAL DE CADA CARACTER O FORMA
void filas(int i, int velocidad, char PORT[], char FORMA[]){
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	ec 01       	movw	r28, r24
	// VELOCIDAD DE DESPLAZAMIENTO
	for (int k=0;k<velocidad;k++)//
  a0:	00 e0       	ldi	r16, 0x00	; 0
  a2:	10 e0       	ldi	r17, 0x00	; 0
  a4:	1c c0       	rjmp	.+56     	; 0xde <filas+0x48>
	{
		//CANTIDAD DE HEXADECIMALES PARA 1 FORMA PARTICULAR
		for (int j=0; j<8;j++)//
		{
			PORTD = PORT[j];
  a6:	da 01       	movw	r26, r20
  a8:	ae 0f       	add	r26, r30
  aa:	bf 1f       	adc	r27, r31
  ac:	9c 91       	ld	r25, X
  ae:	9b b9       	out	0x0b, r25	; 11
			PORTB = ~FORMA[i+j];// SE NIEGA PARA QUE SE MUESTRE EN LA MATRIZ
  b0:	df 01       	movw	r26, r30
  b2:	ac 0f       	add	r26, r28
  b4:	bd 1f       	adc	r27, r29
  b6:	a2 0f       	add	r26, r18
  b8:	b3 1f       	adc	r27, r19
  ba:	9c 91       	ld	r25, X
  bc:	90 95       	com	r25
  be:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	83 ef       	ldi	r24, 0xF3	; 243
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <filas+0x2e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <filas+0x34>
  ca:	00 00       	nop
void filas(int i, int velocidad, char PORT[], char FORMA[]){
	// VELOCIDAD DE DESPLAZAMIENTO
	for (int k=0;k<velocidad;k++)//
	{
		//CANTIDAD DE HEXADECIMALES PARA 1 FORMA PARTICULAR
		for (int j=0; j<8;j++)//
  cc:	31 96       	adiw	r30, 0x01	; 1
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <filas+0x3e>
  d0:	e0 e0       	ldi	r30, 0x00	; 0
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e8 30       	cpi	r30, 0x08	; 8
  d6:	f1 05       	cpc	r31, r1
  d8:	34 f3       	brlt	.-52     	; 0xa6 <filas+0x10>


// RECORRIDO DEL CODIGO HEXADECIMAL DE CADA CARACTER O FORMA
void filas(int i, int velocidad, char PORT[], char FORMA[]){
	// VELOCIDAD DE DESPLAZAMIENTO
	for (int k=0;k<velocidad;k++)//
  da:	0f 5f       	subi	r16, 0xFF	; 255
  dc:	1f 4f       	sbci	r17, 0xFF	; 255
  de:	06 17       	cp	r16, r22
  e0:	17 07       	cpc	r17, r23
  e2:	b4 f3       	brlt	.-20     	; 0xd0 <filas+0x3a>
			PORTD = PORT[j];
			PORTB = ~FORMA[i+j];// SE NIEGA PARA QUE SE MUESTRE EN LA MATRIZ
			_delay_ms(0.25);// DELAY PARA QUE SE MUESTRE EN LA MATRIZ SIN PARPADEOS
		}
	}
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	08 95       	ret

000000ee <animacion1>:

void animacion1(char PORT[], char ANIMACION1[]) {
  ee:	ef 92       	push	r14
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	8c 01       	movw	r16, r24
  fc:	7b 01       	movw	r14, r22
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	d0 e0       	ldi	r29, 0x00	; 0
 102:	08 c0       	rjmp	.+16     	; 0x114 <animacion1+0x26>
	{
		filas(i,5,PORT,ANIMACION1);
 104:	97 01       	movw	r18, r14
 106:	a8 01       	movw	r20, r16
 108:	65 e0       	ldi	r22, 0x05	; 5
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	ce 01       	movw	r24, r28
 10e:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
	}
}

void animacion1(char PORT[], char ANIMACION1[]) {
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
 112:	28 96       	adiw	r28, 0x08	; 8
 114:	c9 31       	cpi	r28, 0x19	; 25
 116:	d1 05       	cpc	r29, r1
 118:	ac f3       	brlt	.-22     	; 0x104 <animacion1+0x16>
 11a:	c8 e1       	ldi	r28, 0x18	; 24
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	08 c0       	rjmp	.+16     	; 0x130 <animacion1+0x42>
	{
		filas(i,5,PORT,ANIMACION1);
	}
	for (int i=24;i>=0;i-=8)// PARA CERRAR LA ANIMACION
	{
		filas(i,5,PORT,ANIMACION1);
 120:	97 01       	movw	r18, r14
 122:	a8 01       	movw	r20, r16
 124:	65 e0       	ldi	r22, 0x05	; 5
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	ce 01       	movw	r24, r28
 12a:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
	{
		filas(i,5,PORT,ANIMACION1);
	}
	for (int i=24;i>=0;i-=8)// PARA CERRAR LA ANIMACION
 12e:	28 97       	sbiw	r28, 0x08	; 8
 130:	dd 23       	and	r29, r29
 132:	b4 f7       	brge	.-20     	; 0x120 <animacion1+0x32>
	{
		filas(i,5,PORT,ANIMACION1);
	}
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	ff 90       	pop	r15
 13e:	ef 90       	pop	r14
 140:	08 95       	ret

00000142 <animacion2>:

void animacion2(char PORT[], char ANIMACION2[]) {
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	8c 01       	movw	r16, r24
 150:	7b 01       	movw	r14, r22
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
 152:	c0 e0       	ldi	r28, 0x00	; 0
 154:	d0 e0       	ldi	r29, 0x00	; 0
 156:	08 c0       	rjmp	.+16     	; 0x168 <animacion2+0x26>
	{
		filas(i,5,PORT,ANIMACION2);
 158:	97 01       	movw	r18, r14
 15a:	a8 01       	movw	r20, r16
 15c:	65 e0       	ldi	r22, 0x05	; 5
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	ce 01       	movw	r24, r28
 162:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
	}
}

void animacion2(char PORT[], char ANIMACION2[]) {
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
 166:	28 96       	adiw	r28, 0x08	; 8
 168:	c9 31       	cpi	r28, 0x19	; 25
 16a:	d1 05       	cpc	r29, r1
 16c:	ac f3       	brlt	.-22     	; 0x158 <animacion2+0x16>
 16e:	c8 e1       	ldi	r28, 0x18	; 24
 170:	d0 e0       	ldi	r29, 0x00	; 0
 172:	08 c0       	rjmp	.+16     	; 0x184 <animacion2+0x42>
	{
		filas(i,5,PORT,ANIMACION2);
	}
	for (int i=24;i>=0;i-=8)// PARA CERRAR LA ANIMACION
	{
		filas(i,5,PORT,ANIMACION2);
 174:	97 01       	movw	r18, r14
 176:	a8 01       	movw	r20, r16
 178:	65 e0       	ldi	r22, 0x05	; 5
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	ce 01       	movw	r24, r28
 17e:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
	{
		filas(i,5,PORT,ANIMACION2);
	}
	for (int i=24;i>=0;i-=8)// PARA CERRAR LA ANIMACION
 182:	28 97       	sbiw	r28, 0x08	; 8
 184:	dd 23       	and	r29, r29
 186:	b4 f7       	brge	.-20     	; 0x174 <animacion2+0x32>
	{
		filas(i,5,PORT,ANIMACION2);
	}
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	08 95       	ret

00000196 <hola>:

void hola(char PORT[], char MENSAJE[]) {
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	7c 01       	movw	r14, r24
 1a4:	8b 01       	movw	r16, r22
	//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
	for (int i=0;i<32;i++)
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
 1aa:	08 c0       	rjmp	.+16     	; 0x1bc <hola+0x26>
	{
		filas(i,10,PORT,MENSAJE);
 1ac:	98 01       	movw	r18, r16
 1ae:	a7 01       	movw	r20, r14
 1b0:	6a e0       	ldi	r22, 0x0A	; 10
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	ce 01       	movw	r24, r28
 1b6:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
	}
}

void hola(char PORT[], char MENSAJE[]) {
	//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
	for (int i=0;i<32;i++)
 1ba:	21 96       	adiw	r28, 0x01	; 1
 1bc:	c0 32       	cpi	r28, 0x20	; 32
 1be:	d1 05       	cpc	r29, r1
 1c0:	ac f3       	brlt	.-22     	; 0x1ac <hola+0x16>
	{
		filas(i,10,PORT,MENSAJE);
	}
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	08 95       	ret

000001d0 <squid_game>:

void squid_game(char PORT[], char SQUID_GAME[]) {
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	7c 01       	movw	r14, r24
 1de:	8b 01       	movw	r16, r22
	PORTC = ((1<<3));
 1e0:	88 e0       	ldi	r24, 0x08	; 8
 1e2:	88 b9       	out	0x08, r24	; 8
	//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
	for (int i=0;i<80;i++)
 1e4:	c0 e0       	ldi	r28, 0x00	; 0
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	08 c0       	rjmp	.+16     	; 0x1fa <squid_game+0x2a>
	{
		filas(i,7,PORT,SQUID_GAME);
 1ea:	98 01       	movw	r18, r16
 1ec:	a7 01       	movw	r20, r14
 1ee:	67 e0       	ldi	r22, 0x07	; 7
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	ce 01       	movw	r24, r28
 1f4:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
}

void squid_game(char PORT[], char SQUID_GAME[]) {
	PORTC = ((1<<3));
	//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
	for (int i=0;i<80;i++)
 1f8:	21 96       	adiw	r28, 0x01	; 1
 1fa:	c0 35       	cpi	r28, 0x50	; 80
 1fc:	d1 05       	cpc	r29, r1
 1fe:	ac f3       	brlt	.-22     	; 0x1ea <squid_game+0x1a>
	{
		filas(i,7,PORT,SQUID_GAME);
	}
	PORTC = ((0<<3));
 200:	18 b8       	out	0x08, r1	; 8
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	ff 90       	pop	r15
 20c:	ef 90       	pop	r14
 20e:	08 95       	ret

00000210 <numero>:

void numero(char PORT[], char NUMERO[]){
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	7c 01       	movw	r14, r24
 21e:	8b 01       	movw	r16, r22
	for (int i=0;i<8;i+=8)
 220:	c0 e0       	ldi	r28, 0x00	; 0
 222:	d0 e0       	ldi	r29, 0x00	; 0
 224:	08 c0       	rjmp	.+16     	; 0x236 <numero+0x26>
	{
		filas(i,10,PORT,NUMERO);
 226:	98 01       	movw	r18, r16
 228:	a7 01       	movw	r20, r14
 22a:	6a e0       	ldi	r22, 0x0A	; 10
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	ce 01       	movw	r24, r28
 230:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
	}
	PORTC = ((0<<3));
}

void numero(char PORT[], char NUMERO[]){
	for (int i=0;i<8;i+=8)
 234:	28 96       	adiw	r28, 0x08	; 8
 236:	c8 30       	cpi	r28, 0x08	; 8
 238:	d1 05       	cpc	r29, r1
 23a:	ac f3       	brlt	.-22     	; 0x226 <numero+0x16>
	{
		filas(i,10,PORT,NUMERO);
	}
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	08 95       	ret

0000024a <uno>:

void uno(char PORT[], char UNO[]){
 24a:	ef 92       	push	r14
 24c:	ff 92       	push	r15
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	7c 01       	movw	r14, r24
 258:	8b 01       	movw	r16, r22
	for (int i=0;i<8;i+=8)
 25a:	c0 e0       	ldi	r28, 0x00	; 0
 25c:	d0 e0       	ldi	r29, 0x00	; 0
 25e:	08 c0       	rjmp	.+16     	; 0x270 <uno+0x26>
	{
		filas(i,10,PORT,UNO);
 260:	98 01       	movw	r18, r16
 262:	a7 01       	movw	r20, r14
 264:	6a e0       	ldi	r22, 0x0A	; 10
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	ce 01       	movw	r24, r28
 26a:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
		filas(i,10,PORT,NUMERO);
	}
}

void uno(char PORT[], char UNO[]){
	for (int i=0;i<8;i+=8)
 26e:	28 96       	adiw	r28, 0x08	; 8
 270:	c8 30       	cpi	r28, 0x08	; 8
 272:	d1 05       	cpc	r29, r1
 274:	ac f3       	brlt	.-22     	; 0x260 <uno+0x16>
	{
		filas(i,10,PORT,UNO);
	}
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	ff 90       	pop	r15
 280:	ef 90       	pop	r14
 282:	08 95       	ret

00000284 <dos>:

void dos(char PORT[], char DOS[]){
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	7c 01       	movw	r14, r24
 292:	8b 01       	movw	r16, r22
	for (int i=0;i<8;i+=8)
 294:	c0 e0       	ldi	r28, 0x00	; 0
 296:	d0 e0       	ldi	r29, 0x00	; 0
 298:	08 c0       	rjmp	.+16     	; 0x2aa <dos+0x26>
	{
		filas(i,10,PORT,DOS);
 29a:	98 01       	movw	r18, r16
 29c:	a7 01       	movw	r20, r14
 29e:	6a e0       	ldi	r22, 0x0A	; 10
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	ce 01       	movw	r24, r28
 2a4:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
		filas(i,10,PORT,UNO);
	}
}

void dos(char PORT[], char DOS[]){
	for (int i=0;i<8;i+=8)
 2a8:	28 96       	adiw	r28, 0x08	; 8
 2aa:	c8 30       	cpi	r28, 0x08	; 8
 2ac:	d1 05       	cpc	r29, r1
 2ae:	ac f3       	brlt	.-22     	; 0x29a <dos+0x16>
	{
		filas(i,10,PORT,DOS);
	}
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	08 95       	ret

000002be <tres>:

void tres(char PORT[], char TRES[]){
 2be:	ef 92       	push	r14
 2c0:	ff 92       	push	r15
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	7c 01       	movw	r14, r24
 2cc:	8b 01       	movw	r16, r22
	for (int i=0;i<8;i+=8)
 2ce:	c0 e0       	ldi	r28, 0x00	; 0
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
 2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <tres+0x26>
	{
		filas(i,10,PORT,TRES);
 2d4:	98 01       	movw	r18, r16
 2d6:	a7 01       	movw	r20, r14
 2d8:	6a e0       	ldi	r22, 0x0A	; 10
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	ce 01       	movw	r24, r28
 2de:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
		filas(i,10,PORT,DOS);
	}
}

void tres(char PORT[], char TRES[]){
	for (int i=0;i<8;i+=8)
 2e2:	28 96       	adiw	r28, 0x08	; 8
 2e4:	c8 30       	cpi	r28, 0x08	; 8
 2e6:	d1 05       	cpc	r29, r1
 2e8:	ac f3       	brlt	.-22     	; 0x2d4 <tres+0x16>
	{
		filas(i,10,PORT,TRES);
	}
}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	0f 91       	pop	r16
 2f2:	ff 90       	pop	r15
 2f4:	ef 90       	pop	r14
 2f6:	08 95       	ret

000002f8 <cuatro>:

void cuatro(char PORT[], char CUATRO[]){
 2f8:	ef 92       	push	r14
 2fa:	ff 92       	push	r15
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	7c 01       	movw	r14, r24
 306:	8b 01       	movw	r16, r22
	for (int i=0;i<8;i+=8)
 308:	c0 e0       	ldi	r28, 0x00	; 0
 30a:	d0 e0       	ldi	r29, 0x00	; 0
 30c:	08 c0       	rjmp	.+16     	; 0x31e <cuatro+0x26>
	{
		filas(i,10,PORT,CUATRO);
 30e:	98 01       	movw	r18, r16
 310:	a7 01       	movw	r20, r14
 312:	6a e0       	ldi	r22, 0x0A	; 10
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	ce 01       	movw	r24, r28
 318:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
		filas(i,10,PORT,TRES);
	}
}

void cuatro(char PORT[], char CUATRO[]){
	for (int i=0;i<8;i+=8)
 31c:	28 96       	adiw	r28, 0x08	; 8
 31e:	c8 30       	cpi	r28, 0x08	; 8
 320:	d1 05       	cpc	r29, r1
 322:	ac f3       	brlt	.-22     	; 0x30e <cuatro+0x16>
	{
		filas(i,10,PORT,CUATRO);
	}
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ff 90       	pop	r15
 32e:	ef 90       	pop	r14
 330:	08 95       	ret

00000332 <esquina>:

void esquina(char PORT[], char ESQUINA[]){
 332:	ef 92       	push	r14
 334:	ff 92       	push	r15
 336:	0f 93       	push	r16
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	7c 01       	movw	r14, r24
 340:	8b 01       	movw	r16, r22
	for (int i=0;i<=8;i+=8)
 342:	c0 e0       	ldi	r28, 0x00	; 0
 344:	d0 e0       	ldi	r29, 0x00	; 0
 346:	08 c0       	rjmp	.+16     	; 0x358 <esquina+0x26>
	{
		filas(i,100,PORT,ESQUINA);
 348:	98 01       	movw	r18, r16
 34a:	a7 01       	movw	r20, r14
 34c:	64 e6       	ldi	r22, 0x64	; 100
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	ce 01       	movw	r24, r28
 352:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
		filas(i,10,PORT,CUATRO);
	}
}

void esquina(char PORT[], char ESQUINA[]){
	for (int i=0;i<=8;i+=8)
 356:	28 96       	adiw	r28, 0x08	; 8
 358:	c9 30       	cpi	r28, 0x09	; 9
 35a:	d1 05       	cpc	r29, r1
 35c:	ac f3       	brlt	.-22     	; 0x348 <esquina+0x16>
	{
		filas(i,100,PORT,ESQUINA);
	}
}
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	ff 90       	pop	r15
 368:	ef 90       	pop	r14
 36a:	08 95       	ret

0000036c <numeros_sorteo>:

void semilla(unsigned char valor){
	srandom(valor);
}*/

void numeros_sorteo(char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
 36c:	af 92       	push	r10
 36e:	bf 92       	push	r11
 370:	cf 92       	push	r12
 372:	df 92       	push	r13
 374:	ef 92       	push	r14
 376:	ff 92       	push	r15
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	ec 01       	movw	r28, r24
 382:	5b 01       	movw	r10, r22
 384:	7a 01       	movw	r14, r20
 386:	69 01       	movw	r12, r18
	dos(PORT,DOS);_delay_ms(20);
 388:	ba 01       	movw	r22, r20
 38a:	0e 94 42 01 	call	0x284	; 0x284 <dos>
 38e:	8f e3       	ldi	r24, 0x3F	; 63
 390:	9c e9       	ldi	r25, 0x9C	; 156
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <numeros_sorteo+0x26>
 396:	00 c0       	rjmp	.+0      	; 0x398 <numeros_sorteo+0x2c>
 398:	00 00       	nop
	uno(PORT,UNO);_delay_ms(20);
 39a:	b5 01       	movw	r22, r10
 39c:	ce 01       	movw	r24, r28
 39e:	0e 94 25 01 	call	0x24a	; 0x24a <uno>
 3a2:	8f e3       	ldi	r24, 0x3F	; 63
 3a4:	9c e9       	ldi	r25, 0x9C	; 156
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <numeros_sorteo+0x3a>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <numeros_sorteo+0x40>
 3ac:	00 00       	nop
	cuatro(PORT,CUATRO);_delay_ms(20);
 3ae:	b8 01       	movw	r22, r16
 3b0:	ce 01       	movw	r24, r28
 3b2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <cuatro>
 3b6:	8f e3       	ldi	r24, 0x3F	; 63
 3b8:	9c e9       	ldi	r25, 0x9C	; 156
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <numeros_sorteo+0x4e>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <numeros_sorteo+0x54>
 3c0:	00 00       	nop
	tres(PORT,TRES);_delay_ms(20);
 3c2:	b6 01       	movw	r22, r12
 3c4:	ce 01       	movw	r24, r28
 3c6:	0e 94 5f 01 	call	0x2be	; 0x2be <tres>
 3ca:	8f e3       	ldi	r24, 0x3F	; 63
 3cc:	9c e9       	ldi	r25, 0x9C	; 156
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <numeros_sorteo+0x62>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <numeros_sorteo+0x68>
 3d4:	00 00       	nop
	uno(PORT,UNO);_delay_ms(20);
 3d6:	b5 01       	movw	r22, r10
 3d8:	ce 01       	movw	r24, r28
 3da:	0e 94 25 01 	call	0x24a	; 0x24a <uno>
 3de:	8f e3       	ldi	r24, 0x3F	; 63
 3e0:	9c e9       	ldi	r25, 0x9C	; 156
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <numeros_sorteo+0x76>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <numeros_sorteo+0x7c>
 3e8:	00 00       	nop
	tres(PORT,TRES);_delay_ms(20);
 3ea:	b6 01       	movw	r22, r12
 3ec:	ce 01       	movw	r24, r28
 3ee:	0e 94 5f 01 	call	0x2be	; 0x2be <tres>
 3f2:	8f e3       	ldi	r24, 0x3F	; 63
 3f4:	9c e9       	ldi	r25, 0x9C	; 156
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <numeros_sorteo+0x8a>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <numeros_sorteo+0x90>
 3fc:	00 00       	nop
	dos(PORT,DOS);_delay_ms(20);
 3fe:	b7 01       	movw	r22, r14
 400:	ce 01       	movw	r24, r28
 402:	0e 94 42 01 	call	0x284	; 0x284 <dos>
 406:	8f e3       	ldi	r24, 0x3F	; 63
 408:	9c e9       	ldi	r25, 0x9C	; 156
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 410:	00 00       	nop
}
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	ff 90       	pop	r15
 41c:	ef 90       	pop	r14
 41e:	df 90       	pop	r13
 420:	cf 90       	pop	r12
 422:	bf 90       	pop	r11
 424:	af 90       	pop	r10
 426:	08 95       	ret

00000428 <seleccion_orden>:

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
 428:	af 92       	push	r10
 42a:	bf 92       	push	r11
 42c:	cf 92       	push	r12
 42e:	df 92       	push	r13
 430:	ef 92       	push	r14
 432:	ff 92       	push	r15
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	eb 01       	movw	r28, r22
 43e:	5a 01       	movw	r10, r20
 440:	69 01       	movw	r12, r18
	switch(valor){
 442:	82 30       	cpi	r24, 0x02	; 2
 444:	91 05       	cpc	r25, r1
 446:	f1 f0       	breq	.+60     	; 0x484 <seleccion_orden+0x5c>
 448:	1c f4       	brge	.+6      	; 0x450 <seleccion_orden+0x28>
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	71 f0       	breq	.+28     	; 0x46a <seleccion_orden+0x42>
 44e:	3b c0       	rjmp	.+118    	; 0x4c6 <seleccion_orden+0x9e>
 450:	83 30       	cpi	r24, 0x03	; 3
 452:	91 05       	cpc	r25, r1
 454:	29 f1       	breq	.+74     	; 0x4a0 <seleccion_orden+0x78>
 456:	04 97       	sbiw	r24, 0x04	; 4
 458:	89 f1       	breq	.+98     	; 0x4bc <seleccion_orden+0x94>
 45a:	35 c0       	rjmp	.+106    	; 0x4c6 <seleccion_orden+0x9e>
		case 1:
			for (int i=0; i<20; i++){
				uno(PORT,UNO);
 45c:	b5 01       	movw	r22, r10
 45e:	ce 01       	movw	r24, r28
 460:	0e 94 25 01 	call	0x24a	; 0x24a <uno>
}

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
		case 1:
			for (int i=0; i<20; i++){
 464:	0f 5f       	subi	r16, 0xFF	; 255
 466:	1f 4f       	sbci	r17, 0xFF	; 255
 468:	02 c0       	rjmp	.+4      	; 0x46e <seleccion_orden+0x46>
	tres(PORT,TRES);_delay_ms(20);
	dos(PORT,DOS);_delay_ms(20);
}

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
 46a:	00 e0       	ldi	r16, 0x00	; 0
 46c:	10 e0       	ldi	r17, 0x00	; 0
		case 1:
			for (int i=0; i<20; i++){
 46e:	04 31       	cpi	r16, 0x14	; 20
 470:	11 05       	cpc	r17, r1
 472:	a4 f3       	brlt	.-24     	; 0x45c <seleccion_orden+0x34>
 474:	28 c0       	rjmp	.+80     	; 0x4c6 <seleccion_orden+0x9e>
				uno(PORT,UNO);
			}
			break;
		case 2:
			for (int i=0; i<20; i++){
				dos(PORT,DOS);
 476:	b6 01       	movw	r22, r12
 478:	ce 01       	movw	r24, r28
 47a:	0e 94 42 01 	call	0x284	; 0x284 <dos>
			for (int i=0; i<20; i++){
				uno(PORT,UNO);
			}
			break;
		case 2:
			for (int i=0; i<20; i++){
 47e:	0f 5f       	subi	r16, 0xFF	; 255
 480:	1f 4f       	sbci	r17, 0xFF	; 255
 482:	02 c0       	rjmp	.+4      	; 0x488 <seleccion_orden+0x60>
	tres(PORT,TRES);_delay_ms(20);
	dos(PORT,DOS);_delay_ms(20);
}

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
 484:	00 e0       	ldi	r16, 0x00	; 0
 486:	10 e0       	ldi	r17, 0x00	; 0
			for (int i=0; i<20; i++){
				uno(PORT,UNO);
			}
			break;
		case 2:
			for (int i=0; i<20; i++){
 488:	04 31       	cpi	r16, 0x14	; 20
 48a:	11 05       	cpc	r17, r1
 48c:	a4 f3       	brlt	.-24     	; 0x476 <seleccion_orden+0x4e>
 48e:	1b c0       	rjmp	.+54     	; 0x4c6 <seleccion_orden+0x9e>
				dos(PORT,DOS);
			}
			break;
		case 3:
			for (int i=0; i<20; i++){
				tres(PORT,TRES);
 490:	b8 01       	movw	r22, r16
 492:	ce 01       	movw	r24, r28
 494:	0e 94 5f 01 	call	0x2be	; 0x2be <tres>
			for (int i=0; i<20; i++){
				dos(PORT,DOS);
			}
			break;
		case 3:
			for (int i=0; i<20; i++){
 498:	8f ef       	ldi	r24, 0xFF	; 255
 49a:	e8 1a       	sub	r14, r24
 49c:	f8 0a       	sbc	r15, r24
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <seleccion_orden+0x7c>
	tres(PORT,TRES);_delay_ms(20);
	dos(PORT,DOS);_delay_ms(20);
}

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
 4a0:	e1 2c       	mov	r14, r1
 4a2:	f1 2c       	mov	r15, r1
			for (int i=0; i<20; i++){
				dos(PORT,DOS);
			}
			break;
		case 3:
			for (int i=0; i<20; i++){
 4a4:	84 e1       	ldi	r24, 0x14	; 20
 4a6:	e8 16       	cp	r14, r24
 4a8:	f1 04       	cpc	r15, r1
 4aa:	94 f3       	brlt	.-28     	; 0x490 <seleccion_orden+0x68>
 4ac:	0c c0       	rjmp	.+24     	; 0x4c6 <seleccion_orden+0x9e>
				tres(PORT,TRES);
			}
			break;
		case 4:
			for (int i=0; i<20; i++){
				cuatro(PORT,CUATRO);
 4ae:	b7 01       	movw	r22, r14
 4b0:	ce 01       	movw	r24, r28
 4b2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <cuatro>
			for (int i=0; i<20; i++){
				tres(PORT,TRES);
			}
			break;
		case 4:
			for (int i=0; i<20; i++){
 4b6:	0f 5f       	subi	r16, 0xFF	; 255
 4b8:	1f 4f       	sbci	r17, 0xFF	; 255
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <seleccion_orden+0x98>
	tres(PORT,TRES);_delay_ms(20);
	dos(PORT,DOS);_delay_ms(20);
}

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
 4bc:	00 e0       	ldi	r16, 0x00	; 0
 4be:	10 e0       	ldi	r17, 0x00	; 0
			for (int i=0; i<20; i++){
				tres(PORT,TRES);
			}
			break;
		case 4:
			for (int i=0; i<20; i++){
 4c0:	04 31       	cpi	r16, 0x14	; 20
 4c2:	11 05       	cpc	r17, r1
 4c4:	a4 f3       	brlt	.-24     	; 0x4ae <seleccion_orden+0x86>
				cuatro(PORT,CUATRO);
			}
			break;
	}
}
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	1f 91       	pop	r17
 4cc:	0f 91       	pop	r16
 4ce:	ff 90       	pop	r15
 4d0:	ef 90       	pop	r14
 4d2:	df 90       	pop	r13
 4d4:	cf 90       	pop	r12
 4d6:	bf 90       	pop	r11
 4d8:	af 90       	pop	r10
 4da:	08 95       	ret

000004dc <main>:

int main(void)
{
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	cd b7       	in	r28, 0x3d	; 61
 4e2:	de b7       	in	r29, 0x3e	; 62
 4e4:	c8 54       	subi	r28, 0x48	; 72
 4e6:	d1 40       	sbci	r29, 0x01	; 1
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
	// PARA EL DATO
	DDRB = 0B11111111; // SALIDA TODO EL PUERTO B
 4f2:	8f ef       	ldi	r24, 0xFF	; 255
 4f4:	84 b9       	out	0x04, r24	; 4
	
	// PARA EL DESPLAZMIENTO
	DDRD = 0B11111111; // SALIDAS TODO EL PUERTO D
 4f6:	8a b9       	out	0x0a, r24	; 10
	
	// PARA LAS BOTONERAS
	DDRC |= (0<<0)|(0<<1)|(0<<2); //ENTRADAS PARA LOS PUERTOS C0,C1,C2
 4f8:	87 b1       	in	r24, 0x07	; 7
 4fa:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1<<3)|(1<<4); //SALIDA PARA EL PUERTO C3 MUSICA RED LIGHT GREEN LIGHT, C4 CLICK
 4fc:	87 b1       	in	r24, 0x07	; 7
 4fe:	88 61       	ori	r24, 0x18	; 24
 500:	87 b9       	out	0x07, r24	; 7
		
	//UART_init();
	
	// VA CON EL DESPLAZMIENTO
	char PORT[8] =  {1,2,4,8,16,32,64,128};//VALORES DE PINES DEL PORTD
 502:	88 e0       	ldi	r24, 0x08	; 8
 504:	e4 e0       	ldi	r30, 0x04	; 4
 506:	f1 e0       	ldi	r31, 0x01	; 1
 508:	de 01       	movw	r26, r28
 50a:	11 96       	adiw	r26, 0x01	; 1
 50c:	01 90       	ld	r0, Z+
 50e:	0d 92       	st	X+, r0
 510:	8a 95       	dec	r24
 512:	e1 f7       	brne	.-8      	; 0x50c <main+0x30>
	//{PD0,PD1,PD2,PD3,PD4,PD5,PD6,PD7}
	
	 
	char SQUID_GAME[]={0x0, 0x44, 0x4A, 0x4A, 0x4A, 0x4A, 0x32, 0x0, //S
 514:	88 e5       	ldi	r24, 0x58	; 88
 516:	ec e0       	ldi	r30, 0x0C	; 12
 518:	f1 e0       	ldi	r31, 0x01	; 1
 51a:	de 01       	movw	r26, r28
 51c:	19 96       	adiw	r26, 0x09	; 9
 51e:	01 90       	ld	r0, Z+
 520:	0d 92       	st	X+, r0
 522:	8a 95       	dec	r24
 524:	e1 f7       	brne	.-8      	; 0x51e <main+0x42>
		0x0, 0x7E, 0x04, 0x08, 0x08, 0x04, 0x7E, 0x0, //M
		0x0, 0x7E, 0x4A, 0x4A, 0x4A, 0x42, 0x42, 0x0, //E
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, //ESPACIO
	}; 
	
	char MENSAJE[]={0x0, 0x7e, 0x7e, 0x18, 0x18, 0x7e, 0x7e, 0x0, //H
 526:	88 e2       	ldi	r24, 0x28	; 40
 528:	e4 e6       	ldi	r30, 0x64	; 100
 52a:	f1 e0       	ldi	r31, 0x01	; 1
 52c:	de 01       	movw	r26, r28
 52e:	af 59       	subi	r26, 0x9F	; 159
 530:	bf 4f       	sbci	r27, 0xFF	; 255
 532:	01 90       	ld	r0, Z+
 534:	0d 92       	st	X+, r0
 536:	8a 95       	dec	r24
 538:	e1 f7       	brne	.-8      	; 0x532 <main+0x56>
		0x0, 0x7e, 0x7e, 0x66, 0x66, 0x7e, 0x7e, 0x0, //O
		0x0, 0x7e, 0x7e, 0x60, 0x60, 0x60, 0x60, 0x0, //L
		0x0, 0x7e, 0x7e, 0x16, 0x16, 0x7e, 0x7e, 0x0, //A
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}; //ESPACIO
	
	char ANIMACION1[] = {
 53a:	80 e2       	ldi	r24, 0x20	; 32
 53c:	ec e8       	ldi	r30, 0x8C	; 140
 53e:	f1 e0       	ldi	r31, 0x01	; 1
 540:	de 01       	movw	r26, r28
 542:	a7 57       	subi	r26, 0x77	; 119
 544:	bf 4f       	sbci	r27, 0xFF	; 255
 546:	01 90       	ld	r0, Z+
 548:	0d 92       	st	X+, r0
 54a:	8a 95       	dec	r24
 54c:	e1 f7       	brne	.-8      	; 0x546 <main+0x6a>
		0x0, 0x0, 0x24, 0x0, 0x0, 0x24, 0x0, 0x0, // CENTRO 2
		0x0, 0x42, 0x0, 0x0, 0x0, 0x0, 0x42, 0x0, // CENTRO 3
		0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81 // CENTRO 4
	};
	
	char ANIMACION2[] = {
 54e:	80 e2       	ldi	r24, 0x20	; 32
 550:	ec ea       	ldi	r30, 0xAC	; 172
 552:	f1 e0       	ldi	r31, 0x01	; 1
 554:	de 01       	movw	r26, r28
 556:	a7 55       	subi	r26, 0x57	; 87
 558:	bf 4f       	sbci	r27, 0xFF	; 255
 55a:	01 90       	ld	r0, Z+
 55c:	0d 92       	st	X+, r0
 55e:	8a 95       	dec	r24
 560:	e1 f7       	brne	.-8      	; 0x55a <main+0x7e>
		0x0, 0x0, 0x3C, 0x24, 0x24, 0x3C, 0x0, 0x0, // CENTRO 2
		0x0, 0x7E, 0x42, 0x42, 0x42, 0x42, 0x7E, 0x0, // CENTRO 3
		0xFF, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xFF // CENTRO 4
	};
	
	char NUMERO3[] = {
 562:	88 e0       	ldi	r24, 0x08	; 8
 564:	ec ec       	ldi	r30, 0xCC	; 204
 566:	f1 e0       	ldi	r31, 0x01	; 1
 568:	de 01       	movw	r26, r28
 56a:	a7 53       	subi	r26, 0x37	; 55
 56c:	bf 4f       	sbci	r27, 0xFF	; 255
 56e:	01 90       	ld	r0, Z+
 570:	0d 92       	st	X+, r0
 572:	8a 95       	dec	r24
 574:	e1 f7       	brne	.-8      	; 0x56e <main+0x92>
		0x00, 0x00, 0x11, 0x15, 0x15, 0x1F, 0xA0, 0x40, // CON FLECHAS
		//0x0, 0x0, 0x11, 0x15, 0x15, 0x1F, 0x0, 0x0 // SIN FLECHAS
	};
	
	char NUMERO4[] = {
 576:	88 e0       	ldi	r24, 0x08	; 8
 578:	e4 ed       	ldi	r30, 0xD4	; 212
 57a:	f1 e0       	ldi	r31, 0x01	; 1
 57c:	de 01       	movw	r26, r28
 57e:	af 52       	subi	r26, 0x2F	; 47
 580:	bf 4f       	sbci	r27, 0xFF	; 255
 582:	01 90       	ld	r0, Z+
 584:	0d 92       	st	X+, r0
 586:	8a 95       	dec	r24
 588:	e1 f7       	brne	.-8      	; 0x582 <main+0xa6>
		0x40, 0xA0, 0x07, 0x04, 0x04, 0x1F, 0x0, 0x0, // CON FLECHAS
		//0x0, 0x0, 0x07, 0x04, 0x04, 0x1F, 0x0, 0x0 // SIN FLECHAS
	};
	
	char UNO[] = {
 58a:	88 e0       	ldi	r24, 0x08	; 8
 58c:	ec ed       	ldi	r30, 0xDC	; 220
 58e:	f1 e0       	ldi	r31, 0x01	; 1
 590:	de 01       	movw	r26, r28
 592:	a7 52       	subi	r26, 0x27	; 39
 594:	bf 4f       	sbci	r27, 0xFF	; 255
 596:	01 90       	ld	r0, Z+
 598:	0d 92       	st	X+, r0
 59a:	8a 95       	dec	r24
 59c:	e1 f7       	brne	.-8      	; 0x596 <main+0xba>
		0x0, 0x0, 0x04, 0x04, 0x7E, 0x7E, 0x0, 0x0
	};
	
	char DOS[] = {
 59e:	88 e0       	ldi	r24, 0x08	; 8
 5a0:	e4 ee       	ldi	r30, 0xE4	; 228
 5a2:	f1 e0       	ldi	r31, 0x01	; 1
 5a4:	de 01       	movw	r26, r28
 5a6:	af 51       	subi	r26, 0x1F	; 31
 5a8:	bf 4f       	sbci	r27, 0xFF	; 255
 5aa:	01 90       	ld	r0, Z+
 5ac:	0d 92       	st	X+, r0
 5ae:	8a 95       	dec	r24
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <main+0xce>
		0x0, 0x0, 0x7A, 0x7A, 0x5E, 0x5E, 0x0, 0x0
	};
	
	char TRES[] = {
 5b2:	88 e0       	ldi	r24, 0x08	; 8
 5b4:	ec ee       	ldi	r30, 0xEC	; 236
 5b6:	f1 e0       	ldi	r31, 0x01	; 1
 5b8:	de 01       	movw	r26, r28
 5ba:	a7 51       	subi	r26, 0x17	; 23
 5bc:	bf 4f       	sbci	r27, 0xFF	; 255
 5be:	01 90       	ld	r0, Z+
 5c0:	0d 92       	st	X+, r0
 5c2:	8a 95       	dec	r24
 5c4:	e1 f7       	brne	.-8      	; 0x5be <main+0xe2>
		0x0, 0x0, 0x5A, 0x5A, 0x7E, 0x7E, 0x0, 0x0
	};
	
	char CUATRO[] = {
 5c6:	88 e0       	ldi	r24, 0x08	; 8
 5c8:	e4 ef       	ldi	r30, 0xF4	; 244
 5ca:	f1 e0       	ldi	r31, 0x01	; 1
 5cc:	de 01       	movw	r26, r28
 5ce:	af 50       	subi	r26, 0x0F	; 15
 5d0:	bf 4f       	sbci	r27, 0xFF	; 255
 5d2:	01 90       	ld	r0, Z+
 5d4:	0d 92       	st	X+, r0
 5d6:	8a 95       	dec	r24
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <main+0xf6>
		0x0, 0x0, 0x18, 0x1C, 0x72, 0x7E, 0x0, 0x0
	};
	
	char ESQUINA1[] = {
 5da:	fe 01       	movw	r30, r28
 5dc:	e7 50       	subi	r30, 0x07	; 7
 5de:	ff 4f       	sbci	r31, 0xFF	; 255
 5e0:	80 e1       	ldi	r24, 0x10	; 16
 5e2:	df 01       	movw	r26, r30
 5e4:	28 2f       	mov	r18, r24
 5e6:	1d 92       	st	X+, r1
 5e8:	2a 95       	dec	r18
 5ea:	e9 f7       	brne	.-6      	; 0x5e6 <main+0x10a>
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	90 83       	st	Z, r25
		0x01, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	};
	
	char ESQUINA2[] = {
 5f0:	70 96       	adiw	r30, 0x10	; 16
 5f2:	df 01       	movw	r26, r30
 5f4:	28 2f       	mov	r18, r24
 5f6:	1d 92       	st	X+, r1
 5f8:	2a 95       	dec	r18
 5fa:	e9 f7       	brne	.-6      	; 0x5f6 <main+0x11a>
 5fc:	97 83       	std	Z+7, r25	; 0x07
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x01,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	};
	
	char ESQUINA3[] = {
 5fe:	70 96       	adiw	r30, 0x10	; 16
 600:	df 01       	movw	r26, r30
 602:	28 2f       	mov	r18, r24
 604:	1d 92       	st	X+, r1
 606:	2a 95       	dec	r18
 608:	e9 f7       	brne	.-6      	; 0x604 <main+0x128>
 60a:	90 e8       	ldi	r25, 0x80	; 128
 60c:	90 83       	st	Z, r25
		0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	};
	
	char ESQUINA4[] = {
 60e:	70 96       	adiw	r30, 0x10	; 16
 610:	df 01       	movw	r26, r30
 612:	1d 92       	st	X+, r1
 614:	8a 95       	dec	r24
 616:	e9 f7       	brne	.-6      	; 0x612 <main+0x136>
 618:	97 83       	std	Z+7, r25	; 0x07
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	};
	
	int inicio = 0;
	int valor3 = 1;
 61a:	01 e0       	ldi	r16, 0x01	; 1
 61c:	10 e0       	ldi	r17, 0x00	; 0
	char ESQUINA4[] = {
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	};
	
	int inicio = 0;
 61e:	c1 2c       	mov	r12, r1
 620:	d1 2c       	mov	r13, r1
 622:	2a c0       	rjmp	.+84     	; 0x678 <main+0x19c>
	int jugadores = 0;
	
	while(1){
		
		while (!inicio) {
			animacion1(PORT,ANIMACION1);
 624:	be 01       	movw	r22, r28
 626:	67 57       	subi	r22, 0x77	; 119
 628:	7f 4f       	sbci	r23, 0xFF	; 255
 62a:	ce 01       	movw	r24, r28
 62c:	01 96       	adiw	r24, 0x01	; 1
 62e:	0e 94 77 00 	call	0xee	; 0xee <animacion1>
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
 632:	86 b1       	in	r24, 0x06	; 6
 634:	81 34       	cpi	r24, 0x41	; 65
 636:	59 f4       	brne	.+22     	; 0x64e <main+0x172>
				inicio = 1;
				squid_game(PORT,SQUID_GAME);
 638:	be 01       	movw	r22, r28
 63a:	67 5f       	subi	r22, 0xF7	; 247
 63c:	7f 4f       	sbci	r23, 0xFF	; 255
 63e:	ce 01       	movw	r24, r28
 640:	01 96       	adiw	r24, 0x01	; 1
 642:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <squid_game>
		
		while (!inicio) {
			animacion1(PORT,ANIMACION1);
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
				inicio = 1;
 646:	cc 24       	eor	r12, r12
 648:	c3 94       	inc	r12
 64a:	d1 2c       	mov	r13, r1
				squid_game(PORT,SQUID_GAME);
				break;
 64c:	18 c0       	rjmp	.+48     	; 0x67e <main+0x1a2>
			}
			animacion2(PORT,ANIMACION2);
 64e:	be 01       	movw	r22, r28
 650:	67 55       	subi	r22, 0x57	; 87
 652:	7f 4f       	sbci	r23, 0xFF	; 255
 654:	ce 01       	movw	r24, r28
 656:	01 96       	adiw	r24, 0x01	; 1
 658:	0e 94 a1 00 	call	0x142	; 0x142 <animacion2>
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
 65c:	86 b1       	in	r24, 0x06	; 6
 65e:	81 34       	cpi	r24, 0x41	; 65
 660:	59 f4       	brne	.+22     	; 0x678 <main+0x19c>
				inicio = 1;
				squid_game(PORT,SQUID_GAME);
 662:	be 01       	movw	r22, r28
 664:	67 5f       	subi	r22, 0xF7	; 247
 666:	7f 4f       	sbci	r23, 0xFF	; 255
 668:	ce 01       	movw	r24, r28
 66a:	01 96       	adiw	r24, 0x01	; 1
 66c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <squid_game>
				break;
			}
			animacion2(PORT,ANIMACION2);
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
				inicio = 1;
 670:	cc 24       	eor	r12, r12
 672:	c3 94       	inc	r12
 674:	d1 2c       	mov	r13, r1
				squid_game(PORT,SQUID_GAME);
				break;
 676:	03 c0       	rjmp	.+6      	; 0x67e <main+0x1a2>
	int valor3 = 1;
	int jugadores = 0;
	
	while(1){
		
		while (!inicio) {
 678:	c1 14       	cp	r12, r1
 67a:	d1 04       	cpc	r13, r1
 67c:	99 f2       	breq	.-90     	; 0x624 <main+0x148>
		/* EMPIEZA LA SELECCION DE CANTIDAD DE JUGADORES CON:
		DERECHA: 0B 0100 0010
		IZQUIERDA: 0B 0100 0100 */
		
		//NUMERO 3 CON FLECHA A LA DERECHA
		jugadores = 0;
 67e:	e1 2c       	mov	r14, r1
 680:	f1 2c       	mov	r15, r1
		while (valor3) {
 682:	36 c0       	rjmp	.+108    	; 0x6f0 <main+0x214>
			numero(PORT,NUMERO3);
 684:	be 01       	movw	r22, r28
 686:	67 53       	subi	r22, 0x37	; 55
 688:	7f 4f       	sbci	r23, 0xFF	; 255
 68a:	ce 01       	movw	r24, r28
 68c:	01 96       	adiw	r24, 0x01	; 1
 68e:	0e 94 08 01 	call	0x210	; 0x210 <numero>
			// SI PRESIONA PARA LA DERECHA
			if (PINC == 0x42) {
 692:	86 b1       	in	r24, 0x06	; 6
 694:	82 34       	cpi	r24, 0x42	; 66
 696:	31 f5       	brne	.+76     	; 0x6e4 <main+0x208>
				// SONIDO DEL CLICK
				PORTC = ((1<<4));
 698:	80 e1       	ldi	r24, 0x10	; 16
 69a:	88 b9       	out	0x08, r24	; 8
 69c:	83 ef       	ldi	r24, 0xF3	; 243
 69e:	91 e0       	ldi	r25, 0x01	; 1
 6a0:	01 97       	sbiw	r24, 0x01	; 1
 6a2:	f1 f7       	brne	.-4      	; 0x6a0 <main+0x1c4>
 6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <main+0x1ca>
 6a6:	00 00       	nop
				_delay_ms(0.25);
				PORTC = ((0<<4));
 6a8:	18 b8       	out	0x08, r1	; 8
				while (1) {
					numero(PORT,NUMERO4);
 6aa:	be 01       	movw	r22, r28
 6ac:	6f 52       	subi	r22, 0x2F	; 47
 6ae:	7f 4f       	sbci	r23, 0xFF	; 255
 6b0:	ce 01       	movw	r24, r28
 6b2:	01 96       	adiw	r24, 0x01	; 1
 6b4:	0e 94 08 01 	call	0x210	; 0x210 <numero>
					// SI PRESIONA PARA LA IZQUIERDA
					if (PINC == 0x44) {
 6b8:	86 b1       	in	r24, 0x06	; 6
 6ba:	84 34       	cpi	r24, 0x44	; 68
 6bc:	51 f4       	brne	.+20     	; 0x6d2 <main+0x1f6>
						// SONIDO DEL CLICK
						PORTC = ((1<<4));
 6be:	80 e1       	ldi	r24, 0x10	; 16
 6c0:	88 b9       	out	0x08, r24	; 8
 6c2:	a3 ef       	ldi	r26, 0xF3	; 243
 6c4:	b1 e0       	ldi	r27, 0x01	; 1
 6c6:	11 97       	sbiw	r26, 0x01	; 1
 6c8:	f1 f7       	brne	.-4      	; 0x6c6 <main+0x1ea>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <main+0x1f0>
 6cc:	00 00       	nop
						_delay_ms(0.25);
						PORTC = ((0<<4));
 6ce:	18 b8       	out	0x08, r1	; 8
						break;
 6d0:	09 c0       	rjmp	.+18     	; 0x6e4 <main+0x208>
					}
					// SI SELECCIONA LA OPCION DE 4 JUGADORES
					if (PINC == 0x41) {
 6d2:	86 b1       	in	r24, 0x06	; 6
 6d4:	81 34       	cpi	r24, 0x41	; 65
 6d6:	49 f7       	brne	.-46     	; 0x6aa <main+0x1ce>
						jugadores = 4;
 6d8:	68 94       	set
 6da:	ee 24       	eor	r14, r14
 6dc:	e2 f8       	bld	r14, 2
 6de:	f1 2c       	mov	r15, r1
						valor3 = 0;
 6e0:	00 e0       	ldi	r16, 0x00	; 0
 6e2:	10 e0       	ldi	r17, 0x00	; 0
						break;
					}
				}
			}
			// SI SELECCIONA LA OPCION DE 3 JUGADORES
			if (PINC == 0x41 && valor3) {
 6e4:	86 b1       	in	r24, 0x06	; 6
 6e6:	81 34       	cpi	r24, 0x41	; 65
 6e8:	19 f4       	brne	.+6      	; 0x6f0 <main+0x214>
 6ea:	01 15       	cp	r16, r1
 6ec:	11 05       	cpc	r17, r1
 6ee:	21 f4       	brne	.+8      	; 0x6f8 <main+0x21c>
		DERECHA: 0B 0100 0010
		IZQUIERDA: 0B 0100 0100 */
		
		//NUMERO 3 CON FLECHA A LA DERECHA
		jugadores = 0;
		while (valor3) {
 6f0:	01 15       	cp	r16, r1
 6f2:	11 05       	cpc	r17, r1
 6f4:	39 f6       	brne	.-114    	; 0x684 <main+0x1a8>
 6f6:	05 c0       	rjmp	.+10     	; 0x702 <main+0x226>
					}
				}
			}
			// SI SELECCIONA LA OPCION DE 3 JUGADORES
			if (PINC == 0x41 && valor3) {
				jugadores = 3;
 6f8:	0f 2e       	mov	r0, r31
 6fa:	f3 e0       	ldi	r31, 0x03	; 3
 6fc:	ef 2e       	mov	r14, r31
 6fe:	f1 2c       	mov	r15, r1
 700:	f0 2d       	mov	r31, r0
				break;
			}
		}
		valor3 = 0;
		
		if (jugadores == 4){
 702:	b4 e0       	ldi	r27, 0x04	; 4
 704:	eb 16       	cp	r14, r27
 706:	f1 04       	cpc	r15, r1
 708:	09 f0       	breq	.+2      	; 0x70c <main+0x230>
 70a:	1d c1       	rjmp	.+570    	; 0x946 <__stack+0x47>
			//PARA EL CASO DE LAS 4 ESQUINAS
			int referencia[4] = {1,2,3,4};
 70c:	88 e0       	ldi	r24, 0x08	; 8
 70e:	ec ef       	ldi	r30, 0xFC	; 252
 710:	f1 e0       	ldi	r31, 0x01	; 1
 712:	de 01       	movw	r26, r28
 714:	af 5b       	subi	r26, 0xBF	; 191
 716:	be 4f       	sbci	r27, 0xFE	; 254
 718:	01 90       	ld	r0, Z+
 71a:	0d 92       	st	X+, r0
 71c:	8a 95       	dec	r24
 71e:	e1 f7       	brne	.-8      	; 0x718 <main+0x23c>
			int orden_juego[4] = {0,0,0,0};
 720:	fe 01       	movw	r30, r28
 722:	e7 5c       	subi	r30, 0xC7	; 199
 724:	fe 4f       	sbci	r31, 0xFE	; 254
 726:	88 e0       	ldi	r24, 0x08	; 8
 728:	df 01       	movw	r26, r30
 72a:	1d 92       	st	X+, r1
 72c:	8a 95       	dec	r24
 72e:	e9 f7       	brne	.-6      	; 0x72a <main+0x24e>
			int aleatorio = 0;
			
			for (int i=0; i<4; i++){
 730:	00 e0       	ldi	r16, 0x00	; 0
 732:	10 e0       	ldi	r17, 0x00	; 0
 734:	36 c0       	rjmp	.+108    	; 0x7a2 <main+0x2c6>
				// VALOR ALEATORIO PARA ESCOGER UNA POSICION DE LA REFERENCIA
				do {
					/*unsigned char valor = numeroAleatorio();
					semilla(valor);*/
					aleatorio = random()%4; //[0,4) // LO USO PARA LAS POSICIONES
 736:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <random>
 73a:	dc 01       	movw	r26, r24
 73c:	cb 01       	movw	r24, r22
 73e:	83 70       	andi	r24, 0x03	; 3
 740:	99 27       	eor	r25, r25
 742:	aa 27       	eor	r26, r26
 744:	b0 78       	andi	r27, 0x80	; 128
 746:	bb 23       	and	r27, r27
 748:	54 f4       	brge	.+20     	; 0x75e <main+0x282>
 74a:	01 97       	sbiw	r24, 0x01	; 1
 74c:	a1 09       	sbc	r26, r1
 74e:	b1 09       	sbc	r27, r1
 750:	8c 6f       	ori	r24, 0xFC	; 252
 752:	9f 6f       	ori	r25, 0xFF	; 255
 754:	af 6f       	ori	r26, 0xFF	; 255
 756:	bf 6f       	ori	r27, 0xFF	; 255
 758:	01 96       	adiw	r24, 0x01	; 1
 75a:	a1 1d       	adc	r26, r1
 75c:	b1 1d       	adc	r27, r1
				} while (referencia[aleatorio] == 0);
 75e:	bc 01       	movw	r22, r24
 760:	66 0f       	add	r22, r22
 762:	77 1f       	adc	r23, r23
 764:	e1 e4       	ldi	r30, 0x41	; 65
 766:	f1 e0       	ldi	r31, 0x01	; 1
 768:	ec 0f       	add	r30, r28
 76a:	fd 1f       	adc	r31, r29
 76c:	e6 0f       	add	r30, r22
 76e:	f7 1f       	adc	r31, r23
 770:	80 81       	ld	r24, Z
 772:	91 81       	ldd	r25, Z+1	; 0x01
 774:	00 97       	sbiw	r24, 0x00	; 0
 776:	f9 f2       	breq	.-66     	; 0x736 <main+0x25a>
				
				orden_juego[i] = referencia[aleatorio];
 778:	f8 01       	movw	r30, r16
 77a:	ee 0f       	add	r30, r30
 77c:	ff 1f       	adc	r31, r31
 77e:	49 e3       	ldi	r20, 0x39	; 57
 780:	51 e0       	ldi	r21, 0x01	; 1
 782:	4c 0f       	add	r20, r28
 784:	5d 1f       	adc	r21, r29
 786:	e4 0f       	add	r30, r20
 788:	f5 1f       	adc	r31, r21
 78a:	91 83       	std	Z+1, r25	; 0x01
 78c:	80 83       	st	Z, r24
				referencia[aleatorio] = 0;
 78e:	e1 e4       	ldi	r30, 0x41	; 65
 790:	f1 e0       	ldi	r31, 0x01	; 1
 792:	ec 0f       	add	r30, r28
 794:	fd 1f       	adc	r31, r29
 796:	e6 0f       	add	r30, r22
 798:	f7 1f       	adc	r31, r23
 79a:	11 82       	std	Z+1, r1	; 0x01
 79c:	10 82       	st	Z, r1
			//PARA EL CASO DE LAS 4 ESQUINAS
			int referencia[4] = {1,2,3,4};
			int orden_juego[4] = {0,0,0,0};
			int aleatorio = 0;
			
			for (int i=0; i<4; i++){
 79e:	0f 5f       	subi	r16, 0xFF	; 255
 7a0:	1f 4f       	sbci	r17, 0xFF	; 255
 7a2:	04 30       	cpi	r16, 0x04	; 4
 7a4:	11 05       	cpc	r17, r1
 7a6:	3c f2       	brlt	.-114    	; 0x736 <main+0x25a>
				referencia[aleatorio] = 0;
			}
			
			// MOVIMIENTO DE LOS NUMEROS
			// TURNO ESQUINA 1
			PORTC = ((1<<4));
 7a8:	68 94       	set
 7aa:	bb 24       	eor	r11, r11
 7ac:	b4 f8       	bld	r11, 4
 7ae:	b8 b8       	out	0x08, r11	; 8
 7b0:	83 ef       	ldi	r24, 0xF3	; 243
 7b2:	91 e0       	ldi	r25, 0x01	; 1
 7b4:	01 97       	sbiw	r24, 0x01	; 1
 7b6:	f1 f7       	brne	.-4      	; 0x7b4 <main+0x2d8>
 7b8:	00 c0       	rjmp	.+0      	; 0x7ba <main+0x2de>
 7ba:	00 00       	nop
			_delay_ms(0.25);
			PORTC = ((0<<4));
 7bc:	18 b8       	out	0x08, r1	; 8
			esquina(PORT,ESQUINA1);
 7be:	be 01       	movw	r22, r28
 7c0:	67 50       	subi	r22, 0x07	; 7
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	ce 01       	movw	r24, r28
 7c6:	01 96       	adiw	r24, 0x01	; 1
 7c8:	0e 94 99 01 	call	0x332	; 0x332 <esquina>
			numeros_sorteo(PORT,UNO,DOS,TRES,CUATRO);
 7cc:	8e 01       	movw	r16, r28
 7ce:	0f 50       	subi	r16, 0x0F	; 15
 7d0:	1f 4f       	sbci	r17, 0xFF	; 255
 7d2:	9e 01       	movw	r18, r28
 7d4:	27 51       	subi	r18, 0x17	; 23
 7d6:	3f 4f       	sbci	r19, 0xFF	; 255
 7d8:	ae 01       	movw	r20, r28
 7da:	4f 51       	subi	r20, 0x1F	; 31
 7dc:	5f 4f       	sbci	r21, 0xFF	; 255
 7de:	be 01       	movw	r22, r28
 7e0:	67 52       	subi	r22, 0x27	; 39
 7e2:	7f 4f       	sbci	r23, 0xFF	; 255
 7e4:	ce 01       	movw	r24, r28
 7e6:	01 96       	adiw	r24, 0x01	; 1
 7e8:	0e 94 b6 01 	call	0x36c	; 0x36c <numeros_sorteo>
			seleccion_orden(orden_juego[0],PORT,UNO,DOS,TRES,CUATRO);
 7ec:	78 01       	movw	r14, r16
 7ee:	08 50       	subi	r16, 0x08	; 8
 7f0:	11 09       	sbc	r17, r1
 7f2:	9e 01       	movw	r18, r28
 7f4:	2f 51       	subi	r18, 0x1F	; 31
 7f6:	3f 4f       	sbci	r19, 0xFF	; 255
 7f8:	ae 01       	movw	r20, r28
 7fa:	47 52       	subi	r20, 0x27	; 39
 7fc:	5f 4f       	sbci	r21, 0xFF	; 255
 7fe:	be 01       	movw	r22, r28
 800:	6f 5f       	subi	r22, 0xFF	; 255
 802:	7f 4f       	sbci	r23, 0xFF	; 255
 804:	c7 5c       	subi	r28, 0xC7	; 199
 806:	de 4f       	sbci	r29, 0xFE	; 254
 808:	88 81       	ld	r24, Y
 80a:	99 81       	ldd	r25, Y+1	; 0x01
 80c:	c9 53       	subi	r28, 0x39	; 57
 80e:	d1 40       	sbci	r29, 0x01	; 1
 810:	0e 94 14 02 	call	0x428	; 0x428 <seleccion_orden>
			
			
			// TURNO ESQUINA 2
			PORTC = ((1<<4));
 814:	b8 b8       	out	0x08, r11	; 8
 816:	83 ef       	ldi	r24, 0xF3	; 243
 818:	91 e0       	ldi	r25, 0x01	; 1
 81a:	01 97       	sbiw	r24, 0x01	; 1
 81c:	f1 f7       	brne	.-4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 81e:	00 c0       	rjmp	.+0      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 820:	00 00       	nop
			_delay_ms(0.25);
			PORTC = ((0<<4));
 822:	18 b8       	out	0x08, r1	; 8
			esquina(PORT,ESQUINA2);
 824:	be 01       	movw	r22, r28
 826:	67 5f       	subi	r22, 0xF7	; 247
 828:	7e 4f       	sbci	r23, 0xFE	; 254
 82a:	ce 01       	movw	r24, r28
 82c:	01 96       	adiw	r24, 0x01	; 1
 82e:	0e 94 99 01 	call	0x332	; 0x332 <esquina>
			numeros_sorteo(PORT,UNO,DOS,TRES,CUATRO);
 832:	87 01       	movw	r16, r14
 834:	9e 01       	movw	r18, r28
 836:	27 51       	subi	r18, 0x17	; 23
 838:	3f 4f       	sbci	r19, 0xFF	; 255
 83a:	ae 01       	movw	r20, r28
 83c:	4f 51       	subi	r20, 0x1F	; 31
 83e:	5f 4f       	sbci	r21, 0xFF	; 255
 840:	be 01       	movw	r22, r28
 842:	67 52       	subi	r22, 0x27	; 39
 844:	7f 4f       	sbci	r23, 0xFF	; 255
 846:	ce 01       	movw	r24, r28
 848:	01 96       	adiw	r24, 0x01	; 1
 84a:	0e 94 b6 01 	call	0x36c	; 0x36c <numeros_sorteo>
			seleccion_orden(orden_juego[1],PORT,UNO,DOS,TRES,CUATRO);
 84e:	08 50       	subi	r16, 0x08	; 8
 850:	11 09       	sbc	r17, r1
 852:	9e 01       	movw	r18, r28
 854:	2f 51       	subi	r18, 0x1F	; 31
 856:	3f 4f       	sbci	r19, 0xFF	; 255
 858:	ae 01       	movw	r20, r28
 85a:	47 52       	subi	r20, 0x27	; 39
 85c:	5f 4f       	sbci	r21, 0xFF	; 255
 85e:	be 01       	movw	r22, r28
 860:	6f 5f       	subi	r22, 0xFF	; 255
 862:	7f 4f       	sbci	r23, 0xFF	; 255
 864:	c5 5c       	subi	r28, 0xC5	; 197
 866:	de 4f       	sbci	r29, 0xFE	; 254
 868:	88 81       	ld	r24, Y
 86a:	99 81       	ldd	r25, Y+1	; 0x01
 86c:	cb 53       	subi	r28, 0x3B	; 59
 86e:	d1 40       	sbci	r29, 0x01	; 1
 870:	0e 94 14 02 	call	0x428	; 0x428 <seleccion_orden>
			
			// TURNO ESQUINA 3
			PORTC = ((1<<4));
 874:	b8 b8       	out	0x08, r11	; 8
 876:	83 ef       	ldi	r24, 0xF3	; 243
 878:	91 e0       	ldi	r25, 0x01	; 1
 87a:	01 97       	sbiw	r24, 0x01	; 1
 87c:	f1 f7       	brne	.-4      	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 87e:	00 c0       	rjmp	.+0      	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 880:	00 00       	nop
			_delay_ms(0.25);
			PORTC = ((0<<4));
 882:	18 b8       	out	0x08, r1	; 8
			esquina(PORT,ESQUINA3);
 884:	be 01       	movw	r22, r28
 886:	67 5e       	subi	r22, 0xE7	; 231
 888:	7e 4f       	sbci	r23, 0xFE	; 254
 88a:	ce 01       	movw	r24, r28
 88c:	01 96       	adiw	r24, 0x01	; 1
 88e:	0e 94 99 01 	call	0x332	; 0x332 <esquina>
			numeros_sorteo(PORT,UNO,DOS,TRES,CUATRO);
 892:	87 01       	movw	r16, r14
 894:	9e 01       	movw	r18, r28
 896:	27 51       	subi	r18, 0x17	; 23
 898:	3f 4f       	sbci	r19, 0xFF	; 255
 89a:	ae 01       	movw	r20, r28
 89c:	4f 51       	subi	r20, 0x1F	; 31
 89e:	5f 4f       	sbci	r21, 0xFF	; 255
 8a0:	be 01       	movw	r22, r28
 8a2:	67 52       	subi	r22, 0x27	; 39
 8a4:	7f 4f       	sbci	r23, 0xFF	; 255
 8a6:	ce 01       	movw	r24, r28
 8a8:	01 96       	adiw	r24, 0x01	; 1
 8aa:	0e 94 b6 01 	call	0x36c	; 0x36c <numeros_sorteo>
			seleccion_orden(orden_juego[2],PORT,UNO,DOS,TRES,CUATRO);
 8ae:	08 50       	subi	r16, 0x08	; 8
 8b0:	11 09       	sbc	r17, r1
 8b2:	9e 01       	movw	r18, r28
 8b4:	2f 51       	subi	r18, 0x1F	; 31
 8b6:	3f 4f       	sbci	r19, 0xFF	; 255
 8b8:	ae 01       	movw	r20, r28
 8ba:	47 52       	subi	r20, 0x27	; 39
 8bc:	5f 4f       	sbci	r21, 0xFF	; 255
 8be:	be 01       	movw	r22, r28
 8c0:	6f 5f       	subi	r22, 0xFF	; 255
 8c2:	7f 4f       	sbci	r23, 0xFF	; 255
 8c4:	c3 5c       	subi	r28, 0xC3	; 195
 8c6:	de 4f       	sbci	r29, 0xFE	; 254
 8c8:	88 81       	ld	r24, Y
 8ca:	99 81       	ldd	r25, Y+1	; 0x01
 8cc:	cd 53       	subi	r28, 0x3D	; 61
 8ce:	d1 40       	sbci	r29, 0x01	; 1
 8d0:	0e 94 14 02 	call	0x428	; 0x428 <seleccion_orden>
			
			// TURNO ESQUINA 4
			PORTC = ((1<<4));
 8d4:	b8 b8       	out	0x08, r11	; 8
 8d6:	83 ef       	ldi	r24, 0xF3	; 243
 8d8:	91 e0       	ldi	r25, 0x01	; 1
 8da:	01 97       	sbiw	r24, 0x01	; 1
 8dc:	f1 f7       	brne	.-4      	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 8de:	00 c0       	rjmp	.+0      	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
 8e0:	00 00       	nop
			_delay_ms(0.25);
			PORTC = ((0<<4));
 8e2:	18 b8       	out	0x08, r1	; 8
			esquina(PORT,ESQUINA4);
 8e4:	be 01       	movw	r22, r28
 8e6:	67 5d       	subi	r22, 0xD7	; 215
 8e8:	7e 4f       	sbci	r23, 0xFE	; 254
 8ea:	ce 01       	movw	r24, r28
 8ec:	01 96       	adiw	r24, 0x01	; 1
 8ee:	0e 94 99 01 	call	0x332	; 0x332 <esquina>
			numeros_sorteo(PORT,UNO,DOS,TRES,CUATRO);
 8f2:	87 01       	movw	r16, r14
 8f4:	9e 01       	movw	r18, r28
 8f6:	27 51       	subi	r18, 0x17	; 23
 8f8:	3f 4f       	sbci	r19, 0xFF	; 255
 8fa:	ae 01       	movw	r20, r28
 8fc:	4f 51       	subi	r20, 0x1F	; 31
 8fe:	5f 4f       	sbci	r21, 0xFF	; 255
 900:	be 01       	movw	r22, r28
 902:	67 52       	subi	r22, 0x27	; 39
 904:	7f 4f       	sbci	r23, 0xFF	; 255
 906:	ce 01       	movw	r24, r28
 908:	01 96       	adiw	r24, 0x01	; 1
 90a:	0e 94 b6 01 	call	0x36c	; 0x36c <numeros_sorteo>
			seleccion_orden(orden_juego[3],PORT,UNO,DOS,TRES,CUATRO);
 90e:	08 50       	subi	r16, 0x08	; 8
 910:	11 09       	sbc	r17, r1
 912:	9e 01       	movw	r18, r28
 914:	2f 51       	subi	r18, 0x1F	; 31
 916:	3f 4f       	sbci	r19, 0xFF	; 255
 918:	ae 01       	movw	r20, r28
 91a:	47 52       	subi	r20, 0x27	; 39
 91c:	5f 4f       	sbci	r21, 0xFF	; 255
 91e:	be 01       	movw	r22, r28
 920:	6f 5f       	subi	r22, 0xFF	; 255
 922:	7f 4f       	sbci	r23, 0xFF	; 255
 924:	c1 5c       	subi	r28, 0xC1	; 193
 926:	de 4f       	sbci	r29, 0xFE	; 254
 928:	88 81       	ld	r24, Y
 92a:	99 81       	ldd	r25, Y+1	; 0x01
 92c:	cf 53       	subi	r28, 0x3F	; 63
 92e:	d1 40       	sbci	r29, 0x01	; 1
 930:	0e 94 14 02 	call	0x428	; 0x428 <seleccion_orden>
 934:	bf ef       	ldi	r27, 0xFF	; 255
 936:	21 ee       	ldi	r18, 0xE1	; 225
 938:	44 e0       	ldi	r20, 0x04	; 4
 93a:	b1 50       	subi	r27, 0x01	; 1
 93c:	20 40       	sbci	r18, 0x00	; 0
 93e:	40 40       	sbci	r20, 0x00	; 0
 940:	e1 f7       	brne	.-8      	; 0x93a <__stack+0x3b>
 942:	00 c0       	rjmp	.+0      	; 0x944 <__stack+0x45>
 944:	00 00       	nop
			_delay_ms(200);
		}
		
		
		
		hola(PORT,MENSAJE);
 946:	be 01       	movw	r22, r28
 948:	6f 59       	subi	r22, 0x9F	; 159
 94a:	7f 4f       	sbci	r23, 0xFF	; 255
 94c:	ce 01       	movw	r24, r28
 94e:	01 96       	adiw	r24, 0x01	; 1
 950:	0e 94 cb 00 	call	0x196	; 0x196 <hola>
			if (PINC == 0x41 && valor3) {
				jugadores = 3;
				break;
			}
		}
		valor3 = 0;
 954:	00 e0       	ldi	r16, 0x00	; 0
 956:	10 e0       	ldi	r17, 0x00	; 0
			
			while (PIND == 0x6){
			}	
		}*/
		
	}
 958:	8f ce       	rjmp	.-738    	; 0x678 <main+0x19c>

0000095a <random_r>:
 95a:	8f 92       	push	r8
 95c:	9f 92       	push	r9
 95e:	af 92       	push	r10
 960:	bf 92       	push	r11
 962:	cf 92       	push	r12
 964:	df 92       	push	r13
 966:	ef 92       	push	r14
 968:	ff 92       	push	r15
 96a:	cf 93       	push	r28
 96c:	df 93       	push	r29
 96e:	ec 01       	movw	r28, r24
 970:	68 81       	ld	r22, Y
 972:	79 81       	ldd	r23, Y+1	; 0x01
 974:	8a 81       	ldd	r24, Y+2	; 0x02
 976:	9b 81       	ldd	r25, Y+3	; 0x03
 978:	61 15       	cp	r22, r1
 97a:	71 05       	cpc	r23, r1
 97c:	81 05       	cpc	r24, r1
 97e:	91 05       	cpc	r25, r1
 980:	21 f4       	brne	.+8      	; 0x98a <random_r+0x30>
 982:	64 e2       	ldi	r22, 0x24	; 36
 984:	79 ed       	ldi	r23, 0xD9	; 217
 986:	8b e5       	ldi	r24, 0x5B	; 91
 988:	97 e0       	ldi	r25, 0x07	; 7
 98a:	2d e1       	ldi	r18, 0x1D	; 29
 98c:	33 ef       	ldi	r19, 0xF3	; 243
 98e:	41 e0       	ldi	r20, 0x01	; 1
 990:	50 e0       	ldi	r21, 0x00	; 0
 992:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__divmodsi4>
 996:	49 01       	movw	r8, r18
 998:	5a 01       	movw	r10, r20
 99a:	9b 01       	movw	r18, r22
 99c:	ac 01       	movw	r20, r24
 99e:	a7 ea       	ldi	r26, 0xA7	; 167
 9a0:	b1 e4       	ldi	r27, 0x41	; 65
 9a2:	0e 94 6e 05 	call	0xadc	; 0xadc <__muluhisi3>
 9a6:	6b 01       	movw	r12, r22
 9a8:	7c 01       	movw	r14, r24
 9aa:	ac ee       	ldi	r26, 0xEC	; 236
 9ac:	b4 ef       	ldi	r27, 0xF4	; 244
 9ae:	a5 01       	movw	r20, r10
 9b0:	94 01       	movw	r18, r8
 9b2:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__mulohisi3>
 9b6:	dc 01       	movw	r26, r24
 9b8:	cb 01       	movw	r24, r22
 9ba:	8c 0d       	add	r24, r12
 9bc:	9d 1d       	adc	r25, r13
 9be:	ae 1d       	adc	r26, r14
 9c0:	bf 1d       	adc	r27, r15
 9c2:	b7 ff       	sbrs	r27, 7
 9c4:	03 c0       	rjmp	.+6      	; 0x9cc <random_r+0x72>
 9c6:	01 97       	sbiw	r24, 0x01	; 1
 9c8:	a1 09       	sbc	r26, r1
 9ca:	b0 48       	sbci	r27, 0x80	; 128
 9cc:	88 83       	st	Y, r24
 9ce:	99 83       	std	Y+1, r25	; 0x01
 9d0:	aa 83       	std	Y+2, r26	; 0x02
 9d2:	bb 83       	std	Y+3, r27	; 0x03
 9d4:	bc 01       	movw	r22, r24
 9d6:	cd 01       	movw	r24, r26
 9d8:	9f 77       	andi	r25, 0x7F	; 127
 9da:	df 91       	pop	r29
 9dc:	cf 91       	pop	r28
 9de:	ff 90       	pop	r15
 9e0:	ef 90       	pop	r14
 9e2:	df 90       	pop	r13
 9e4:	cf 90       	pop	r12
 9e6:	bf 90       	pop	r11
 9e8:	af 90       	pop	r10
 9ea:	9f 90       	pop	r9
 9ec:	8f 90       	pop	r8
 9ee:	08 95       	ret

000009f0 <random>:
 9f0:	8f 92       	push	r8
 9f2:	9f 92       	push	r9
 9f4:	af 92       	push	r10
 9f6:	bf 92       	push	r11
 9f8:	cf 92       	push	r12
 9fa:	df 92       	push	r13
 9fc:	ef 92       	push	r14
 9fe:	ff 92       	push	r15
 a00:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 a04:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 a08:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 a0c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 a10:	61 15       	cp	r22, r1
 a12:	71 05       	cpc	r23, r1
 a14:	81 05       	cpc	r24, r1
 a16:	91 05       	cpc	r25, r1
 a18:	21 f4       	brne	.+8      	; 0xa22 <random+0x32>
 a1a:	64 e2       	ldi	r22, 0x24	; 36
 a1c:	79 ed       	ldi	r23, 0xD9	; 217
 a1e:	8b e5       	ldi	r24, 0x5B	; 91
 a20:	97 e0       	ldi	r25, 0x07	; 7
 a22:	2d e1       	ldi	r18, 0x1D	; 29
 a24:	33 ef       	ldi	r19, 0xF3	; 243
 a26:	41 e0       	ldi	r20, 0x01	; 1
 a28:	50 e0       	ldi	r21, 0x00	; 0
 a2a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__divmodsi4>
 a2e:	49 01       	movw	r8, r18
 a30:	5a 01       	movw	r10, r20
 a32:	9b 01       	movw	r18, r22
 a34:	ac 01       	movw	r20, r24
 a36:	a7 ea       	ldi	r26, 0xA7	; 167
 a38:	b1 e4       	ldi	r27, 0x41	; 65
 a3a:	0e 94 6e 05 	call	0xadc	; 0xadc <__muluhisi3>
 a3e:	6b 01       	movw	r12, r22
 a40:	7c 01       	movw	r14, r24
 a42:	ac ee       	ldi	r26, 0xEC	; 236
 a44:	b4 ef       	ldi	r27, 0xF4	; 244
 a46:	a5 01       	movw	r20, r10
 a48:	94 01       	movw	r18, r8
 a4a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__mulohisi3>
 a4e:	dc 01       	movw	r26, r24
 a50:	cb 01       	movw	r24, r22
 a52:	8c 0d       	add	r24, r12
 a54:	9d 1d       	adc	r25, r13
 a56:	ae 1d       	adc	r26, r14
 a58:	bf 1d       	adc	r27, r15
 a5a:	b7 ff       	sbrs	r27, 7
 a5c:	03 c0       	rjmp	.+6      	; 0xa64 <random+0x74>
 a5e:	01 97       	sbiw	r24, 0x01	; 1
 a60:	a1 09       	sbc	r26, r1
 a62:	b0 48       	sbci	r27, 0x80	; 128
 a64:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 a68:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 a6c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 a70:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 a74:	bc 01       	movw	r22, r24
 a76:	cd 01       	movw	r24, r26
 a78:	9f 77       	andi	r25, 0x7F	; 127
 a7a:	ff 90       	pop	r15
 a7c:	ef 90       	pop	r14
 a7e:	df 90       	pop	r13
 a80:	cf 90       	pop	r12
 a82:	bf 90       	pop	r11
 a84:	af 90       	pop	r10
 a86:	9f 90       	pop	r9
 a88:	8f 90       	pop	r8
 a8a:	08 95       	ret

00000a8c <srandom>:
 a8c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 a90:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 a94:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 a98:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 a9c:	08 95       	ret

00000a9e <__divmodsi4>:
 a9e:	05 2e       	mov	r0, r21
 aa0:	97 fb       	bst	r25, 7
 aa2:	1e f4       	brtc	.+6      	; 0xaaa <__divmodsi4+0xc>
 aa4:	00 94       	com	r0
 aa6:	0e 94 66 05 	call	0xacc	; 0xacc <__negsi2>
 aaa:	57 fd       	sbrc	r21, 7
 aac:	07 d0       	rcall	.+14     	; 0xabc <__divmodsi4_neg2>
 aae:	0e 94 81 05 	call	0xb02	; 0xb02 <__udivmodsi4>
 ab2:	07 fc       	sbrc	r0, 7
 ab4:	03 d0       	rcall	.+6      	; 0xabc <__divmodsi4_neg2>
 ab6:	4e f4       	brtc	.+18     	; 0xaca <__divmodsi4_exit>
 ab8:	0c 94 66 05 	jmp	0xacc	; 0xacc <__negsi2>

00000abc <__divmodsi4_neg2>:
 abc:	50 95       	com	r21
 abe:	40 95       	com	r20
 ac0:	30 95       	com	r19
 ac2:	21 95       	neg	r18
 ac4:	3f 4f       	sbci	r19, 0xFF	; 255
 ac6:	4f 4f       	sbci	r20, 0xFF	; 255
 ac8:	5f 4f       	sbci	r21, 0xFF	; 255

00000aca <__divmodsi4_exit>:
 aca:	08 95       	ret

00000acc <__negsi2>:
 acc:	90 95       	com	r25
 ace:	80 95       	com	r24
 ad0:	70 95       	com	r23
 ad2:	61 95       	neg	r22
 ad4:	7f 4f       	sbci	r23, 0xFF	; 255
 ad6:	8f 4f       	sbci	r24, 0xFF	; 255
 ad8:	9f 4f       	sbci	r25, 0xFF	; 255
 ada:	08 95       	ret

00000adc <__muluhisi3>:
 adc:	0e 94 a3 05 	call	0xb46	; 0xb46 <__umulhisi3>
 ae0:	a5 9f       	mul	r26, r21
 ae2:	90 0d       	add	r25, r0
 ae4:	b4 9f       	mul	r27, r20
 ae6:	90 0d       	add	r25, r0
 ae8:	a4 9f       	mul	r26, r20
 aea:	80 0d       	add	r24, r0
 aec:	91 1d       	adc	r25, r1
 aee:	11 24       	eor	r1, r1
 af0:	08 95       	ret

00000af2 <__mulshisi3>:
 af2:	b7 ff       	sbrs	r27, 7
 af4:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__muluhisi3>

00000af8 <__mulohisi3>:
 af8:	0e 94 6e 05 	call	0xadc	; 0xadc <__muluhisi3>
 afc:	82 1b       	sub	r24, r18
 afe:	93 0b       	sbc	r25, r19
 b00:	08 95       	ret

00000b02 <__udivmodsi4>:
 b02:	a1 e2       	ldi	r26, 0x21	; 33
 b04:	1a 2e       	mov	r1, r26
 b06:	aa 1b       	sub	r26, r26
 b08:	bb 1b       	sub	r27, r27
 b0a:	fd 01       	movw	r30, r26
 b0c:	0d c0       	rjmp	.+26     	; 0xb28 <__udivmodsi4_ep>

00000b0e <__udivmodsi4_loop>:
 b0e:	aa 1f       	adc	r26, r26
 b10:	bb 1f       	adc	r27, r27
 b12:	ee 1f       	adc	r30, r30
 b14:	ff 1f       	adc	r31, r31
 b16:	a2 17       	cp	r26, r18
 b18:	b3 07       	cpc	r27, r19
 b1a:	e4 07       	cpc	r30, r20
 b1c:	f5 07       	cpc	r31, r21
 b1e:	20 f0       	brcs	.+8      	; 0xb28 <__udivmodsi4_ep>
 b20:	a2 1b       	sub	r26, r18
 b22:	b3 0b       	sbc	r27, r19
 b24:	e4 0b       	sbc	r30, r20
 b26:	f5 0b       	sbc	r31, r21

00000b28 <__udivmodsi4_ep>:
 b28:	66 1f       	adc	r22, r22
 b2a:	77 1f       	adc	r23, r23
 b2c:	88 1f       	adc	r24, r24
 b2e:	99 1f       	adc	r25, r25
 b30:	1a 94       	dec	r1
 b32:	69 f7       	brne	.-38     	; 0xb0e <__udivmodsi4_loop>
 b34:	60 95       	com	r22
 b36:	70 95       	com	r23
 b38:	80 95       	com	r24
 b3a:	90 95       	com	r25
 b3c:	9b 01       	movw	r18, r22
 b3e:	ac 01       	movw	r20, r24
 b40:	bd 01       	movw	r22, r26
 b42:	cf 01       	movw	r24, r30
 b44:	08 95       	ret

00000b46 <__umulhisi3>:
 b46:	a2 9f       	mul	r26, r18
 b48:	b0 01       	movw	r22, r0
 b4a:	b3 9f       	mul	r27, r19
 b4c:	c0 01       	movw	r24, r0
 b4e:	a3 9f       	mul	r26, r19
 b50:	70 0d       	add	r23, r0
 b52:	81 1d       	adc	r24, r1
 b54:	11 24       	eor	r1, r1
 b56:	91 1d       	adc	r25, r1
 b58:	b2 9f       	mul	r27, r18
 b5a:	70 0d       	add	r23, r0
 b5c:	81 1d       	adc	r24, r1
 b5e:	11 24       	eor	r1, r1
 b60:	91 1d       	adc	r25, r1
 b62:	08 95       	ret

00000b64 <_exit>:
 b64:	f8 94       	cli

00000b66 <__stop_program>:
 b66:	ff cf       	rjmp	.-2      	; 0xb66 <__stop_program>
