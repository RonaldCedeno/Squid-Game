
Matriz_Leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  00000410  00000484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000410  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e17  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079f  00000000  00000000  0000145b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000624  00000000  00000000  00001bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c8  00000000  00000000  00002220  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049b  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000882  00000000  00000000  00002883  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003105  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3d       	cpi	r26, 0xD8	; 216
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 42 01 	call	0x284	; 0x284 <main>
  8e:	0c 94 06 02 	jmp	0x40c	; 0x40c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <filas>:
#include <avr/io.h>
#include <util/delay.h>
#include "UART.h"

// RECORRIDO DEL CODIGO HEXADECIMAL DE CADA CARACTER O FORMA
void filas(int i, int velocidad, char PORT[], char FORMA[]){
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	ec 01       	movw	r28, r24
	// VELOCIDAD DE DESPLAZAMIENTO
	for (int k=0;k<velocidad;k++)//
  a0:	00 e0       	ldi	r16, 0x00	; 0
  a2:	10 e0       	ldi	r17, 0x00	; 0
  a4:	1c c0       	rjmp	.+56     	; 0xde <filas+0x48>
	{
		//CANTIDAD DE HEXADECIMALES PARA 1 FORMA PARTICULAR
		for (int j=0; j<8;j++)//
		{
			PORTD = PORT[j];
  a6:	da 01       	movw	r26, r20
  a8:	ae 0f       	add	r26, r30
  aa:	bf 1f       	adc	r27, r31
  ac:	9c 91       	ld	r25, X
  ae:	9b b9       	out	0x0b, r25	; 11
			PORTB = ~FORMA[i+j];// SE NIEGA PARA QUE SE MUESTRE EN LA MATRIZ
  b0:	df 01       	movw	r26, r30
  b2:	ac 0f       	add	r26, r28
  b4:	bd 1f       	adc	r27, r29
  b6:	a2 0f       	add	r26, r18
  b8:	b3 1f       	adc	r27, r19
  ba:	9c 91       	ld	r25, X
  bc:	90 95       	com	r25
  be:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	83 ef       	ldi	r24, 0xF3	; 243
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <filas+0x2e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <filas+0x34>
  ca:	00 00       	nop
void filas(int i, int velocidad, char PORT[], char FORMA[]){
	// VELOCIDAD DE DESPLAZAMIENTO
	for (int k=0;k<velocidad;k++)//
	{
		//CANTIDAD DE HEXADECIMALES PARA 1 FORMA PARTICULAR
		for (int j=0; j<8;j++)//
  cc:	31 96       	adiw	r30, 0x01	; 1
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <filas+0x3e>
  d0:	e0 e0       	ldi	r30, 0x00	; 0
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e8 30       	cpi	r30, 0x08	; 8
  d6:	f1 05       	cpc	r31, r1
  d8:	34 f3       	brlt	.-52     	; 0xa6 <filas+0x10>
#include "UART.h"

// RECORRIDO DEL CODIGO HEXADECIMAL DE CADA CARACTER O FORMA
void filas(int i, int velocidad, char PORT[], char FORMA[]){
	// VELOCIDAD DE DESPLAZAMIENTO
	for (int k=0;k<velocidad;k++)//
  da:	0f 5f       	subi	r16, 0xFF	; 255
  dc:	1f 4f       	sbci	r17, 0xFF	; 255
  de:	06 17       	cp	r16, r22
  e0:	17 07       	cpc	r17, r23
  e2:	b4 f3       	brlt	.-20     	; 0xd0 <filas+0x3a>
			PORTD = PORT[j];
			PORTB = ~FORMA[i+j];// SE NIEGA PARA QUE SE MUESTRE EN LA MATRIZ
			_delay_ms(0.25);// DELAY PARA QUE SE MUESTRE EN LA MATRIZ SIN PARPADEOS
		}
	}
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	08 95       	ret

000000ee <animacion1>:

void animacion1(char PORT[], char ANIMACION1[]) {
  ee:	ef 92       	push	r14
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	8c 01       	movw	r16, r24
  fc:	7b 01       	movw	r14, r22
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	d0 e0       	ldi	r29, 0x00	; 0
 102:	08 c0       	rjmp	.+16     	; 0x114 <animacion1+0x26>
	{
		filas(i,5,PORT,ANIMACION1);
 104:	97 01       	movw	r18, r14
 106:	a8 01       	movw	r20, r16
 108:	65 e0       	ldi	r22, 0x05	; 5
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	ce 01       	movw	r24, r28
 10e:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
	}
}

void animacion1(char PORT[], char ANIMACION1[]) {
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
 112:	28 96       	adiw	r28, 0x08	; 8
 114:	c9 31       	cpi	r28, 0x19	; 25
 116:	d1 05       	cpc	r29, r1
 118:	ac f3       	brlt	.-22     	; 0x104 <animacion1+0x16>
 11a:	c8 e1       	ldi	r28, 0x18	; 24
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	08 c0       	rjmp	.+16     	; 0x130 <animacion1+0x42>
	{
		filas(i,5,PORT,ANIMACION1);
	}
	for (int i=24;i>=0;i-=8)// PARA CERRAR LA ANIMACION
	{
		filas(i,5,PORT,ANIMACION1);
 120:	97 01       	movw	r18, r14
 122:	a8 01       	movw	r20, r16
 124:	65 e0       	ldi	r22, 0x05	; 5
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	ce 01       	movw	r24, r28
 12a:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
	{
		filas(i,5,PORT,ANIMACION1);
	}
	for (int i=24;i>=0;i-=8)// PARA CERRAR LA ANIMACION
 12e:	28 97       	sbiw	r28, 0x08	; 8
 130:	dd 23       	and	r29, r29
 132:	b4 f7       	brge	.-20     	; 0x120 <animacion1+0x32>
	{
		filas(i,5,PORT,ANIMACION1);
	}
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	ff 90       	pop	r15
 13e:	ef 90       	pop	r14
 140:	08 95       	ret

00000142 <animacion2>:

void animacion2(char PORT[], char ANIMACION2[]) {
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	8c 01       	movw	r16, r24
 150:	7b 01       	movw	r14, r22
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
 152:	c0 e0       	ldi	r28, 0x00	; 0
 154:	d0 e0       	ldi	r29, 0x00	; 0
 156:	08 c0       	rjmp	.+16     	; 0x168 <animacion2+0x26>
	{
		filas(i,5,PORT,ANIMACION2);
 158:	97 01       	movw	r18, r14
 15a:	a8 01       	movw	r20, r16
 15c:	65 e0       	ldi	r22, 0x05	; 5
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	ce 01       	movw	r24, r28
 162:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
	}
}

void animacion2(char PORT[], char ANIMACION2[]) {
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
 166:	28 96       	adiw	r28, 0x08	; 8
 168:	c9 31       	cpi	r28, 0x19	; 25
 16a:	d1 05       	cpc	r29, r1
 16c:	ac f3       	brlt	.-22     	; 0x158 <animacion2+0x16>
 16e:	c8 e1       	ldi	r28, 0x18	; 24
 170:	d0 e0       	ldi	r29, 0x00	; 0
 172:	08 c0       	rjmp	.+16     	; 0x184 <animacion2+0x42>
	{
		filas(i,5,PORT,ANIMACION2);
	}
	for (int i=24;i>=0;i-=8)// PARA CERRAR LA ANIMACION
	{
		filas(i,5,PORT,ANIMACION2);
 174:	97 01       	movw	r18, r14
 176:	a8 01       	movw	r20, r16
 178:	65 e0       	ldi	r22, 0x05	; 5
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	ce 01       	movw	r24, r28
 17e:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
	{
		filas(i,5,PORT,ANIMACION2);
	}
	for (int i=24;i>=0;i-=8)// PARA CERRAR LA ANIMACION
 182:	28 97       	sbiw	r28, 0x08	; 8
 184:	dd 23       	and	r29, r29
 186:	b4 f7       	brge	.-20     	; 0x174 <animacion2+0x32>
	{
		filas(i,5,PORT,ANIMACION2);
	}
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	08 95       	ret

00000196 <hola>:

void hola(char PORT[], char MENSAJE[]) {
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	7c 01       	movw	r14, r24
 1a4:	8b 01       	movw	r16, r22
	//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
	for (int i=0;i<32;i++)
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
 1aa:	08 c0       	rjmp	.+16     	; 0x1bc <hola+0x26>
	{
		filas(i,10,PORT,MENSAJE);
 1ac:	98 01       	movw	r18, r16
 1ae:	a7 01       	movw	r20, r14
 1b0:	6a e0       	ldi	r22, 0x0A	; 10
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	ce 01       	movw	r24, r28
 1b6:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
	}
}

void hola(char PORT[], char MENSAJE[]) {
	//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
	for (int i=0;i<32;i++)
 1ba:	21 96       	adiw	r28, 0x01	; 1
 1bc:	c0 32       	cpi	r28, 0x20	; 32
 1be:	d1 05       	cpc	r29, r1
 1c0:	ac f3       	brlt	.-22     	; 0x1ac <hola+0x16>
	{
		filas(i,10,PORT,MENSAJE);
	}
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	08 95       	ret

000001d0 <squid_game>:

void squid_game(char PORT[], char SQUID_GAME[]) {
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	7c 01       	movw	r14, r24
 1de:	8b 01       	movw	r16, r22
	PORTC = ((1<<3));
 1e0:	88 e0       	ldi	r24, 0x08	; 8
 1e2:	88 b9       	out	0x08, r24	; 8
	//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
	for (int i=0;i<80;i++)
 1e4:	c0 e0       	ldi	r28, 0x00	; 0
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	08 c0       	rjmp	.+16     	; 0x1fa <squid_game+0x2a>
	{
		filas(i,10,PORT,SQUID_GAME);
 1ea:	98 01       	movw	r18, r16
 1ec:	a7 01       	movw	r20, r14
 1ee:	6a e0       	ldi	r22, 0x0A	; 10
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	ce 01       	movw	r24, r28
 1f4:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
}

void squid_game(char PORT[], char SQUID_GAME[]) {
	PORTC = ((1<<3));
	//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
	for (int i=0;i<80;i++)
 1f8:	21 96       	adiw	r28, 0x01	; 1
 1fa:	c0 35       	cpi	r28, 0x50	; 80
 1fc:	d1 05       	cpc	r29, r1
 1fe:	ac f3       	brlt	.-22     	; 0x1ea <squid_game+0x1a>
	{
		filas(i,10,PORT,SQUID_GAME);
	}
	PORTC = ((0<<3));
 200:	18 b8       	out	0x08, r1	; 8
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	ff 90       	pop	r15
 20c:	ef 90       	pop	r14
 20e:	08 95       	ret

00000210 <numero3>:

void numero3(char PORT[], char NUMERO3[]){
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	7c 01       	movw	r14, r24
 21e:	8b 01       	movw	r16, r22
	for (int i=0;i<8;i+=8)
 220:	c0 e0       	ldi	r28, 0x00	; 0
 222:	d0 e0       	ldi	r29, 0x00	; 0
 224:	08 c0       	rjmp	.+16     	; 0x236 <numero3+0x26>
	{
		filas(i,10,PORT,NUMERO3);
 226:	98 01       	movw	r18, r16
 228:	a7 01       	movw	r20, r14
 22a:	6a e0       	ldi	r22, 0x0A	; 10
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	ce 01       	movw	r24, r28
 230:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
	}
	PORTC = ((0<<3));
}

void numero3(char PORT[], char NUMERO3[]){
	for (int i=0;i<8;i+=8)
 234:	28 96       	adiw	r28, 0x08	; 8
 236:	c8 30       	cpi	r28, 0x08	; 8
 238:	d1 05       	cpc	r29, r1
 23a:	ac f3       	brlt	.-22     	; 0x226 <numero3+0x16>
	{
		filas(i,10,PORT,NUMERO3);
	}
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	08 95       	ret

0000024a <numero4>:

void numero4(char PORT[], char NUMERO4[]){
 24a:	ef 92       	push	r14
 24c:	ff 92       	push	r15
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	7c 01       	movw	r14, r24
 258:	8b 01       	movw	r16, r22
	for (int i=0;i<8;i+=8)
 25a:	c0 e0       	ldi	r28, 0x00	; 0
 25c:	d0 e0       	ldi	r29, 0x00	; 0
 25e:	08 c0       	rjmp	.+16     	; 0x270 <numero4+0x26>
	{
		filas(i,10,PORT,NUMERO4);
 260:	98 01       	movw	r18, r16
 262:	a7 01       	movw	r20, r14
 264:	6a e0       	ldi	r22, 0x0A	; 10
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	ce 01       	movw	r24, r28
 26a:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
		filas(i,10,PORT,NUMERO3);
	}
}

void numero4(char PORT[], char NUMERO4[]){
	for (int i=0;i<8;i+=8)
 26e:	28 96       	adiw	r28, 0x08	; 8
 270:	c8 30       	cpi	r28, 0x08	; 8
 272:	d1 05       	cpc	r29, r1
 274:	ac f3       	brlt	.-22     	; 0x260 <numero4+0x16>
	{
		filas(i,10,PORT,NUMERO4);
	}
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	ff 90       	pop	r15
 280:	ef 90       	pop	r14
 282:	08 95       	ret

00000284 <main>:

int main(void)
{
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	c8 5d       	subi	r28, 0xD8	; 216
 28e:	d1 09       	sbc	r29, r1
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
	// PARA EL DATO
	DDRB = 0B11111111; // SALIDA TODO EL PUERTO B
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	84 b9       	out	0x04, r24	; 4
	
	// PARA EL DESPLAZMIENTO
	DDRD = 0B11111111; // SALIDAS TODO EL PUERTO D
 29e:	8a b9       	out	0x0a, r24	; 10
	
	// PARA LAS BOTONERAS
	DDRC |= (0<<0)|(0<<1)|(0<<2); //ENTRADAS PARA LOS PUERTOS C0,C1,C2
 2a0:	87 b1       	in	r24, 0x07	; 7
 2a2:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1<<3)|(1<<4); //SALIDA PARA EL PUERTO C3 MUSICA RED LIGHT GREEN LIGHT, C4 CLICK
 2a4:	87 b1       	in	r24, 0x07	; 7
 2a6:	88 61       	ori	r24, 0x18	; 24
 2a8:	87 b9       	out	0x07, r24	; 7
		
	//UART_init();
	
	// VA CON EL DESPLAZMIENTO
	char PORT[8] =  {1,2,4,8,16,32,64,128};//VALORES DE PINES DEL PORTD
 2aa:	88 e0       	ldi	r24, 0x08	; 8
 2ac:	e0 e0       	ldi	r30, 0x00	; 0
 2ae:	f1 e0       	ldi	r31, 0x01	; 1
 2b0:	de 01       	movw	r26, r28
 2b2:	11 96       	adiw	r26, 0x01	; 1
 2b4:	01 90       	ld	r0, Z+
 2b6:	0d 92       	st	X+, r0
 2b8:	8a 95       	dec	r24
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0x30>
	//{PD0,PD1,PD2,PD3,PD4,PD5,PD6,PD7}
	
	 
	char SQUID_GAME[]={0x0, 0x44, 0x4A, 0x4A, 0x4A, 0x4A, 0x32, 0x0, //S
 2bc:	88 e5       	ldi	r24, 0x58	; 88
 2be:	e8 e0       	ldi	r30, 0x08	; 8
 2c0:	f1 e0       	ldi	r31, 0x01	; 1
 2c2:	de 01       	movw	r26, r28
 2c4:	19 96       	adiw	r26, 0x09	; 9
 2c6:	01 90       	ld	r0, Z+
 2c8:	0d 92       	st	X+, r0
 2ca:	8a 95       	dec	r24
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x42>
		0x0, 0x7E, 0x04, 0x08, 0x08, 0x04, 0x7E, 0x0, //M
		0x0, 0x7E, 0x4A, 0x4A, 0x4A, 0x42, 0x42, 0x0, //E
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, //ESPACIO
	}; 
	
	char MENSAJE[]={0x0, 0x7e, 0x7e, 0x18, 0x18, 0x7e, 0x7e, 0x0, //H
 2ce:	88 e2       	ldi	r24, 0x28	; 40
 2d0:	e0 e6       	ldi	r30, 0x60	; 96
 2d2:	f1 e0       	ldi	r31, 0x01	; 1
 2d4:	de 01       	movw	r26, r28
 2d6:	af 59       	subi	r26, 0x9F	; 159
 2d8:	bf 4f       	sbci	r27, 0xFF	; 255
 2da:	01 90       	ld	r0, Z+
 2dc:	0d 92       	st	X+, r0
 2de:	8a 95       	dec	r24
 2e0:	e1 f7       	brne	.-8      	; 0x2da <main+0x56>
		0x0, 0x7e, 0x7e, 0x66, 0x66, 0x7e, 0x7e, 0x0, //O
		0x0, 0x7e, 0x7e, 0x60, 0x60, 0x60, 0x60, 0x0, //L
		0x0, 0x7e, 0x7e, 0x16, 0x16, 0x7e, 0x7e, 0x0, //A
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}; //ESPACIO
	
	char ANIMACION1[] = {
 2e2:	80 e2       	ldi	r24, 0x20	; 32
 2e4:	e8 e8       	ldi	r30, 0x88	; 136
 2e6:	f1 e0       	ldi	r31, 0x01	; 1
 2e8:	de 01       	movw	r26, r28
 2ea:	a7 57       	subi	r26, 0x77	; 119
 2ec:	bf 4f       	sbci	r27, 0xFF	; 255
 2ee:	01 90       	ld	r0, Z+
 2f0:	0d 92       	st	X+, r0
 2f2:	8a 95       	dec	r24
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <main+0x6a>
		0x0, 0x0, 0x24, 0x0, 0x0, 0x24, 0x0, 0x0, // CENTRO 2
		0x0, 0x42, 0x0, 0x0, 0x0, 0x0, 0x42, 0x0, // CENTRO 3
		0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81 // CENTRO 4
	};
	
	char ANIMACION2[] = {
 2f6:	80 e2       	ldi	r24, 0x20	; 32
 2f8:	e8 ea       	ldi	r30, 0xA8	; 168
 2fa:	f1 e0       	ldi	r31, 0x01	; 1
 2fc:	de 01       	movw	r26, r28
 2fe:	a7 55       	subi	r26, 0x57	; 87
 300:	bf 4f       	sbci	r27, 0xFF	; 255
 302:	01 90       	ld	r0, Z+
 304:	0d 92       	st	X+, r0
 306:	8a 95       	dec	r24
 308:	e1 f7       	brne	.-8      	; 0x302 <main+0x7e>
		0x0, 0x0, 0x3C, 0x24, 0x24, 0x3C, 0x0, 0x0, // CENTRO 2
		0x0, 0x7E, 0x42, 0x42, 0x42, 0x42, 0x7E, 0x0, // CENTRO 3
		0xFF, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xFF // CENTRO 4
	};
	
	char NUMERO3[] = {
 30a:	88 e0       	ldi	r24, 0x08	; 8
 30c:	e8 ec       	ldi	r30, 0xC8	; 200
 30e:	f1 e0       	ldi	r31, 0x01	; 1
 310:	de 01       	movw	r26, r28
 312:	a7 53       	subi	r26, 0x37	; 55
 314:	bf 4f       	sbci	r27, 0xFF	; 255
 316:	01 90       	ld	r0, Z+
 318:	0d 92       	st	X+, r0
 31a:	8a 95       	dec	r24
 31c:	e1 f7       	brne	.-8      	; 0x316 <main+0x92>
		0x00, 0x00, 0x11, 0x15, 0x15, 0x1F, 0xA0, 0x40, // CON FLECHAS
		//0x0, 0x0, 0x11, 0x15, 0x15, 0x1F, 0x0, 0x0 // SIN FLECHAS
	};
	
	char NUMERO4[] = {
 31e:	88 e0       	ldi	r24, 0x08	; 8
 320:	e0 ed       	ldi	r30, 0xD0	; 208
 322:	f1 e0       	ldi	r31, 0x01	; 1
 324:	de 01       	movw	r26, r28
 326:	af 52       	subi	r26, 0x2F	; 47
 328:	bf 4f       	sbci	r27, 0xFF	; 255
 32a:	01 90       	ld	r0, Z+
 32c:	0d 92       	st	X+, r0
 32e:	8a 95       	dec	r24
 330:	e1 f7       	brne	.-8      	; 0x32a <main+0xa6>
	
	
	
	
	int inicio = 0;
	int valor3 = 1;
 332:	01 e0       	ldi	r16, 0x01	; 1
 334:	10 e0       	ldi	r17, 0x00	; 0
	};
	
	
	
	
	int inicio = 0;
 336:	e1 2c       	mov	r14, r1
 338:	f1 2c       	mov	r15, r1
 33a:	14 c0       	rjmp	.+40     	; 0x364 <main+0xe0>
	int jugadores = 0;
	
	while(1){
		
		while (!inicio) {
			animacion1(PORT,ANIMACION1);
 33c:	be 01       	movw	r22, r28
 33e:	67 57       	subi	r22, 0x77	; 119
 340:	7f 4f       	sbci	r23, 0xFF	; 255
 342:	ce 01       	movw	r24, r28
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	0e 94 77 00 	call	0xee	; 0xee <animacion1>
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
 34a:	86 b1       	in	r24, 0x06	; 6
 34c:	81 34       	cpi	r24, 0x41	; 65
 34e:	71 f0       	breq	.+28     	; 0x36c <main+0xe8>
				inicio = 1;
				break;
			}
			animacion2(PORT,ANIMACION2);
 350:	be 01       	movw	r22, r28
 352:	67 55       	subi	r22, 0x57	; 87
 354:	7f 4f       	sbci	r23, 0xFF	; 255
 356:	ce 01       	movw	r24, r28
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	0e 94 a1 00 	call	0x142	; 0x142 <animacion2>
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
 35e:	86 b1       	in	r24, 0x06	; 6
 360:	81 34       	cpi	r24, 0x41	; 65
 362:	41 f0       	breq	.+16     	; 0x374 <main+0xf0>
	int valor4 = 1;
	int jugadores = 0;
	
	while(1){
		
		while (!inicio) {
 364:	e1 14       	cp	r14, r1
 366:	f1 04       	cpc	r15, r1
 368:	41 f4       	brne	.+16     	; 0x37a <main+0xf6>
 36a:	e8 cf       	rjmp	.-48     	; 0x33c <main+0xb8>
			animacion1(PORT,ANIMACION1);
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
				inicio = 1;
 36c:	ee 24       	eor	r14, r14
 36e:	e3 94       	inc	r14
 370:	f1 2c       	mov	r15, r1
 372:	03 c0       	rjmp	.+6      	; 0x37a <main+0xf6>
				break;
			}
			animacion2(PORT,ANIMACION2);
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
				inicio = 1;
 374:	ee 24       	eor	r14, r14
 376:	e3 94       	inc	r14
 378:	f1 2c       	mov	r15, r1
				break;
			}
		}
		
		squid_game(PORT,SQUID_GAME);
 37a:	be 01       	movw	r22, r28
 37c:	67 5f       	subi	r22, 0xF7	; 247
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	ce 01       	movw	r24, r28
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <squid_game>
		DERECHA: 0B 0100 0010
		IZQUIERDA: 0B 0100 0100 */
		
		//NUMERO 3 CON FLECHA A LA DERECHA
		jugadores = 0;
		while (valor3) {
 388:	34 c0       	rjmp	.+104    	; 0x3f2 <main+0x16e>
			numero3(PORT,NUMERO3);
 38a:	be 01       	movw	r22, r28
 38c:	67 53       	subi	r22, 0x37	; 55
 38e:	7f 4f       	sbci	r23, 0xFF	; 255
 390:	ce 01       	movw	r24, r28
 392:	01 96       	adiw	r24, 0x01	; 1
 394:	0e 94 08 01 	call	0x210	; 0x210 <numero3>
			// SI PRESIONA PARA LA DERECHA
			if (PINC == 0x42) {
 398:	86 b1       	in	r24, 0x06	; 6
 39a:	82 34       	cpi	r24, 0x42	; 66
 39c:	21 f5       	brne	.+72     	; 0x3e6 <main+0x162>
				// SONIDO DEL CLICK
				PORTC = ((1<<4));
 39e:	80 e1       	ldi	r24, 0x10	; 16
 3a0:	88 b9       	out	0x08, r24	; 8
 3a2:	83 ef       	ldi	r24, 0xF3	; 243
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <main+0x122>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <main+0x128>
 3ac:	00 00       	nop
				_delay_ms(0.25);
				PORTC = ((0<<4));
 3ae:	18 b8       	out	0x08, r1	; 8
				while (valor4) {
 3b0:	0d c0       	rjmp	.+26     	; 0x3cc <main+0x148>
					numero4(PORT,NUMERO4);
					// SI PRESIONA PARA LA IZQUIERDA
					if (PINC == 0x44) {
						// SONIDO DEL CLICK
						PORTC = ((1<<4));
 3b2:	80 e1       	ldi	r24, 0x10	; 16
 3b4:	88 b9       	out	0x08, r24	; 8
 3b6:	83 ef       	ldi	r24, 0xF3	; 243
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <main+0x136>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0x13c>
 3c0:	00 00       	nop
						_delay_ms(0.25);
						PORTC = ((0<<4));
 3c2:	18 b8       	out	0x08, r1	; 8
						break;
 3c4:	10 c0       	rjmp	.+32     	; 0x3e6 <main+0x162>
					}
					// SI SELECCIONA LA OPCION DE 4 JUGADORES
					if (PINC == 0x41) {
 3c6:	86 b1       	in	r24, 0x06	; 6
 3c8:	81 34       	cpi	r24, 0x41	; 65
 3ca:	59 f0       	breq	.+22     	; 0x3e2 <main+0x15e>
				// SONIDO DEL CLICK
				PORTC = ((1<<4));
				_delay_ms(0.25);
				PORTC = ((0<<4));
				while (valor4) {
					numero4(PORT,NUMERO4);
 3cc:	be 01       	movw	r22, r28
 3ce:	6f 52       	subi	r22, 0x2F	; 47
 3d0:	7f 4f       	sbci	r23, 0xFF	; 255
 3d2:	ce 01       	movw	r24, r28
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	0e 94 25 01 	call	0x24a	; 0x24a <numero4>
					// SI PRESIONA PARA LA IZQUIERDA
					if (PINC == 0x44) {
 3da:	86 b1       	in	r24, 0x06	; 6
 3dc:	84 34       	cpi	r24, 0x44	; 68
 3de:	99 f7       	brne	.-26     	; 0x3c6 <main+0x142>
 3e0:	e8 cf       	rjmp	.-48     	; 0x3b2 <main+0x12e>
						break;
					}
					// SI SELECCIONA LA OPCION DE 4 JUGADORES
					if (PINC == 0x41) {
						jugadores = 4;
						valor3 = 0;
 3e2:	00 e0       	ldi	r16, 0x00	; 0
 3e4:	10 e0       	ldi	r17, 0x00	; 0
						break;
					}
				}
			}
			// SI SELECCIONA LA OPCION DE 3 JUGADORES
			if (PINC == 0x41 && valor3) {
 3e6:	86 b1       	in	r24, 0x06	; 6
 3e8:	81 34       	cpi	r24, 0x41	; 65
 3ea:	19 f4       	brne	.+6      	; 0x3f2 <main+0x16e>
 3ec:	01 15       	cp	r16, r1
 3ee:	11 05       	cpc	r17, r1
 3f0:	19 f4       	brne	.+6      	; 0x3f8 <main+0x174>
		DERECHA: 0B 0100 0010
		IZQUIERDA: 0B 0100 0100 */
		
		//NUMERO 3 CON FLECHA A LA DERECHA
		jugadores = 0;
		while (valor3) {
 3f2:	01 15       	cp	r16, r1
 3f4:	11 05       	cpc	r17, r1
 3f6:	49 f6       	brne	.-110    	; 0x38a <main+0x106>
			}
		}
		valor3 = 0;
		
		
		hola(PORT,MENSAJE);
 3f8:	be 01       	movw	r22, r28
 3fa:	6f 59       	subi	r22, 0x9F	; 159
 3fc:	7f 4f       	sbci	r23, 0xFF	; 255
 3fe:	ce 01       	movw	r24, r28
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	0e 94 cb 00 	call	0x196	; 0x196 <hola>
			if (PINC == 0x41 && valor3) {
				jugadores = 3;
				break;
			}
		}
		valor3 = 0;
 406:	00 e0       	ldi	r16, 0x00	; 0
 408:	10 e0       	ldi	r17, 0x00	; 0
			
			while (PIND == 0x6){
			}	
		}*/
		
	}
 40a:	ac cf       	rjmp	.-168    	; 0x364 <main+0xe0>

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
