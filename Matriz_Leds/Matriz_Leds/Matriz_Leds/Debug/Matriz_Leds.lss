
Matriz_Leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  00000af6  00000b6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000c16  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c48  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019c5  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000825  00000000  00000000  00002705  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009dc  00000000  00000000  00002f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  00003908  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000544  00000000  00000000  00003c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015e6  00000000  00000000  0000417c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00005762  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ef       	ldi	r30, 0xF6	; 246
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3a       	cpi	r26, 0xAC	; 172
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4e 02 	call	0x49c	; 0x49c <main>
  8e:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <filas>:
unsigned char numeroAleatorio(){
	return random()%100; //VALOR ALEATORIO ENTRE [0-100)
}

void semilla(unsigned char valor){
	srandom(valor);
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	ec 01       	movw	r28, r24
  a0:	00 e0       	ldi	r16, 0x00	; 0
  a2:	10 e0       	ldi	r17, 0x00	; 0
  a4:	1c c0       	rjmp	.+56     	; 0xde <filas+0x48>
  a6:	da 01       	movw	r26, r20
  a8:	ae 0f       	add	r26, r30
  aa:	bf 1f       	adc	r27, r31
  ac:	9c 91       	ld	r25, X
  ae:	9b b9       	out	0x0b, r25	; 11
  b0:	df 01       	movw	r26, r30
  b2:	ac 0f       	add	r26, r28
  b4:	bd 1f       	adc	r27, r29
  b6:	a2 0f       	add	r26, r18
  b8:	b3 1f       	adc	r27, r19
  ba:	9c 91       	ld	r25, X
  bc:	90 95       	com	r25
  be:	95 b9       	out	0x05, r25	; 5
  c0:	83 ef       	ldi	r24, 0xF3	; 243
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <filas+0x2e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <filas+0x34>
  ca:	00 00       	nop
  cc:	31 96       	adiw	r30, 0x01	; 1
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <filas+0x3e>
  d0:	e0 e0       	ldi	r30, 0x00	; 0
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e8 30       	cpi	r30, 0x08	; 8
  d6:	f1 05       	cpc	r31, r1
  d8:	34 f3       	brlt	.-52     	; 0xa6 <filas+0x10>
  da:	0f 5f       	subi	r16, 0xFF	; 255
  dc:	1f 4f       	sbci	r17, 0xFF	; 255
  de:	06 17       	cp	r16, r22
  e0:	17 07       	cpc	r17, r23
  e2:	b4 f3       	brlt	.-20     	; 0xd0 <filas+0x3a>
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	08 95       	ret

000000ee <animacion1>:
  ee:	ef 92       	push	r14
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	8c 01       	movw	r16, r24
  fc:	7b 01       	movw	r14, r22
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	d0 e0       	ldi	r29, 0x00	; 0
 102:	08 c0       	rjmp	.+16     	; 0x114 <animacion1+0x26>
 104:	97 01       	movw	r18, r14
 106:	a8 01       	movw	r20, r16
 108:	65 e0       	ldi	r22, 0x05	; 5
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	ce 01       	movw	r24, r28
 10e:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
 112:	28 96       	adiw	r28, 0x08	; 8
 114:	c9 31       	cpi	r28, 0x19	; 25
 116:	d1 05       	cpc	r29, r1
 118:	ac f3       	brlt	.-22     	; 0x104 <animacion1+0x16>
 11a:	c8 e1       	ldi	r28, 0x18	; 24
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	08 c0       	rjmp	.+16     	; 0x130 <animacion1+0x42>
 120:	97 01       	movw	r18, r14
 122:	a8 01       	movw	r20, r16
 124:	65 e0       	ldi	r22, 0x05	; 5
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	ce 01       	movw	r24, r28
 12a:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
 12e:	28 97       	sbiw	r28, 0x08	; 8
 130:	dd 23       	and	r29, r29
 132:	b4 f7       	brge	.-20     	; 0x120 <animacion1+0x32>
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	ff 90       	pop	r15
 13e:	ef 90       	pop	r14
 140:	08 95       	ret

00000142 <animacion2>:
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	8c 01       	movw	r16, r24
 150:	7b 01       	movw	r14, r22
 152:	c0 e0       	ldi	r28, 0x00	; 0
 154:	d0 e0       	ldi	r29, 0x00	; 0
 156:	08 c0       	rjmp	.+16     	; 0x168 <animacion2+0x26>
 158:	97 01       	movw	r18, r14
 15a:	a8 01       	movw	r20, r16
 15c:	65 e0       	ldi	r22, 0x05	; 5
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	ce 01       	movw	r24, r28
 162:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
 166:	28 96       	adiw	r28, 0x08	; 8
 168:	c9 31       	cpi	r28, 0x19	; 25
 16a:	d1 05       	cpc	r29, r1
 16c:	ac f3       	brlt	.-22     	; 0x158 <animacion2+0x16>
 16e:	c8 e1       	ldi	r28, 0x18	; 24
 170:	d0 e0       	ldi	r29, 0x00	; 0
 172:	08 c0       	rjmp	.+16     	; 0x184 <animacion2+0x42>
 174:	97 01       	movw	r18, r14
 176:	a8 01       	movw	r20, r16
 178:	65 e0       	ldi	r22, 0x05	; 5
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	ce 01       	movw	r24, r28
 17e:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
 182:	28 97       	sbiw	r28, 0x08	; 8
 184:	dd 23       	and	r29, r29
 186:	b4 f7       	brge	.-20     	; 0x174 <animacion2+0x32>
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	08 95       	ret

00000196 <hola>:
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	7c 01       	movw	r14, r24
 1a4:	8b 01       	movw	r16, r22
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
 1aa:	08 c0       	rjmp	.+16     	; 0x1bc <hola+0x26>
 1ac:	98 01       	movw	r18, r16
 1ae:	a7 01       	movw	r20, r14
 1b0:	6a e0       	ldi	r22, 0x0A	; 10
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	ce 01       	movw	r24, r28
 1b6:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
 1ba:	21 96       	adiw	r28, 0x01	; 1
 1bc:	c0 32       	cpi	r28, 0x20	; 32
 1be:	d1 05       	cpc	r29, r1
 1c0:	ac f3       	brlt	.-22     	; 0x1ac <hola+0x16>
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	08 95       	ret

000001d0 <numero>:
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	7c 01       	movw	r14, r24
 1de:	8b 01       	movw	r16, r22
 1e0:	c0 e0       	ldi	r28, 0x00	; 0
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
 1e4:	08 c0       	rjmp	.+16     	; 0x1f6 <numero+0x26>
 1e6:	98 01       	movw	r18, r16
 1e8:	a7 01       	movw	r20, r14
 1ea:	6a e0       	ldi	r22, 0x0A	; 10
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	ce 01       	movw	r24, r28
 1f0:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
 1f4:	28 96       	adiw	r28, 0x08	; 8
 1f6:	c8 30       	cpi	r28, 0x08	; 8
 1f8:	d1 05       	cpc	r29, r1
 1fa:	ac f3       	brlt	.-22     	; 0x1e6 <numero+0x16>
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	ff 90       	pop	r15
 206:	ef 90       	pop	r14
 208:	08 95       	ret

0000020a <uno>:
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	7c 01       	movw	r14, r24
 218:	8b 01       	movw	r16, r22
 21a:	c0 e0       	ldi	r28, 0x00	; 0
 21c:	d0 e0       	ldi	r29, 0x00	; 0
 21e:	08 c0       	rjmp	.+16     	; 0x230 <uno+0x26>
 220:	98 01       	movw	r18, r16
 222:	a7 01       	movw	r20, r14
 224:	6a e0       	ldi	r22, 0x0A	; 10
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	ce 01       	movw	r24, r28
 22a:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
 22e:	28 96       	adiw	r28, 0x08	; 8
 230:	c8 30       	cpi	r28, 0x08	; 8
 232:	d1 05       	cpc	r29, r1
 234:	ac f3       	brlt	.-22     	; 0x220 <uno+0x16>
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	ff 90       	pop	r15
 240:	ef 90       	pop	r14
 242:	08 95       	ret

00000244 <dos>:
 244:	ef 92       	push	r14
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	7c 01       	movw	r14, r24
 252:	8b 01       	movw	r16, r22
 254:	c0 e0       	ldi	r28, 0x00	; 0
 256:	d0 e0       	ldi	r29, 0x00	; 0
 258:	08 c0       	rjmp	.+16     	; 0x26a <dos+0x26>
 25a:	98 01       	movw	r18, r16
 25c:	a7 01       	movw	r20, r14
 25e:	6a e0       	ldi	r22, 0x0A	; 10
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	ce 01       	movw	r24, r28
 264:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
 268:	28 96       	adiw	r28, 0x08	; 8
 26a:	c8 30       	cpi	r28, 0x08	; 8
 26c:	d1 05       	cpc	r29, r1
 26e:	ac f3       	brlt	.-22     	; 0x25a <dos+0x16>
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	08 95       	ret

0000027e <tres>:
 27e:	ef 92       	push	r14
 280:	ff 92       	push	r15
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	7c 01       	movw	r14, r24
 28c:	8b 01       	movw	r16, r22
 28e:	c0 e0       	ldi	r28, 0x00	; 0
 290:	d0 e0       	ldi	r29, 0x00	; 0
 292:	08 c0       	rjmp	.+16     	; 0x2a4 <tres+0x26>
 294:	98 01       	movw	r18, r16
 296:	a7 01       	movw	r20, r14
 298:	6a e0       	ldi	r22, 0x0A	; 10
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	ce 01       	movw	r24, r28
 29e:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
 2a2:	28 96       	adiw	r28, 0x08	; 8
 2a4:	c8 30       	cpi	r28, 0x08	; 8
 2a6:	d1 05       	cpc	r29, r1
 2a8:	ac f3       	brlt	.-22     	; 0x294 <tres+0x16>
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	ff 90       	pop	r15
 2b4:	ef 90       	pop	r14
 2b6:	08 95       	ret

000002b8 <cuatro>:
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	7c 01       	movw	r14, r24
 2c6:	8b 01       	movw	r16, r22
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
 2ca:	d0 e0       	ldi	r29, 0x00	; 0
 2cc:	08 c0       	rjmp	.+16     	; 0x2de <cuatro+0x26>
 2ce:	98 01       	movw	r18, r16
 2d0:	a7 01       	movw	r20, r14
 2d2:	6a e0       	ldi	r22, 0x0A	; 10
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	ce 01       	movw	r24, r28
 2d8:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
 2dc:	28 96       	adiw	r28, 0x08	; 8
 2de:	c8 30       	cpi	r28, 0x08	; 8
 2e0:	d1 05       	cpc	r29, r1
 2e2:	ac f3       	brlt	.-22     	; 0x2ce <cuatro+0x16>
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	ff 90       	pop	r15
 2ee:	ef 90       	pop	r14
 2f0:	08 95       	ret

000002f2 <esquina>:
 2f2:	ef 92       	push	r14
 2f4:	ff 92       	push	r15
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	7c 01       	movw	r14, r24
 300:	8b 01       	movw	r16, r22
 302:	c0 e0       	ldi	r28, 0x00	; 0
 304:	d0 e0       	ldi	r29, 0x00	; 0
 306:	08 c0       	rjmp	.+16     	; 0x318 <esquina+0x26>
 308:	98 01       	movw	r18, r16
 30a:	a7 01       	movw	r20, r14
 30c:	64 e6       	ldi	r22, 0x64	; 100
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	ce 01       	movw	r24, r28
 312:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
 316:	28 96       	adiw	r28, 0x08	; 8
 318:	c9 30       	cpi	r28, 0x09	; 9
 31a:	d1 05       	cpc	r29, r1
 31c:	ac f3       	brlt	.-22     	; 0x308 <esquina+0x16>
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	ff 90       	pop	r15
 328:	ef 90       	pop	r14
 32a:	08 95       	ret

0000032c <numeros_sorteo>:
}

void numeros_sorteo(char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
 32c:	af 92       	push	r10
 32e:	bf 92       	push	r11
 330:	cf 92       	push	r12
 332:	df 92       	push	r13
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	ec 01       	movw	r28, r24
 342:	5b 01       	movw	r10, r22
 344:	7a 01       	movw	r14, r20
 346:	69 01       	movw	r12, r18
	dos(PORT,DOS);_delay_ms(20);
 348:	ba 01       	movw	r22, r20
 34a:	0e 94 22 01 	call	0x244	; 0x244 <dos>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34e:	8f e3       	ldi	r24, 0x3F	; 63
 350:	9c e9       	ldi	r25, 0x9C	; 156
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <numeros_sorteo+0x26>
 356:	00 c0       	rjmp	.+0      	; 0x358 <numeros_sorteo+0x2c>
 358:	00 00       	nop
	uno(PORT,UNO);_delay_ms(20);
 35a:	b5 01       	movw	r22, r10
 35c:	ce 01       	movw	r24, r28
 35e:	0e 94 05 01 	call	0x20a	; 0x20a <uno>
 362:	8f e3       	ldi	r24, 0x3F	; 63
 364:	9c e9       	ldi	r25, 0x9C	; 156
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <numeros_sorteo+0x3a>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <numeros_sorteo+0x40>
 36c:	00 00       	nop
	cuatro(PORT,CUATRO);_delay_ms(20);
 36e:	b8 01       	movw	r22, r16
 370:	ce 01       	movw	r24, r28
 372:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <cuatro>
 376:	8f e3       	ldi	r24, 0x3F	; 63
 378:	9c e9       	ldi	r25, 0x9C	; 156
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <numeros_sorteo+0x4e>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <numeros_sorteo+0x54>
 380:	00 00       	nop
	tres(PORT,TRES);_delay_ms(20);
 382:	b6 01       	movw	r22, r12
 384:	ce 01       	movw	r24, r28
 386:	0e 94 3f 01 	call	0x27e	; 0x27e <tres>
 38a:	8f e3       	ldi	r24, 0x3F	; 63
 38c:	9c e9       	ldi	r25, 0x9C	; 156
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <numeros_sorteo+0x62>
 392:	00 c0       	rjmp	.+0      	; 0x394 <numeros_sorteo+0x68>
 394:	00 00       	nop
	uno(PORT,UNO);_delay_ms(20);
 396:	b5 01       	movw	r22, r10
 398:	ce 01       	movw	r24, r28
 39a:	0e 94 05 01 	call	0x20a	; 0x20a <uno>
 39e:	8f e3       	ldi	r24, 0x3F	; 63
 3a0:	9c e9       	ldi	r25, 0x9C	; 156
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <numeros_sorteo+0x76>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <numeros_sorteo+0x7c>
 3a8:	00 00       	nop
	tres(PORT,TRES);_delay_ms(20);
 3aa:	b6 01       	movw	r22, r12
 3ac:	ce 01       	movw	r24, r28
 3ae:	0e 94 3f 01 	call	0x27e	; 0x27e <tres>
 3b2:	8f e3       	ldi	r24, 0x3F	; 63
 3b4:	9c e9       	ldi	r25, 0x9C	; 156
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <numeros_sorteo+0x8a>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <numeros_sorteo+0x90>
 3bc:	00 00       	nop
	dos(PORT,DOS);_delay_ms(20);
 3be:	b7 01       	movw	r22, r14
 3c0:	ce 01       	movw	r24, r28
 3c2:	0e 94 22 01 	call	0x244	; 0x244 <dos>
 3c6:	8f e3       	ldi	r24, 0x3F	; 63
 3c8:	9c e9       	ldi	r25, 0x9C	; 156
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <numeros_sorteo+0x9e>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <numeros_sorteo+0xa4>
 3d0:	00 00       	nop
}
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	1f 91       	pop	r17
 3d8:	0f 91       	pop	r16
 3da:	ff 90       	pop	r15
 3dc:	ef 90       	pop	r14
 3de:	df 90       	pop	r13
 3e0:	cf 90       	pop	r12
 3e2:	bf 90       	pop	r11
 3e4:	af 90       	pop	r10
 3e6:	08 95       	ret

000003e8 <seleccion_orden>:

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
 3e8:	af 92       	push	r10
 3ea:	bf 92       	push	r11
 3ec:	cf 92       	push	r12
 3ee:	df 92       	push	r13
 3f0:	ef 92       	push	r14
 3f2:	ff 92       	push	r15
 3f4:	0f 93       	push	r16
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	eb 01       	movw	r28, r22
 3fe:	5a 01       	movw	r10, r20
 400:	69 01       	movw	r12, r18
	switch(valor){
 402:	82 30       	cpi	r24, 0x02	; 2
 404:	91 05       	cpc	r25, r1
 406:	f1 f0       	breq	.+60     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 408:	1c f4       	brge	.+6      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	71 f0       	breq	.+28     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 40e:	3b c0       	rjmp	.+118    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 410:	83 30       	cpi	r24, 0x03	; 3
 412:	91 05       	cpc	r25, r1
 414:	29 f1       	breq	.+74     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 416:	04 97       	sbiw	r24, 0x04	; 4
 418:	89 f1       	breq	.+98     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 41a:	35 c0       	rjmp	.+106    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		case 1:
			for (int i=0; i<20; i++){
				uno(PORT,UNO);
 41c:	b5 01       	movw	r22, r10
 41e:	ce 01       	movw	r24, r28
 420:	0e 94 05 01 	call	0x20a	; 0x20a <uno>
}

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
		case 1:
			for (int i=0; i<20; i++){
 424:	0f 5f       	subi	r16, 0xFF	; 255
 426:	1f 4f       	sbci	r17, 0xFF	; 255
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	tres(PORT,TRES);_delay_ms(20);
	dos(PORT,DOS);_delay_ms(20);
}

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
 42a:	00 e0       	ldi	r16, 0x00	; 0
 42c:	10 e0       	ldi	r17, 0x00	; 0
		case 1:
			for (int i=0; i<20; i++){
 42e:	04 31       	cpi	r16, 0x14	; 20
 430:	11 05       	cpc	r17, r1
 432:	a4 f3       	brlt	.-24     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 434:	28 c0       	rjmp	.+80     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
				uno(PORT,UNO);
			}
			break;
		case 2:
			for (int i=0; i<20; i++){
				dos(PORT,DOS);
 436:	b6 01       	movw	r22, r12
 438:	ce 01       	movw	r24, r28
 43a:	0e 94 22 01 	call	0x244	; 0x244 <dos>
			for (int i=0; i<20; i++){
				uno(PORT,UNO);
			}
			break;
		case 2:
			for (int i=0; i<20; i++){
 43e:	0f 5f       	subi	r16, 0xFF	; 255
 440:	1f 4f       	sbci	r17, 0xFF	; 255
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
	tres(PORT,TRES);_delay_ms(20);
	dos(PORT,DOS);_delay_ms(20);
}

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
 444:	00 e0       	ldi	r16, 0x00	; 0
 446:	10 e0       	ldi	r17, 0x00	; 0
			for (int i=0; i<20; i++){
				uno(PORT,UNO);
			}
			break;
		case 2:
			for (int i=0; i<20; i++){
 448:	04 31       	cpi	r16, 0x14	; 20
 44a:	11 05       	cpc	r17, r1
 44c:	a4 f3       	brlt	.-24     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 44e:	1b c0       	rjmp	.+54     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
				dos(PORT,DOS);
			}
			break;
		case 3:
			for (int i=0; i<20; i++){
				tres(PORT,TRES);
 450:	b8 01       	movw	r22, r16
 452:	ce 01       	movw	r24, r28
 454:	0e 94 3f 01 	call	0x27e	; 0x27e <tres>
			for (int i=0; i<20; i++){
				dos(PORT,DOS);
			}
			break;
		case 3:
			for (int i=0; i<20; i++){
 458:	8f ef       	ldi	r24, 0xFF	; 255
 45a:	e8 1a       	sub	r14, r24
 45c:	f8 0a       	sbc	r15, r24
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
	tres(PORT,TRES);_delay_ms(20);
	dos(PORT,DOS);_delay_ms(20);
}

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
 460:	e1 2c       	mov	r14, r1
 462:	f1 2c       	mov	r15, r1
			for (int i=0; i<20; i++){
				dos(PORT,DOS);
			}
			break;
		case 3:
			for (int i=0; i<20; i++){
 464:	84 e1       	ldi	r24, 0x14	; 20
 466:	e8 16       	cp	r14, r24
 468:	f1 04       	cpc	r15, r1
 46a:	94 f3       	brlt	.-28     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 46c:	0c c0       	rjmp	.+24     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
				tres(PORT,TRES);
			}
			break;
		case 4:
			for (int i=0; i<20; i++){
				cuatro(PORT,CUATRO);
 46e:	b7 01       	movw	r22, r14
 470:	ce 01       	movw	r24, r28
 472:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <cuatro>
			for (int i=0; i<20; i++){
				tres(PORT,TRES);
			}
			break;
		case 4:
			for (int i=0; i<20; i++){
 476:	0f 5f       	subi	r16, 0xFF	; 255
 478:	1f 4f       	sbci	r17, 0xFF	; 255
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
	tres(PORT,TRES);_delay_ms(20);
	dos(PORT,DOS);_delay_ms(20);
}

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
 47c:	00 e0       	ldi	r16, 0x00	; 0
 47e:	10 e0       	ldi	r17, 0x00	; 0
			for (int i=0; i<20; i++){
				tres(PORT,TRES);
			}
			break;
		case 4:
			for (int i=0; i<20; i++){
 480:	04 31       	cpi	r16, 0x14	; 20
 482:	11 05       	cpc	r17, r1
 484:	a4 f3       	brlt	.-24     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
				cuatro(PORT,CUATRO);
			}
			break;
	}
}
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	1f 91       	pop	r17
 48c:	0f 91       	pop	r16
 48e:	ff 90       	pop	r15
 490:	ef 90       	pop	r14
 492:	df 90       	pop	r13
 494:	cf 90       	pop	r12
 496:	bf 90       	pop	r11
 498:	af 90       	pop	r10
 49a:	08 95       	ret

0000049c <main>:

int main(void)
{
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
 4a4:	c0 5f       	subi	r28, 0xF0	; 240
 4a6:	d1 09       	sbc	r29, r1
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	f8 94       	cli
 4ac:	de bf       	out	0x3e, r29	; 62
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	cd bf       	out	0x3d, r28	; 61
	// PARA EL DATO
	DDRB = 0B11111111; // SALIDA TODO EL PUERTO B
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	84 b9       	out	0x04, r24	; 4
	
	// PARA EL DESPLAZMIENTO
	DDRD = 0B11111111; // SALIDAS TODO EL PUERTO D
 4b6:	8a b9       	out	0x0a, r24	; 10
	
	// PARA LAS BOTONERAS
	DDRC |= (0<<0)|(0<<1)|(0<<2); //ENTRADAS PARA LOS PUERTOS C0,C1,C2
 4b8:	87 b1       	in	r24, 0x07	; 7
 4ba:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1<<3)|(1<<4); //SALIDA PARA EL PUERTO C3 MUSICA RED LIGHT GREEN LIGHT, C4 CLICK
 4bc:	87 b1       	in	r24, 0x07	; 7
 4be:	88 61       	ori	r24, 0x18	; 24
 4c0:	87 b9       	out	0x07, r24	; 7
		
	//UART_init();
	
	// VA CON EL DESPLAZMIENTO
	char PORT[8] =  {1,2,4,8,16,32,64,128};//VALORES DE PINES DEL PORTD
 4c2:	88 e0       	ldi	r24, 0x08	; 8
 4c4:	e4 e0       	ldi	r30, 0x04	; 4
 4c6:	f1 e0       	ldi	r31, 0x01	; 1
 4c8:	de 01       	movw	r26, r28
 4ca:	11 96       	adiw	r26, 0x01	; 1
 4cc:	01 90       	ld	r0, Z+
 4ce:	0d 92       	st	X+, r0
 4d0:	8a 95       	dec	r24
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <main+0x30>
		0x0, 0x7E, 0x04, 0x08, 0x08, 0x04, 0x7E, 0x0, //M
		0x0, 0x7E, 0x4A, 0x4A, 0x4A, 0x42, 0x42, 0x0, //E
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, //ESPACIO
	}; 
	
	char MENSAJE[]={0x0, 0x7e, 0x7e, 0x18, 0x18, 0x7e, 0x7e, 0x0, //H
 4d4:	88 e2       	ldi	r24, 0x28	; 40
 4d6:	ec e0       	ldi	r30, 0x0C	; 12
 4d8:	f1 e0       	ldi	r31, 0x01	; 1
 4da:	de 01       	movw	r26, r28
 4dc:	19 96       	adiw	r26, 0x09	; 9
 4de:	01 90       	ld	r0, Z+
 4e0:	0d 92       	st	X+, r0
 4e2:	8a 95       	dec	r24
 4e4:	e1 f7       	brne	.-8      	; 0x4de <main+0x42>
		0x0, 0x7e, 0x7e, 0x66, 0x66, 0x7e, 0x7e, 0x0, //O
		0x0, 0x7e, 0x7e, 0x60, 0x60, 0x60, 0x60, 0x0, //L
		0x0, 0x7e, 0x7e, 0x16, 0x16, 0x7e, 0x7e, 0x0, //A
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}; //ESPACIO
	
	char ANIMACION1[] = {
 4e6:	80 e2       	ldi	r24, 0x20	; 32
 4e8:	e4 e3       	ldi	r30, 0x34	; 52
 4ea:	f1 e0       	ldi	r31, 0x01	; 1
 4ec:	de 01       	movw	r26, r28
 4ee:	d1 96       	adiw	r26, 0x31	; 49
 4f0:	01 90       	ld	r0, Z+
 4f2:	0d 92       	st	X+, r0
 4f4:	8a 95       	dec	r24
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <main+0x54>
		0x0, 0x0, 0x24, 0x0, 0x0, 0x24, 0x0, 0x0, // CENTRO 2
		0x0, 0x42, 0x0, 0x0, 0x0, 0x0, 0x42, 0x0, // CENTRO 3
		0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81 // CENTRO 4
	};
	
	char ANIMACION2[] = {
 4f8:	80 e2       	ldi	r24, 0x20	; 32
 4fa:	e4 e5       	ldi	r30, 0x54	; 84
 4fc:	f1 e0       	ldi	r31, 0x01	; 1
 4fe:	de 01       	movw	r26, r28
 500:	af 5a       	subi	r26, 0xAF	; 175
 502:	bf 4f       	sbci	r27, 0xFF	; 255
 504:	01 90       	ld	r0, Z+
 506:	0d 92       	st	X+, r0
 508:	8a 95       	dec	r24
 50a:	e1 f7       	brne	.-8      	; 0x504 <main+0x68>
		0x0, 0x0, 0x3C, 0x24, 0x24, 0x3C, 0x0, 0x0, // CENTRO 2
		0x0, 0x7E, 0x42, 0x42, 0x42, 0x42, 0x7E, 0x0, // CENTRO 3
		0xFF, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xFF // CENTRO 4
	};
	
	char NUMERO3[] = {
 50c:	88 e0       	ldi	r24, 0x08	; 8
 50e:	e4 e7       	ldi	r30, 0x74	; 116
 510:	f1 e0       	ldi	r31, 0x01	; 1
 512:	de 01       	movw	r26, r28
 514:	af 58       	subi	r26, 0x8F	; 143
 516:	bf 4f       	sbci	r27, 0xFF	; 255
 518:	01 90       	ld	r0, Z+
 51a:	0d 92       	st	X+, r0
 51c:	8a 95       	dec	r24
 51e:	e1 f7       	brne	.-8      	; 0x518 <main+0x7c>
		0x00, 0x00, 0x11, 0x15, 0x15, 0x1F, 0xA0, 0x40, // CON FLECHAS
		//0x0, 0x0, 0x11, 0x15, 0x15, 0x1F, 0x0, 0x0 // SIN FLECHAS
	};
	
	char NUMERO4[] = {
 520:	88 e0       	ldi	r24, 0x08	; 8
 522:	ec e7       	ldi	r30, 0x7C	; 124
 524:	f1 e0       	ldi	r31, 0x01	; 1
 526:	de 01       	movw	r26, r28
 528:	a7 58       	subi	r26, 0x87	; 135
 52a:	bf 4f       	sbci	r27, 0xFF	; 255
 52c:	01 90       	ld	r0, Z+
 52e:	0d 92       	st	X+, r0
 530:	8a 95       	dec	r24
 532:	e1 f7       	brne	.-8      	; 0x52c <main+0x90>
		0x40, 0xA0, 0x07, 0x04, 0x04, 0x1F, 0x0, 0x0, // CON FLECHAS
		//0x0, 0x0, 0x07, 0x04, 0x04, 0x1F, 0x0, 0x0 // SIN FLECHAS
	};
	
	char UNO[] = {
 534:	88 e0       	ldi	r24, 0x08	; 8
 536:	e4 e8       	ldi	r30, 0x84	; 132
 538:	f1 e0       	ldi	r31, 0x01	; 1
 53a:	de 01       	movw	r26, r28
 53c:	af 57       	subi	r26, 0x7F	; 127
 53e:	bf 4f       	sbci	r27, 0xFF	; 255
 540:	01 90       	ld	r0, Z+
 542:	0d 92       	st	X+, r0
 544:	8a 95       	dec	r24
 546:	e1 f7       	brne	.-8      	; 0x540 <main+0xa4>
		0x0, 0x0, 0x04, 0x04, 0x7E, 0x7E, 0x0, 0x0
	};
	
	char DOS[] = {
 548:	88 e0       	ldi	r24, 0x08	; 8
 54a:	ec e8       	ldi	r30, 0x8C	; 140
 54c:	f1 e0       	ldi	r31, 0x01	; 1
 54e:	de 01       	movw	r26, r28
 550:	a7 57       	subi	r26, 0x77	; 119
 552:	bf 4f       	sbci	r27, 0xFF	; 255
 554:	01 90       	ld	r0, Z+
 556:	0d 92       	st	X+, r0
 558:	8a 95       	dec	r24
 55a:	e1 f7       	brne	.-8      	; 0x554 <main+0xb8>
		0x0, 0x0, 0x7A, 0x7A, 0x5E, 0x5E, 0x0, 0x0
	};
	
	char TRES[] = {
 55c:	88 e0       	ldi	r24, 0x08	; 8
 55e:	e4 e9       	ldi	r30, 0x94	; 148
 560:	f1 e0       	ldi	r31, 0x01	; 1
 562:	de 01       	movw	r26, r28
 564:	af 56       	subi	r26, 0x6F	; 111
 566:	bf 4f       	sbci	r27, 0xFF	; 255
 568:	01 90       	ld	r0, Z+
 56a:	0d 92       	st	X+, r0
 56c:	8a 95       	dec	r24
 56e:	e1 f7       	brne	.-8      	; 0x568 <main+0xcc>
		0x0, 0x0, 0x5A, 0x5A, 0x7E, 0x7E, 0x0, 0x0
	};
	
	char CUATRO[] = {
 570:	88 e0       	ldi	r24, 0x08	; 8
 572:	ec e9       	ldi	r30, 0x9C	; 156
 574:	f1 e0       	ldi	r31, 0x01	; 1
 576:	de 01       	movw	r26, r28
 578:	a7 56       	subi	r26, 0x67	; 103
 57a:	bf 4f       	sbci	r27, 0xFF	; 255
 57c:	01 90       	ld	r0, Z+
 57e:	0d 92       	st	X+, r0
 580:	8a 95       	dec	r24
 582:	e1 f7       	brne	.-8      	; 0x57c <main+0xe0>
		0x0, 0x0, 0x18, 0x1C, 0x72, 0x7E, 0x0, 0x0
	};
	
	char ESQUINA1[] = {
 584:	fe 01       	movw	r30, r28
 586:	ef 55       	subi	r30, 0x5F	; 95
 588:	ff 4f       	sbci	r31, 0xFF	; 255
 58a:	80 e1       	ldi	r24, 0x10	; 16
 58c:	df 01       	movw	r26, r30
 58e:	28 2f       	mov	r18, r24
 590:	1d 92       	st	X+, r1
 592:	2a 95       	dec	r18
 594:	e9 f7       	brne	.-6      	; 0x590 <main+0xf4>
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	90 83       	st	Z, r25
		0x01, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	};
	
	char ESQUINA2[] = {
 59a:	70 96       	adiw	r30, 0x10	; 16
 59c:	df 01       	movw	r26, r30
 59e:	28 2f       	mov	r18, r24
 5a0:	1d 92       	st	X+, r1
 5a2:	2a 95       	dec	r18
 5a4:	e9 f7       	brne	.-6      	; 0x5a0 <main+0x104>
 5a6:	97 83       	std	Z+7, r25	; 0x07
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x01,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	};
	
	char ESQUINA3[] = {
 5a8:	70 96       	adiw	r30, 0x10	; 16
 5aa:	df 01       	movw	r26, r30
 5ac:	28 2f       	mov	r18, r24
 5ae:	1d 92       	st	X+, r1
 5b0:	2a 95       	dec	r18
 5b2:	e9 f7       	brne	.-6      	; 0x5ae <main+0x112>
 5b4:	90 e8       	ldi	r25, 0x80	; 128
 5b6:	90 83       	st	Z, r25
		0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	};
	
	char ESQUINA4[] = {
 5b8:	70 96       	adiw	r30, 0x10	; 16
 5ba:	df 01       	movw	r26, r30
 5bc:	1d 92       	st	X+, r1
 5be:	8a 95       	dec	r24
 5c0:	e9 f7       	brne	.-6      	; 0x5bc <main+0x120>
 5c2:	97 83       	std	Z+7, r25	; 0x07
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	};
	
	int inicio = 0;
	int valor3 = 1;
 5c4:	01 e0       	ldi	r16, 0x01	; 1
 5c6:	10 e0       	ldi	r17, 0x00	; 0
	char ESQUINA4[] = {
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	};
	
	int inicio = 0;
 5c8:	c1 2c       	mov	r12, r1
 5ca:	d1 2c       	mov	r13, r1
 5cc:	14 c0       	rjmp	.+40     	; 0x5f6 <main+0x15a>
	int jugadores = 0;
	
	while(1){
		
		while (!inicio) {
			animacion1(PORT,ANIMACION1);
 5ce:	be 01       	movw	r22, r28
 5d0:	6f 5c       	subi	r22, 0xCF	; 207
 5d2:	7f 4f       	sbci	r23, 0xFF	; 255
 5d4:	ce 01       	movw	r24, r28
 5d6:	01 96       	adiw	r24, 0x01	; 1
 5d8:	0e 94 77 00 	call	0xee	; 0xee <animacion1>
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
 5dc:	86 b1       	in	r24, 0x06	; 6
 5de:	81 34       	cpi	r24, 0x41	; 65
 5e0:	71 f0       	breq	.+28     	; 0x5fe <main+0x162>
				inicio = 1;
				//squid_game(PORT,SQUID_GAME);
				break;
			}
			animacion2(PORT,ANIMACION2);
 5e2:	be 01       	movw	r22, r28
 5e4:	6f 5a       	subi	r22, 0xAF	; 175
 5e6:	7f 4f       	sbci	r23, 0xFF	; 255
 5e8:	ce 01       	movw	r24, r28
 5ea:	01 96       	adiw	r24, 0x01	; 1
 5ec:	0e 94 a1 00 	call	0x142	; 0x142 <animacion2>
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
 5f0:	86 b1       	in	r24, 0x06	; 6
 5f2:	81 34       	cpi	r24, 0x41	; 65
 5f4:	41 f0       	breq	.+16     	; 0x606 <main+0x16a>
	int valor3 = 1;
	int jugadores = 0;
	
	while(1){
		
		while (!inicio) {
 5f6:	c1 14       	cp	r12, r1
 5f8:	d1 04       	cpc	r13, r1
 5fa:	41 f4       	brne	.+16     	; 0x60c <main+0x170>
 5fc:	e8 cf       	rjmp	.-48     	; 0x5ce <main+0x132>
			animacion1(PORT,ANIMACION1);
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
				inicio = 1;
 5fe:	cc 24       	eor	r12, r12
 600:	c3 94       	inc	r12
 602:	d1 2c       	mov	r13, r1
 604:	03 c0       	rjmp	.+6      	; 0x60c <main+0x170>
				break;
			}
			animacion2(PORT,ANIMACION2);
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
				inicio = 1;
 606:	cc 24       	eor	r12, r12
 608:	c3 94       	inc	r12
 60a:	d1 2c       	mov	r13, r1
		/* EMPIEZA LA SELECCION DE CANTIDAD DE JUGADORES CON:
		DERECHA: 0B 0100 0010
		IZQUIERDA: 0B 0100 0100 */
		
		//NUMERO 3 CON FLECHA A LA DERECHA
		jugadores = 0;
 60c:	e1 2c       	mov	r14, r1
 60e:	f1 2c       	mov	r15, r1
		while (valor3) {
 610:	36 c0       	rjmp	.+108    	; 0x67e <main+0x1e2>
			numero(PORT,NUMERO3);
 612:	be 01       	movw	r22, r28
 614:	6f 58       	subi	r22, 0x8F	; 143
 616:	7f 4f       	sbci	r23, 0xFF	; 255
 618:	ce 01       	movw	r24, r28
 61a:	01 96       	adiw	r24, 0x01	; 1
 61c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <numero>
			// SI PRESIONA PARA LA DERECHA
			if (PINC == 0x42) {
 620:	86 b1       	in	r24, 0x06	; 6
 622:	82 34       	cpi	r24, 0x42	; 66
 624:	31 f5       	brne	.+76     	; 0x672 <main+0x1d6>
				// SONIDO DEL CLICK
				PORTC = ((1<<4));
 626:	80 e1       	ldi	r24, 0x10	; 16
 628:	88 b9       	out	0x08, r24	; 8
 62a:	83 ef       	ldi	r24, 0xF3	; 243
 62c:	91 e0       	ldi	r25, 0x01	; 1
 62e:	01 97       	sbiw	r24, 0x01	; 1
 630:	f1 f7       	brne	.-4      	; 0x62e <main+0x192>
 632:	00 c0       	rjmp	.+0      	; 0x634 <main+0x198>
 634:	00 00       	nop
				_delay_ms(0.25);
				PORTC = ((0<<4));
 636:	18 b8       	out	0x08, r1	; 8
				while (1) {
					numero(PORT,NUMERO4);
 638:	be 01       	movw	r22, r28
 63a:	67 58       	subi	r22, 0x87	; 135
 63c:	7f 4f       	sbci	r23, 0xFF	; 255
 63e:	ce 01       	movw	r24, r28
 640:	01 96       	adiw	r24, 0x01	; 1
 642:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <numero>
					// SI PRESIONA PARA LA IZQUIERDA
					if (PINC == 0x44) {
 646:	86 b1       	in	r24, 0x06	; 6
 648:	84 34       	cpi	r24, 0x44	; 68
 64a:	51 f4       	brne	.+20     	; 0x660 <main+0x1c4>
						// SONIDO DEL CLICK
						PORTC = ((1<<4));
 64c:	80 e1       	ldi	r24, 0x10	; 16
 64e:	88 b9       	out	0x08, r24	; 8
 650:	a3 ef       	ldi	r26, 0xF3	; 243
 652:	b1 e0       	ldi	r27, 0x01	; 1
 654:	11 97       	sbiw	r26, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <main+0x1b8>
 658:	00 c0       	rjmp	.+0      	; 0x65a <main+0x1be>
 65a:	00 00       	nop
						_delay_ms(0.25);
						PORTC = ((0<<4));
 65c:	18 b8       	out	0x08, r1	; 8
						break;
 65e:	09 c0       	rjmp	.+18     	; 0x672 <main+0x1d6>
					}
					// SI SELECCIONA LA OPCION DE 4 JUGADORES
					if (PINC == 0x41) {
 660:	86 b1       	in	r24, 0x06	; 6
 662:	81 34       	cpi	r24, 0x41	; 65
 664:	49 f7       	brne	.-46     	; 0x638 <main+0x19c>
						jugadores = 4;
 666:	68 94       	set
 668:	ee 24       	eor	r14, r14
 66a:	e2 f8       	bld	r14, 2
 66c:	f1 2c       	mov	r15, r1
						valor3 = 0;
 66e:	00 e0       	ldi	r16, 0x00	; 0
 670:	10 e0       	ldi	r17, 0x00	; 0
						break;
					}
				}
			}
			// SI SELECCIONA LA OPCION DE 3 JUGADORES
			if (PINC == 0x41 && valor3) {
 672:	86 b1       	in	r24, 0x06	; 6
 674:	81 34       	cpi	r24, 0x41	; 65
 676:	19 f4       	brne	.+6      	; 0x67e <main+0x1e2>
 678:	01 15       	cp	r16, r1
 67a:	11 05       	cpc	r17, r1
 67c:	21 f4       	brne	.+8      	; 0x686 <main+0x1ea>
		DERECHA: 0B 0100 0010
		IZQUIERDA: 0B 0100 0100 */
		
		//NUMERO 3 CON FLECHA A LA DERECHA
		jugadores = 0;
		while (valor3) {
 67e:	01 15       	cp	r16, r1
 680:	11 05       	cpc	r17, r1
 682:	39 f6       	brne	.-114    	; 0x612 <main+0x176>
 684:	05 c0       	rjmp	.+10     	; 0x690 <main+0x1f4>
					}
				}
			}
			// SI SELECCIONA LA OPCION DE 3 JUGADORES
			if (PINC == 0x41 && valor3) {
				jugadores = 3;
 686:	0f 2e       	mov	r0, r31
 688:	f3 e0       	ldi	r31, 0x03	; 3
 68a:	ef 2e       	mov	r14, r31
 68c:	f1 2c       	mov	r15, r1
 68e:	f0 2d       	mov	r31, r0
				break;
			}
		}
		valor3 = 0;
		
		if (jugadores == 4){
 690:	b4 e0       	ldi	r27, 0x04	; 4
 692:	eb 16       	cp	r14, r27
 694:	f1 04       	cpc	r15, r1
 696:	09 f0       	breq	.+2      	; 0x69a <main+0x1fe>
 698:	1d c1       	rjmp	.+570    	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
			//PARA EL CASO DE LAS 4 ESQUINAS
			int referencia[4] = {1,2,3,4};
 69a:	88 e0       	ldi	r24, 0x08	; 8
 69c:	e4 ea       	ldi	r30, 0xA4	; 164
 69e:	f1 e0       	ldi	r31, 0x01	; 1
 6a0:	de 01       	movw	r26, r28
 6a2:	a7 51       	subi	r26, 0x17	; 23
 6a4:	bf 4f       	sbci	r27, 0xFF	; 255
 6a6:	01 90       	ld	r0, Z+
 6a8:	0d 92       	st	X+, r0
 6aa:	8a 95       	dec	r24
 6ac:	e1 f7       	brne	.-8      	; 0x6a6 <main+0x20a>
			int orden_juego[4] = {0,0,0,0};
 6ae:	fe 01       	movw	r30, r28
 6b0:	ef 51       	subi	r30, 0x1F	; 31
 6b2:	ff 4f       	sbci	r31, 0xFF	; 255
 6b4:	88 e0       	ldi	r24, 0x08	; 8
 6b6:	df 01       	movw	r26, r30
 6b8:	1d 92       	st	X+, r1
 6ba:	8a 95       	dec	r24
 6bc:	e9 f7       	brne	.-6      	; 0x6b8 <main+0x21c>
			int aleatorio = 0;
			
			for (int i=0; i<4; i++){
 6be:	00 e0       	ldi	r16, 0x00	; 0
 6c0:	10 e0       	ldi	r17, 0x00	; 0
 6c2:	36 c0       	rjmp	.+108    	; 0x730 <main+0x294>
				// VALOR ALEATORIO PARA ESCOGER UNA POSICION DE LA REFERENCIA
				do {
					aleatorio = random()%4; //[0,4) // LO USO PARA LAS POSICIONES
 6c4:	0e 94 00 05 	call	0xa00	; 0xa00 <random>
 6c8:	dc 01       	movw	r26, r24
 6ca:	cb 01       	movw	r24, r22
 6cc:	83 70       	andi	r24, 0x03	; 3
 6ce:	99 27       	eor	r25, r25
 6d0:	aa 27       	eor	r26, r26
 6d2:	b0 78       	andi	r27, 0x80	; 128
 6d4:	bb 23       	and	r27, r27
 6d6:	54 f4       	brge	.+20     	; 0x6ec <main+0x250>
 6d8:	01 97       	sbiw	r24, 0x01	; 1
 6da:	a1 09       	sbc	r26, r1
 6dc:	b1 09       	sbc	r27, r1
 6de:	8c 6f       	ori	r24, 0xFC	; 252
 6e0:	9f 6f       	ori	r25, 0xFF	; 255
 6e2:	af 6f       	ori	r26, 0xFF	; 255
 6e4:	bf 6f       	ori	r27, 0xFF	; 255
 6e6:	01 96       	adiw	r24, 0x01	; 1
 6e8:	a1 1d       	adc	r26, r1
 6ea:	b1 1d       	adc	r27, r1
				} while (referencia[aleatorio] == 0);
 6ec:	bc 01       	movw	r22, r24
 6ee:	66 0f       	add	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	e9 ee       	ldi	r30, 0xE9	; 233
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	ec 0f       	add	r30, r28
 6f8:	fd 1f       	adc	r31, r29
 6fa:	e6 0f       	add	r30, r22
 6fc:	f7 1f       	adc	r31, r23
 6fe:	80 81       	ld	r24, Z
 700:	91 81       	ldd	r25, Z+1	; 0x01
 702:	00 97       	sbiw	r24, 0x00	; 0
 704:	f9 f2       	breq	.-66     	; 0x6c4 <main+0x228>
				
				orden_juego[i] = referencia[aleatorio];
 706:	f8 01       	movw	r30, r16
 708:	ee 0f       	add	r30, r30
 70a:	ff 1f       	adc	r31, r31
 70c:	41 ee       	ldi	r20, 0xE1	; 225
 70e:	50 e0       	ldi	r21, 0x00	; 0
 710:	4c 0f       	add	r20, r28
 712:	5d 1f       	adc	r21, r29
 714:	e4 0f       	add	r30, r20
 716:	f5 1f       	adc	r31, r21
 718:	91 83       	std	Z+1, r25	; 0x01
 71a:	80 83       	st	Z, r24
				referencia[aleatorio] = 0;
 71c:	e9 ee       	ldi	r30, 0xE9	; 233
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	ec 0f       	add	r30, r28
 722:	fd 1f       	adc	r31, r29
 724:	e6 0f       	add	r30, r22
 726:	f7 1f       	adc	r31, r23
 728:	11 82       	std	Z+1, r1	; 0x01
 72a:	10 82       	st	Z, r1
			//PARA EL CASO DE LAS 4 ESQUINAS
			int referencia[4] = {1,2,3,4};
			int orden_juego[4] = {0,0,0,0};
			int aleatorio = 0;
			
			for (int i=0; i<4; i++){
 72c:	0f 5f       	subi	r16, 0xFF	; 255
 72e:	1f 4f       	sbci	r17, 0xFF	; 255
 730:	04 30       	cpi	r16, 0x04	; 4
 732:	11 05       	cpc	r17, r1
 734:	3c f2       	brlt	.-114    	; 0x6c4 <main+0x228>
				referencia[aleatorio] = 0;
			}
			
			// MOVIMIENTO DE LOS NUMEROS
			// TURNO ESQUINA 1
			PORTC = ((1<<4));
 736:	68 94       	set
 738:	bb 24       	eor	r11, r11
 73a:	b4 f8       	bld	r11, 4
 73c:	b8 b8       	out	0x08, r11	; 8
 73e:	83 ef       	ldi	r24, 0xF3	; 243
 740:	91 e0       	ldi	r25, 0x01	; 1
 742:	01 97       	sbiw	r24, 0x01	; 1
 744:	f1 f7       	brne	.-4      	; 0x742 <main+0x2a6>
 746:	00 c0       	rjmp	.+0      	; 0x748 <main+0x2ac>
 748:	00 00       	nop
			_delay_ms(0.25);
			PORTC = ((0<<4));
 74a:	18 b8       	out	0x08, r1	; 8
			esquina(PORT,ESQUINA1);
 74c:	be 01       	movw	r22, r28
 74e:	6f 55       	subi	r22, 0x5F	; 95
 750:	7f 4f       	sbci	r23, 0xFF	; 255
 752:	ce 01       	movw	r24, r28
 754:	01 96       	adiw	r24, 0x01	; 1
 756:	0e 94 79 01 	call	0x2f2	; 0x2f2 <esquina>
			numeros_sorteo(PORT,UNO,DOS,TRES,CUATRO);
 75a:	8e 01       	movw	r16, r28
 75c:	07 56       	subi	r16, 0x67	; 103
 75e:	1f 4f       	sbci	r17, 0xFF	; 255
 760:	9e 01       	movw	r18, r28
 762:	2f 56       	subi	r18, 0x6F	; 111
 764:	3f 4f       	sbci	r19, 0xFF	; 255
 766:	ae 01       	movw	r20, r28
 768:	47 57       	subi	r20, 0x77	; 119
 76a:	5f 4f       	sbci	r21, 0xFF	; 255
 76c:	be 01       	movw	r22, r28
 76e:	6f 57       	subi	r22, 0x7F	; 127
 770:	7f 4f       	sbci	r23, 0xFF	; 255
 772:	ce 01       	movw	r24, r28
 774:	01 96       	adiw	r24, 0x01	; 1
 776:	0e 94 96 01 	call	0x32c	; 0x32c <numeros_sorteo>
			seleccion_orden(orden_juego[0],PORT,UNO,DOS,TRES,CUATRO);
 77a:	78 01       	movw	r14, r16
 77c:	08 50       	subi	r16, 0x08	; 8
 77e:	11 09       	sbc	r17, r1
 780:	9e 01       	movw	r18, r28
 782:	27 57       	subi	r18, 0x77	; 119
 784:	3f 4f       	sbci	r19, 0xFF	; 255
 786:	ae 01       	movw	r20, r28
 788:	4f 57       	subi	r20, 0x7F	; 127
 78a:	5f 4f       	sbci	r21, 0xFF	; 255
 78c:	be 01       	movw	r22, r28
 78e:	6f 5f       	subi	r22, 0xFF	; 255
 790:	7f 4f       	sbci	r23, 0xFF	; 255
 792:	cf 51       	subi	r28, 0x1F	; 31
 794:	df 4f       	sbci	r29, 0xFF	; 255
 796:	88 81       	ld	r24, Y
 798:	99 81       	ldd	r25, Y+1	; 0x01
 79a:	c1 5e       	subi	r28, 0xE1	; 225
 79c:	d0 40       	sbci	r29, 0x00	; 0
 79e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <seleccion_orden>
			
			
			// TURNO ESQUINA 2
			PORTC = ((1<<4));
 7a2:	b8 b8       	out	0x08, r11	; 8
 7a4:	83 ef       	ldi	r24, 0xF3	; 243
 7a6:	91 e0       	ldi	r25, 0x01	; 1
 7a8:	01 97       	sbiw	r24, 0x01	; 1
 7aa:	f1 f7       	brne	.-4      	; 0x7a8 <main+0x30c>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <main+0x312>
 7ae:	00 00       	nop
			_delay_ms(0.25);
			PORTC = ((0<<4));
 7b0:	18 b8       	out	0x08, r1	; 8
			esquina(PORT,ESQUINA2);
 7b2:	be 01       	movw	r22, r28
 7b4:	6f 54       	subi	r22, 0x4F	; 79
 7b6:	7f 4f       	sbci	r23, 0xFF	; 255
 7b8:	ce 01       	movw	r24, r28
 7ba:	01 96       	adiw	r24, 0x01	; 1
 7bc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <esquina>
			numeros_sorteo(PORT,UNO,DOS,TRES,CUATRO);
 7c0:	87 01       	movw	r16, r14
 7c2:	9e 01       	movw	r18, r28
 7c4:	2f 56       	subi	r18, 0x6F	; 111
 7c6:	3f 4f       	sbci	r19, 0xFF	; 255
 7c8:	ae 01       	movw	r20, r28
 7ca:	47 57       	subi	r20, 0x77	; 119
 7cc:	5f 4f       	sbci	r21, 0xFF	; 255
 7ce:	be 01       	movw	r22, r28
 7d0:	6f 57       	subi	r22, 0x7F	; 127
 7d2:	7f 4f       	sbci	r23, 0xFF	; 255
 7d4:	ce 01       	movw	r24, r28
 7d6:	01 96       	adiw	r24, 0x01	; 1
 7d8:	0e 94 96 01 	call	0x32c	; 0x32c <numeros_sorteo>
			seleccion_orden(orden_juego[1],PORT,UNO,DOS,TRES,CUATRO);
 7dc:	08 50       	subi	r16, 0x08	; 8
 7de:	11 09       	sbc	r17, r1
 7e0:	9e 01       	movw	r18, r28
 7e2:	27 57       	subi	r18, 0x77	; 119
 7e4:	3f 4f       	sbci	r19, 0xFF	; 255
 7e6:	ae 01       	movw	r20, r28
 7e8:	4f 57       	subi	r20, 0x7F	; 127
 7ea:	5f 4f       	sbci	r21, 0xFF	; 255
 7ec:	be 01       	movw	r22, r28
 7ee:	6f 5f       	subi	r22, 0xFF	; 255
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	cd 51       	subi	r28, 0x1D	; 29
 7f4:	df 4f       	sbci	r29, 0xFF	; 255
 7f6:	88 81       	ld	r24, Y
 7f8:	99 81       	ldd	r25, Y+1	; 0x01
 7fa:	c3 5e       	subi	r28, 0xE3	; 227
 7fc:	d0 40       	sbci	r29, 0x00	; 0
 7fe:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <seleccion_orden>
			
			// TURNO ESQUINA 3
			PORTC = ((1<<4));
 802:	b8 b8       	out	0x08, r11	; 8
 804:	83 ef       	ldi	r24, 0xF3	; 243
 806:	91 e0       	ldi	r25, 0x01	; 1
 808:	01 97       	sbiw	r24, 0x01	; 1
 80a:	f1 f7       	brne	.-4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 80c:	00 c0       	rjmp	.+0      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80e:	00 00       	nop
			_delay_ms(0.25);
			PORTC = ((0<<4));
 810:	18 b8       	out	0x08, r1	; 8
			esquina(PORT,ESQUINA3);
 812:	be 01       	movw	r22, r28
 814:	6f 53       	subi	r22, 0x3F	; 63
 816:	7f 4f       	sbci	r23, 0xFF	; 255
 818:	ce 01       	movw	r24, r28
 81a:	01 96       	adiw	r24, 0x01	; 1
 81c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <esquina>
			numeros_sorteo(PORT,UNO,DOS,TRES,CUATRO);
 820:	87 01       	movw	r16, r14
 822:	9e 01       	movw	r18, r28
 824:	2f 56       	subi	r18, 0x6F	; 111
 826:	3f 4f       	sbci	r19, 0xFF	; 255
 828:	ae 01       	movw	r20, r28
 82a:	47 57       	subi	r20, 0x77	; 119
 82c:	5f 4f       	sbci	r21, 0xFF	; 255
 82e:	be 01       	movw	r22, r28
 830:	6f 57       	subi	r22, 0x7F	; 127
 832:	7f 4f       	sbci	r23, 0xFF	; 255
 834:	ce 01       	movw	r24, r28
 836:	01 96       	adiw	r24, 0x01	; 1
 838:	0e 94 96 01 	call	0x32c	; 0x32c <numeros_sorteo>
			seleccion_orden(orden_juego[2],PORT,UNO,DOS,TRES,CUATRO);
 83c:	08 50       	subi	r16, 0x08	; 8
 83e:	11 09       	sbc	r17, r1
 840:	9e 01       	movw	r18, r28
 842:	27 57       	subi	r18, 0x77	; 119
 844:	3f 4f       	sbci	r19, 0xFF	; 255
 846:	ae 01       	movw	r20, r28
 848:	4f 57       	subi	r20, 0x7F	; 127
 84a:	5f 4f       	sbci	r21, 0xFF	; 255
 84c:	be 01       	movw	r22, r28
 84e:	6f 5f       	subi	r22, 0xFF	; 255
 850:	7f 4f       	sbci	r23, 0xFF	; 255
 852:	cb 51       	subi	r28, 0x1B	; 27
 854:	df 4f       	sbci	r29, 0xFF	; 255
 856:	88 81       	ld	r24, Y
 858:	99 81       	ldd	r25, Y+1	; 0x01
 85a:	c5 5e       	subi	r28, 0xE5	; 229
 85c:	d0 40       	sbci	r29, 0x00	; 0
 85e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <seleccion_orden>
			
			// TURNO ESQUINA 4
			PORTC = ((1<<4));
 862:	b8 b8       	out	0x08, r11	; 8
 864:	83 ef       	ldi	r24, 0xF3	; 243
 866:	91 e0       	ldi	r25, 0x01	; 1
 868:	01 97       	sbiw	r24, 0x01	; 1
 86a:	f1 f7       	brne	.-4      	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 86c:	00 c0       	rjmp	.+0      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 86e:	00 00       	nop
			_delay_ms(0.25);
			PORTC = ((0<<4));
 870:	18 b8       	out	0x08, r1	; 8
			esquina(PORT,ESQUINA4);
 872:	be 01       	movw	r22, r28
 874:	6f 52       	subi	r22, 0x2F	; 47
 876:	7f 4f       	sbci	r23, 0xFF	; 255
 878:	ce 01       	movw	r24, r28
 87a:	01 96       	adiw	r24, 0x01	; 1
 87c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <esquina>
			numeros_sorteo(PORT,UNO,DOS,TRES,CUATRO);
 880:	87 01       	movw	r16, r14
 882:	9e 01       	movw	r18, r28
 884:	2f 56       	subi	r18, 0x6F	; 111
 886:	3f 4f       	sbci	r19, 0xFF	; 255
 888:	ae 01       	movw	r20, r28
 88a:	47 57       	subi	r20, 0x77	; 119
 88c:	5f 4f       	sbci	r21, 0xFF	; 255
 88e:	be 01       	movw	r22, r28
 890:	6f 57       	subi	r22, 0x7F	; 127
 892:	7f 4f       	sbci	r23, 0xFF	; 255
 894:	ce 01       	movw	r24, r28
 896:	01 96       	adiw	r24, 0x01	; 1
 898:	0e 94 96 01 	call	0x32c	; 0x32c <numeros_sorteo>
			seleccion_orden(orden_juego[3],PORT,UNO,DOS,TRES,CUATRO);
 89c:	08 50       	subi	r16, 0x08	; 8
 89e:	11 09       	sbc	r17, r1
 8a0:	9e 01       	movw	r18, r28
 8a2:	27 57       	subi	r18, 0x77	; 119
 8a4:	3f 4f       	sbci	r19, 0xFF	; 255
 8a6:	ae 01       	movw	r20, r28
 8a8:	4f 57       	subi	r20, 0x7F	; 127
 8aa:	5f 4f       	sbci	r21, 0xFF	; 255
 8ac:	be 01       	movw	r22, r28
 8ae:	6f 5f       	subi	r22, 0xFF	; 255
 8b0:	7f 4f       	sbci	r23, 0xFF	; 255
 8b2:	c9 51       	subi	r28, 0x19	; 25
 8b4:	df 4f       	sbci	r29, 0xFF	; 255
 8b6:	88 81       	ld	r24, Y
 8b8:	99 81       	ldd	r25, Y+1	; 0x01
 8ba:	c7 5e       	subi	r28, 0xE7	; 231
 8bc:	d0 40       	sbci	r29, 0x00	; 0
 8be:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <seleccion_orden>
 8c2:	bf ef       	ldi	r27, 0xFF	; 255
 8c4:	21 ee       	ldi	r18, 0xE1	; 225
 8c6:	44 e0       	ldi	r20, 0x04	; 4
 8c8:	b1 50       	subi	r27, 0x01	; 1
 8ca:	20 40       	sbci	r18, 0x00	; 0
 8cc:	40 40       	sbci	r20, 0x00	; 0
 8ce:	e1 f7       	brne	.-8      	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8d2:	00 00       	nop
			
			_delay_ms(200);
		}
		
		hola(PORT,MENSAJE);
 8d4:	be 01       	movw	r22, r28
 8d6:	67 5f       	subi	r22, 0xF7	; 247
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	ce 01       	movw	r24, r28
 8dc:	01 96       	adiw	r24, 0x01	; 1
 8de:	0e 94 cb 00 	call	0x196	; 0x196 <hola>
			if (PINC == 0x41 && valor3) {
				jugadores = 3;
				break;
			}
		}
		valor3 = 0;
 8e2:	00 e0       	ldi	r16, 0x00	; 0
 8e4:	10 e0       	ldi	r17, 0x00	; 0
			
			while (PIND == 0x6){
			}	
		}*/
		
	}
 8e6:	87 ce       	rjmp	.-754    	; 0x5f6 <main+0x15a>

000008e8 <__divmodsi4>:
 8e8:	05 2e       	mov	r0, r21
 8ea:	97 fb       	bst	r25, 7
 8ec:	1e f4       	brtc	.+6      	; 0x8f4 <__divmodsi4+0xc>
 8ee:	00 94       	com	r0
 8f0:	0e 94 8b 04 	call	0x916	; 0x916 <__negsi2>
 8f4:	57 fd       	sbrc	r21, 7
 8f6:	07 d0       	rcall	.+14     	; 0x906 <__divmodsi4_neg2>
 8f8:	0e 94 93 04 	call	0x926	; 0x926 <__udivmodsi4>
 8fc:	07 fc       	sbrc	r0, 7
 8fe:	03 d0       	rcall	.+6      	; 0x906 <__divmodsi4_neg2>
 900:	4e f4       	brtc	.+18     	; 0x914 <__divmodsi4_exit>
 902:	0c 94 8b 04 	jmp	0x916	; 0x916 <__negsi2>

00000906 <__divmodsi4_neg2>:
 906:	50 95       	com	r21
 908:	40 95       	com	r20
 90a:	30 95       	com	r19
 90c:	21 95       	neg	r18
 90e:	3f 4f       	sbci	r19, 0xFF	; 255
 910:	4f 4f       	sbci	r20, 0xFF	; 255
 912:	5f 4f       	sbci	r21, 0xFF	; 255

00000914 <__divmodsi4_exit>:
 914:	08 95       	ret

00000916 <__negsi2>:
 916:	90 95       	com	r25
 918:	80 95       	com	r24
 91a:	70 95       	com	r23
 91c:	61 95       	neg	r22
 91e:	7f 4f       	sbci	r23, 0xFF	; 255
 920:	8f 4f       	sbci	r24, 0xFF	; 255
 922:	9f 4f       	sbci	r25, 0xFF	; 255
 924:	08 95       	ret

00000926 <__udivmodsi4>:
 926:	a1 e2       	ldi	r26, 0x21	; 33
 928:	1a 2e       	mov	r1, r26
 92a:	aa 1b       	sub	r26, r26
 92c:	bb 1b       	sub	r27, r27
 92e:	fd 01       	movw	r30, r26
 930:	0d c0       	rjmp	.+26     	; 0x94c <__udivmodsi4_ep>

00000932 <__udivmodsi4_loop>:
 932:	aa 1f       	adc	r26, r26
 934:	bb 1f       	adc	r27, r27
 936:	ee 1f       	adc	r30, r30
 938:	ff 1f       	adc	r31, r31
 93a:	a2 17       	cp	r26, r18
 93c:	b3 07       	cpc	r27, r19
 93e:	e4 07       	cpc	r30, r20
 940:	f5 07       	cpc	r31, r21
 942:	20 f0       	brcs	.+8      	; 0x94c <__udivmodsi4_ep>
 944:	a2 1b       	sub	r26, r18
 946:	b3 0b       	sbc	r27, r19
 948:	e4 0b       	sbc	r30, r20
 94a:	f5 0b       	sbc	r31, r21

0000094c <__udivmodsi4_ep>:
 94c:	66 1f       	adc	r22, r22
 94e:	77 1f       	adc	r23, r23
 950:	88 1f       	adc	r24, r24
 952:	99 1f       	adc	r25, r25
 954:	1a 94       	dec	r1
 956:	69 f7       	brne	.-38     	; 0x932 <__udivmodsi4_loop>
 958:	60 95       	com	r22
 95a:	70 95       	com	r23
 95c:	80 95       	com	r24
 95e:	90 95       	com	r25
 960:	9b 01       	movw	r18, r22
 962:	ac 01       	movw	r20, r24
 964:	bd 01       	movw	r22, r26
 966:	cf 01       	movw	r24, r30
 968:	08 95       	ret

0000096a <random_r>:
 96a:	8f 92       	push	r8
 96c:	9f 92       	push	r9
 96e:	af 92       	push	r10
 970:	bf 92       	push	r11
 972:	cf 92       	push	r12
 974:	df 92       	push	r13
 976:	ef 92       	push	r14
 978:	ff 92       	push	r15
 97a:	cf 93       	push	r28
 97c:	df 93       	push	r29
 97e:	ec 01       	movw	r28, r24
 980:	68 81       	ld	r22, Y
 982:	79 81       	ldd	r23, Y+1	; 0x01
 984:	8a 81       	ldd	r24, Y+2	; 0x02
 986:	9b 81       	ldd	r25, Y+3	; 0x03
 988:	61 15       	cp	r22, r1
 98a:	71 05       	cpc	r23, r1
 98c:	81 05       	cpc	r24, r1
 98e:	91 05       	cpc	r25, r1
 990:	21 f4       	brne	.+8      	; 0x99a <random_r+0x30>
 992:	64 e2       	ldi	r22, 0x24	; 36
 994:	79 ed       	ldi	r23, 0xD9	; 217
 996:	8b e5       	ldi	r24, 0x5B	; 91
 998:	97 e0       	ldi	r25, 0x07	; 7
 99a:	2d e1       	ldi	r18, 0x1D	; 29
 99c:	33 ef       	ldi	r19, 0xF3	; 243
 99e:	41 e0       	ldi	r20, 0x01	; 1
 9a0:	50 e0       	ldi	r21, 0x00	; 0
 9a2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodsi4>
 9a6:	49 01       	movw	r8, r18
 9a8:	5a 01       	movw	r10, r20
 9aa:	9b 01       	movw	r18, r22
 9ac:	ac 01       	movw	r20, r24
 9ae:	a7 ea       	ldi	r26, 0xA7	; 167
 9b0:	b1 e4       	ldi	r27, 0x41	; 65
 9b2:	0e 94 57 05 	call	0xaae	; 0xaae <__muluhisi3>
 9b6:	6b 01       	movw	r12, r22
 9b8:	7c 01       	movw	r14, r24
 9ba:	ac ee       	ldi	r26, 0xEC	; 236
 9bc:	b4 ef       	ldi	r27, 0xF4	; 244
 9be:	a5 01       	movw	r20, r10
 9c0:	94 01       	movw	r18, r8
 9c2:	0e 94 65 05 	call	0xaca	; 0xaca <__mulohisi3>
 9c6:	dc 01       	movw	r26, r24
 9c8:	cb 01       	movw	r24, r22
 9ca:	8c 0d       	add	r24, r12
 9cc:	9d 1d       	adc	r25, r13
 9ce:	ae 1d       	adc	r26, r14
 9d0:	bf 1d       	adc	r27, r15
 9d2:	b7 ff       	sbrs	r27, 7
 9d4:	03 c0       	rjmp	.+6      	; 0x9dc <random_r+0x72>
 9d6:	01 97       	sbiw	r24, 0x01	; 1
 9d8:	a1 09       	sbc	r26, r1
 9da:	b0 48       	sbci	r27, 0x80	; 128
 9dc:	88 83       	st	Y, r24
 9de:	99 83       	std	Y+1, r25	; 0x01
 9e0:	aa 83       	std	Y+2, r26	; 0x02
 9e2:	bb 83       	std	Y+3, r27	; 0x03
 9e4:	bc 01       	movw	r22, r24
 9e6:	cd 01       	movw	r24, r26
 9e8:	9f 77       	andi	r25, 0x7F	; 127
 9ea:	df 91       	pop	r29
 9ec:	cf 91       	pop	r28
 9ee:	ff 90       	pop	r15
 9f0:	ef 90       	pop	r14
 9f2:	df 90       	pop	r13
 9f4:	cf 90       	pop	r12
 9f6:	bf 90       	pop	r11
 9f8:	af 90       	pop	r10
 9fa:	9f 90       	pop	r9
 9fc:	8f 90       	pop	r8
 9fe:	08 95       	ret

00000a00 <random>:
 a00:	8f 92       	push	r8
 a02:	9f 92       	push	r9
 a04:	af 92       	push	r10
 a06:	bf 92       	push	r11
 a08:	cf 92       	push	r12
 a0a:	df 92       	push	r13
 a0c:	ef 92       	push	r14
 a0e:	ff 92       	push	r15
 a10:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 a14:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 a18:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 a1c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 a20:	61 15       	cp	r22, r1
 a22:	71 05       	cpc	r23, r1
 a24:	81 05       	cpc	r24, r1
 a26:	91 05       	cpc	r25, r1
 a28:	21 f4       	brne	.+8      	; 0xa32 <random+0x32>
 a2a:	64 e2       	ldi	r22, 0x24	; 36
 a2c:	79 ed       	ldi	r23, 0xD9	; 217
 a2e:	8b e5       	ldi	r24, 0x5B	; 91
 a30:	97 e0       	ldi	r25, 0x07	; 7
 a32:	2d e1       	ldi	r18, 0x1D	; 29
 a34:	33 ef       	ldi	r19, 0xF3	; 243
 a36:	41 e0       	ldi	r20, 0x01	; 1
 a38:	50 e0       	ldi	r21, 0x00	; 0
 a3a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodsi4>
 a3e:	49 01       	movw	r8, r18
 a40:	5a 01       	movw	r10, r20
 a42:	9b 01       	movw	r18, r22
 a44:	ac 01       	movw	r20, r24
 a46:	a7 ea       	ldi	r26, 0xA7	; 167
 a48:	b1 e4       	ldi	r27, 0x41	; 65
 a4a:	0e 94 57 05 	call	0xaae	; 0xaae <__muluhisi3>
 a4e:	6b 01       	movw	r12, r22
 a50:	7c 01       	movw	r14, r24
 a52:	ac ee       	ldi	r26, 0xEC	; 236
 a54:	b4 ef       	ldi	r27, 0xF4	; 244
 a56:	a5 01       	movw	r20, r10
 a58:	94 01       	movw	r18, r8
 a5a:	0e 94 65 05 	call	0xaca	; 0xaca <__mulohisi3>
 a5e:	dc 01       	movw	r26, r24
 a60:	cb 01       	movw	r24, r22
 a62:	8c 0d       	add	r24, r12
 a64:	9d 1d       	adc	r25, r13
 a66:	ae 1d       	adc	r26, r14
 a68:	bf 1d       	adc	r27, r15
 a6a:	b7 ff       	sbrs	r27, 7
 a6c:	03 c0       	rjmp	.+6      	; 0xa74 <random+0x74>
 a6e:	01 97       	sbiw	r24, 0x01	; 1
 a70:	a1 09       	sbc	r26, r1
 a72:	b0 48       	sbci	r27, 0x80	; 128
 a74:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 a78:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 a7c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 a80:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 a84:	bc 01       	movw	r22, r24
 a86:	cd 01       	movw	r24, r26
 a88:	9f 77       	andi	r25, 0x7F	; 127
 a8a:	ff 90       	pop	r15
 a8c:	ef 90       	pop	r14
 a8e:	df 90       	pop	r13
 a90:	cf 90       	pop	r12
 a92:	bf 90       	pop	r11
 a94:	af 90       	pop	r10
 a96:	9f 90       	pop	r9
 a98:	8f 90       	pop	r8
 a9a:	08 95       	ret

00000a9c <srandom>:
 a9c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 aa0:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 aa4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 aa8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 aac:	08 95       	ret

00000aae <__muluhisi3>:
 aae:	0e 94 6a 05 	call	0xad4	; 0xad4 <__umulhisi3>
 ab2:	a5 9f       	mul	r26, r21
 ab4:	90 0d       	add	r25, r0
 ab6:	b4 9f       	mul	r27, r20
 ab8:	90 0d       	add	r25, r0
 aba:	a4 9f       	mul	r26, r20
 abc:	80 0d       	add	r24, r0
 abe:	91 1d       	adc	r25, r1
 ac0:	11 24       	eor	r1, r1
 ac2:	08 95       	ret

00000ac4 <__mulshisi3>:
 ac4:	b7 ff       	sbrs	r27, 7
 ac6:	0c 94 57 05 	jmp	0xaae	; 0xaae <__muluhisi3>

00000aca <__mulohisi3>:
 aca:	0e 94 57 05 	call	0xaae	; 0xaae <__muluhisi3>
 ace:	82 1b       	sub	r24, r18
 ad0:	93 0b       	sbc	r25, r19
 ad2:	08 95       	ret

00000ad4 <__umulhisi3>:
 ad4:	a2 9f       	mul	r26, r18
 ad6:	b0 01       	movw	r22, r0
 ad8:	b3 9f       	mul	r27, r19
 ada:	c0 01       	movw	r24, r0
 adc:	a3 9f       	mul	r26, r19
 ade:	70 0d       	add	r23, r0
 ae0:	81 1d       	adc	r24, r1
 ae2:	11 24       	eor	r1, r1
 ae4:	91 1d       	adc	r25, r1
 ae6:	b2 9f       	mul	r27, r18
 ae8:	70 0d       	add	r23, r0
 aea:	81 1d       	adc	r24, r1
 aec:	11 24       	eor	r1, r1
 aee:	91 1d       	adc	r25, r1
 af0:	08 95       	ret

00000af2 <_exit>:
 af2:	f8 94       	cli

00000af4 <__stop_program>:
 af4:	ff cf       	rjmp	.-2      	; 0xaf4 <__stop_program>
