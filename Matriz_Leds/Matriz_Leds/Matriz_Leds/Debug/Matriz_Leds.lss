
Matriz_Leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  0000178a  000017fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000178a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000194c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000020fc  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082a  00000000  00000000  00003b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cce  00000000  00000000  0000436a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000370  00000000  00000000  00005038  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f8  00000000  00000000  000053a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b2c  00000000  00000000  000059a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  000074cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	ea e8       	ldi	r30, 0x8A	; 138
      fe:	f7 e1       	ldi	r31, 0x17	; 23
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	ac 31       	cpi	r26, 0x1C	; 28
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>
     10c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <main>
     110:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <filas>:
	//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
	for (int i=0;i<32;i++)
	{
		filas(i,10,PORT,MENSAJE);
	}
}
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	ec 01       	movw	r28, r24
     122:	00 e0       	ldi	r16, 0x00	; 0
     124:	10 e0       	ldi	r17, 0x00	; 0
     126:	1c c0       	rjmp	.+56     	; 0x160 <filas+0x48>
     128:	da 01       	movw	r26, r20
     12a:	ae 0f       	add	r26, r30
     12c:	bf 1f       	adc	r27, r31
     12e:	9c 91       	ld	r25, X
     130:	9b b9       	out	0x0b, r25	; 11
     132:	df 01       	movw	r26, r30
     134:	ac 0f       	add	r26, r28
     136:	bd 1f       	adc	r27, r29
     138:	a2 0f       	add	r26, r18
     13a:	b3 1f       	adc	r27, r19
     13c:	9c 91       	ld	r25, X
     13e:	90 95       	com	r25
     140:	95 b9       	out	0x05, r25	; 5
     142:	83 ef       	ldi	r24, 0xF3	; 243
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	01 97       	sbiw	r24, 0x01	; 1
     148:	f1 f7       	brne	.-4      	; 0x146 <filas+0x2e>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <filas+0x34>
     14c:	00 00       	nop
     14e:	31 96       	adiw	r30, 0x01	; 1
     150:	02 c0       	rjmp	.+4      	; 0x156 <filas+0x3e>
     152:	e0 e0       	ldi	r30, 0x00	; 0
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	e8 30       	cpi	r30, 0x08	; 8
     158:	f1 05       	cpc	r31, r1
     15a:	34 f3       	brlt	.-52     	; 0x128 <filas+0x10>
     15c:	0f 5f       	subi	r16, 0xFF	; 255
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	06 17       	cp	r16, r22
     162:	17 07       	cpc	r17, r23
     164:	b4 f3       	brlt	.-20     	; 0x152 <filas+0x3a>
     166:	df 91       	pop	r29
     168:	cf 91       	pop	r28
     16a:	1f 91       	pop	r17
     16c:	0f 91       	pop	r16
     16e:	08 95       	ret

00000170 <animacion1>:
     170:	ef 92       	push	r14
     172:	ff 92       	push	r15
     174:	0f 93       	push	r16
     176:	1f 93       	push	r17
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	8c 01       	movw	r16, r24
     17e:	7b 01       	movw	r14, r22
     180:	c0 e0       	ldi	r28, 0x00	; 0
     182:	d0 e0       	ldi	r29, 0x00	; 0
     184:	08 c0       	rjmp	.+16     	; 0x196 <animacion1+0x26>
     186:	97 01       	movw	r18, r14
     188:	a8 01       	movw	r20, r16
     18a:	65 e0       	ldi	r22, 0x05	; 5
     18c:	70 e0       	ldi	r23, 0x00	; 0
     18e:	ce 01       	movw	r24, r28
     190:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
     194:	28 96       	adiw	r28, 0x08	; 8
     196:	c9 31       	cpi	r28, 0x19	; 25
     198:	d1 05       	cpc	r29, r1
     19a:	ac f3       	brlt	.-22     	; 0x186 <animacion1+0x16>
     19c:	c8 e1       	ldi	r28, 0x18	; 24
     19e:	d0 e0       	ldi	r29, 0x00	; 0
     1a0:	08 c0       	rjmp	.+16     	; 0x1b2 <animacion1+0x42>
     1a2:	97 01       	movw	r18, r14
     1a4:	a8 01       	movw	r20, r16
     1a6:	65 e0       	ldi	r22, 0x05	; 5
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	ce 01       	movw	r24, r28
     1ac:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
     1b0:	28 97       	sbiw	r28, 0x08	; 8
     1b2:	dd 23       	and	r29, r29
     1b4:	b4 f7       	brge	.-20     	; 0x1a2 <animacion1+0x32>
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	ff 90       	pop	r15
     1c0:	ef 90       	pop	r14
     1c2:	08 95       	ret

000001c4 <animacion2>:
     1c4:	ef 92       	push	r14
     1c6:	ff 92       	push	r15
     1c8:	0f 93       	push	r16
     1ca:	1f 93       	push	r17
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	8c 01       	movw	r16, r24
     1d2:	7b 01       	movw	r14, r22
     1d4:	c0 e0       	ldi	r28, 0x00	; 0
     1d6:	d0 e0       	ldi	r29, 0x00	; 0
     1d8:	08 c0       	rjmp	.+16     	; 0x1ea <animacion2+0x26>
     1da:	97 01       	movw	r18, r14
     1dc:	a8 01       	movw	r20, r16
     1de:	65 e0       	ldi	r22, 0x05	; 5
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	ce 01       	movw	r24, r28
     1e4:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
     1e8:	28 96       	adiw	r28, 0x08	; 8
     1ea:	c9 31       	cpi	r28, 0x19	; 25
     1ec:	d1 05       	cpc	r29, r1
     1ee:	ac f3       	brlt	.-22     	; 0x1da <animacion2+0x16>
     1f0:	c8 e1       	ldi	r28, 0x18	; 24
     1f2:	d0 e0       	ldi	r29, 0x00	; 0
     1f4:	08 c0       	rjmp	.+16     	; 0x206 <animacion2+0x42>
     1f6:	97 01       	movw	r18, r14
     1f8:	a8 01       	movw	r20, r16
     1fa:	65 e0       	ldi	r22, 0x05	; 5
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	ce 01       	movw	r24, r28
     200:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
     204:	28 97       	sbiw	r28, 0x08	; 8
     206:	dd 23       	and	r29, r29
     208:	b4 f7       	brge	.-20     	; 0x1f6 <animacion2+0x32>
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	1f 91       	pop	r17
     210:	0f 91       	pop	r16
     212:	ff 90       	pop	r15
     214:	ef 90       	pop	r14
     216:	08 95       	ret

00000218 <squid_game>:

void squid_game(char PORT[], char SQUID_GAME[]) {
     218:	ef 92       	push	r14
     21a:	ff 92       	push	r15
     21c:	0f 93       	push	r16
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	7c 01       	movw	r14, r24
     226:	8b 01       	movw	r16, r22
	PORTC = ((1<<3));
     228:	88 e0       	ldi	r24, 0x08	; 8
     22a:	88 b9       	out	0x08, r24	; 8
	//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
	for (int i=0;i<80;i++)
     22c:	c0 e0       	ldi	r28, 0x00	; 0
     22e:	d0 e0       	ldi	r29, 0x00	; 0
     230:	08 c0       	rjmp	.+16     	; 0x242 <squid_game+0x2a>
	{
		filas(i,7,PORT,SQUID_GAME);
     232:	98 01       	movw	r18, r16
     234:	a7 01       	movw	r20, r14
     236:	67 e0       	ldi	r22, 0x07	; 7
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	ce 01       	movw	r24, r28
     23c:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
}

void squid_game(char PORT[], char SQUID_GAME[]) {
	PORTC = ((1<<3));
	//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
	for (int i=0;i<80;i++)
     240:	21 96       	adiw	r28, 0x01	; 1
     242:	c0 35       	cpi	r28, 0x50	; 80
     244:	d1 05       	cpc	r29, r1
     246:	ac f3       	brlt	.-22     	; 0x232 <squid_game+0x1a>
	{
		filas(i,7,PORT,SQUID_GAME);
	}
	PORTC = ((0<<3));
     248:	18 b8       	out	0x08, r1	; 8
}
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
     252:	ff 90       	pop	r15
     254:	ef 90       	pop	r14
     256:	08 95       	ret

00000258 <numero>:

void numero(char PORT[], char NUMERO[]){
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	7c 01       	movw	r14, r24
     266:	8b 01       	movw	r16, r22
	for (int i=0;i<8;i+=8)
     268:	c0 e0       	ldi	r28, 0x00	; 0
     26a:	d0 e0       	ldi	r29, 0x00	; 0
     26c:	08 c0       	rjmp	.+16     	; 0x27e <numero+0x26>
	{
		filas(i,10,PORT,NUMERO);
     26e:	98 01       	movw	r18, r16
     270:	a7 01       	movw	r20, r14
     272:	6a e0       	ldi	r22, 0x0A	; 10
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	ce 01       	movw	r24, r28
     278:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
	}
	PORTC = ((0<<3));
}

void numero(char PORT[], char NUMERO[]){
	for (int i=0;i<8;i+=8)
     27c:	28 96       	adiw	r28, 0x08	; 8
     27e:	c8 30       	cpi	r28, 0x08	; 8
     280:	d1 05       	cpc	r29, r1
     282:	ac f3       	brlt	.-22     	; 0x26e <numero+0x16>
	{
		filas(i,10,PORT,NUMERO);
	}
}
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	1f 91       	pop	r17
     28a:	0f 91       	pop	r16
     28c:	ff 90       	pop	r15
     28e:	ef 90       	pop	r14
     290:	08 95       	ret

00000292 <uno>:

void uno(char PORT[], char UNO[]){
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	7c 01       	movw	r14, r24
     2a0:	8b 01       	movw	r16, r22
	for (int i=0;i<8;i+=8)
     2a2:	c0 e0       	ldi	r28, 0x00	; 0
     2a4:	d0 e0       	ldi	r29, 0x00	; 0
     2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <uno+0x26>
	{
		filas(i,10,PORT,UNO);
     2a8:	98 01       	movw	r18, r16
     2aa:	a7 01       	movw	r20, r14
     2ac:	6a e0       	ldi	r22, 0x0A	; 10
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	ce 01       	movw	r24, r28
     2b2:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
		filas(i,10,PORT,NUMERO);
	}
}

void uno(char PORT[], char UNO[]){
	for (int i=0;i<8;i+=8)
     2b6:	28 96       	adiw	r28, 0x08	; 8
     2b8:	c8 30       	cpi	r28, 0x08	; 8
     2ba:	d1 05       	cpc	r29, r1
     2bc:	ac f3       	brlt	.-22     	; 0x2a8 <uno+0x16>
	{
		filas(i,10,PORT,UNO);
	}
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	08 95       	ret

000002cc <dos>:

void dos(char PORT[], char DOS[]){
     2cc:	ef 92       	push	r14
     2ce:	ff 92       	push	r15
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	7c 01       	movw	r14, r24
     2da:	8b 01       	movw	r16, r22
	for (int i=0;i<8;i+=8)
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
     2de:	d0 e0       	ldi	r29, 0x00	; 0
     2e0:	08 c0       	rjmp	.+16     	; 0x2f2 <dos+0x26>
	{
		filas(i,10,PORT,DOS);
     2e2:	98 01       	movw	r18, r16
     2e4:	a7 01       	movw	r20, r14
     2e6:	6a e0       	ldi	r22, 0x0A	; 10
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	ce 01       	movw	r24, r28
     2ec:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
		filas(i,10,PORT,UNO);
	}
}

void dos(char PORT[], char DOS[]){
	for (int i=0;i<8;i+=8)
     2f0:	28 96       	adiw	r28, 0x08	; 8
     2f2:	c8 30       	cpi	r28, 0x08	; 8
     2f4:	d1 05       	cpc	r29, r1
     2f6:	ac f3       	brlt	.-22     	; 0x2e2 <dos+0x16>
	{
		filas(i,10,PORT,DOS);
	}
}
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	08 95       	ret

00000306 <tres>:

void tres(char PORT[], char TRES[]){
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	7c 01       	movw	r14, r24
     314:	8b 01       	movw	r16, r22
	for (int i=0;i<8;i+=8)
     316:	c0 e0       	ldi	r28, 0x00	; 0
     318:	d0 e0       	ldi	r29, 0x00	; 0
     31a:	08 c0       	rjmp	.+16     	; 0x32c <tres+0x26>
	{
		filas(i,10,PORT,TRES);
     31c:	98 01       	movw	r18, r16
     31e:	a7 01       	movw	r20, r14
     320:	6a e0       	ldi	r22, 0x0A	; 10
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	ce 01       	movw	r24, r28
     326:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
		filas(i,10,PORT,DOS);
	}
}

void tres(char PORT[], char TRES[]){
	for (int i=0;i<8;i+=8)
     32a:	28 96       	adiw	r28, 0x08	; 8
     32c:	c8 30       	cpi	r28, 0x08	; 8
     32e:	d1 05       	cpc	r29, r1
     330:	ac f3       	brlt	.-22     	; 0x31c <tres+0x16>
	{
		filas(i,10,PORT,TRES);
	}
}
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	ff 90       	pop	r15
     33c:	ef 90       	pop	r14
     33e:	08 95       	ret

00000340 <cuatro>:

void cuatro(char PORT[], char CUATRO[]){
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	7c 01       	movw	r14, r24
     34e:	8b 01       	movw	r16, r22
	for (int i=0;i<8;i+=8)
     350:	c0 e0       	ldi	r28, 0x00	; 0
     352:	d0 e0       	ldi	r29, 0x00	; 0
     354:	08 c0       	rjmp	.+16     	; 0x366 <cuatro+0x26>
	{
		filas(i,10,PORT,CUATRO);
     356:	98 01       	movw	r18, r16
     358:	a7 01       	movw	r20, r14
     35a:	6a e0       	ldi	r22, 0x0A	; 10
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	ce 01       	movw	r24, r28
     360:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
		filas(i,10,PORT,TRES);
	}
}

void cuatro(char PORT[], char CUATRO[]){
	for (int i=0;i<8;i+=8)
     364:	28 96       	adiw	r28, 0x08	; 8
     366:	c8 30       	cpi	r28, 0x08	; 8
     368:	d1 05       	cpc	r29, r1
     36a:	ac f3       	brlt	.-22     	; 0x356 <cuatro+0x16>
	{
		filas(i,10,PORT,CUATRO);
	}
}
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	ff 90       	pop	r15
     376:	ef 90       	pop	r14
     378:	08 95       	ret

0000037a <esquina>:

void esquina(char PORT[], char ESQUINA[]){
     37a:	ef 92       	push	r14
     37c:	ff 92       	push	r15
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	7c 01       	movw	r14, r24
     388:	8b 01       	movw	r16, r22
	for (int i=0;i<=8;i+=8)
     38a:	c0 e0       	ldi	r28, 0x00	; 0
     38c:	d0 e0       	ldi	r29, 0x00	; 0
     38e:	08 c0       	rjmp	.+16     	; 0x3a0 <esquina+0x26>
	{
		filas(i,100,PORT,ESQUINA);
     390:	98 01       	movw	r18, r16
     392:	a7 01       	movw	r20, r14
     394:	64 e6       	ldi	r22, 0x64	; 100
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	ce 01       	movw	r24, r28
     39a:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
		filas(i,10,PORT,CUATRO);
	}
}

void esquina(char PORT[], char ESQUINA[]){
	for (int i=0;i<=8;i+=8)
     39e:	28 96       	adiw	r28, 0x08	; 8
     3a0:	c9 30       	cpi	r28, 0x09	; 9
     3a2:	d1 05       	cpc	r29, r1
     3a4:	ac f3       	brlt	.-22     	; 0x390 <esquina+0x16>
	{
		filas(i,100,PORT,ESQUINA);
	}
}
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	1f 91       	pop	r17
     3ac:	0f 91       	pop	r16
     3ae:	ff 90       	pop	r15
     3b0:	ef 90       	pop	r14
     3b2:	08 95       	ret

000003b4 <numeros_sorteo>:

void semilla(unsigned char valor){
	srandom(valor);
}*/

void numeros_sorteo(char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
     3b4:	af 92       	push	r10
     3b6:	bf 92       	push	r11
     3b8:	cf 92       	push	r12
     3ba:	df 92       	push	r13
     3bc:	ef 92       	push	r14
     3be:	ff 92       	push	r15
     3c0:	0f 93       	push	r16
     3c2:	1f 93       	push	r17
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	ec 01       	movw	r28, r24
     3ca:	5b 01       	movw	r10, r22
     3cc:	7a 01       	movw	r14, r20
     3ce:	69 01       	movw	r12, r18
	dos(PORT,DOS);_delay_ms(20);
     3d0:	ba 01       	movw	r22, r20
     3d2:	0e 94 66 01 	call	0x2cc	; 0x2cc <dos>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d6:	8f e3       	ldi	r24, 0x3F	; 63
     3d8:	9c e9       	ldi	r25, 0x9C	; 156
     3da:	01 97       	sbiw	r24, 0x01	; 1
     3dc:	f1 f7       	brne	.-4      	; 0x3da <numeros_sorteo+0x26>
     3de:	00 c0       	rjmp	.+0      	; 0x3e0 <numeros_sorteo+0x2c>
     3e0:	00 00       	nop
	uno(PORT,UNO);_delay_ms(20);
     3e2:	b5 01       	movw	r22, r10
     3e4:	ce 01       	movw	r24, r28
     3e6:	0e 94 49 01 	call	0x292	; 0x292 <uno>
     3ea:	8f e3       	ldi	r24, 0x3F	; 63
     3ec:	9c e9       	ldi	r25, 0x9C	; 156
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	f1 f7       	brne	.-4      	; 0x3ee <numeros_sorteo+0x3a>
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <numeros_sorteo+0x40>
     3f4:	00 00       	nop
	cuatro(PORT,CUATRO);_delay_ms(20);
     3f6:	b8 01       	movw	r22, r16
     3f8:	ce 01       	movw	r24, r28
     3fa:	0e 94 a0 01 	call	0x340	; 0x340 <cuatro>
     3fe:	8f e3       	ldi	r24, 0x3F	; 63
     400:	9c e9       	ldi	r25, 0x9C	; 156
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     406:	00 c0       	rjmp	.+0      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     408:	00 00       	nop
	tres(PORT,TRES);_delay_ms(20);
     40a:	b6 01       	movw	r22, r12
     40c:	ce 01       	movw	r24, r28
     40e:	0e 94 83 01 	call	0x306	; 0x306 <tres>
     412:	8f e3       	ldi	r24, 0x3F	; 63
     414:	9c e9       	ldi	r25, 0x9C	; 156
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     41c:	00 00       	nop
	uno(PORT,UNO);_delay_ms(20);
     41e:	b5 01       	movw	r22, r10
     420:	ce 01       	movw	r24, r28
     422:	0e 94 49 01 	call	0x292	; 0x292 <uno>
     426:	8f e3       	ldi	r24, 0x3F	; 63
     428:	9c e9       	ldi	r25, 0x9C	; 156
     42a:	01 97       	sbiw	r24, 0x01	; 1
     42c:	f1 f7       	brne	.-4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     42e:	00 c0       	rjmp	.+0      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     430:	00 00       	nop
	tres(PORT,TRES);_delay_ms(20);
     432:	b6 01       	movw	r22, r12
     434:	ce 01       	movw	r24, r28
     436:	0e 94 83 01 	call	0x306	; 0x306 <tres>
     43a:	8f e3       	ldi	r24, 0x3F	; 63
     43c:	9c e9       	ldi	r25, 0x9C	; 156
     43e:	01 97       	sbiw	r24, 0x01	; 1
     440:	f1 f7       	brne	.-4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     442:	00 c0       	rjmp	.+0      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     444:	00 00       	nop
	dos(PORT,DOS);_delay_ms(20);
     446:	b7 01       	movw	r22, r14
     448:	ce 01       	movw	r24, r28
     44a:	0e 94 66 01 	call	0x2cc	; 0x2cc <dos>
     44e:	8f e3       	ldi	r24, 0x3F	; 63
     450:	9c e9       	ldi	r25, 0x9C	; 156
     452:	01 97       	sbiw	r24, 0x01	; 1
     454:	f1 f7       	brne	.-4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     456:	00 c0       	rjmp	.+0      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     458:	00 00       	nop
}
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	df 90       	pop	r13
     468:	cf 90       	pop	r12
     46a:	bf 90       	pop	r11
     46c:	af 90       	pop	r10
     46e:	08 95       	ret

00000470 <seleccion_orden>:

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
     470:	af 92       	push	r10
     472:	bf 92       	push	r11
     474:	cf 92       	push	r12
     476:	df 92       	push	r13
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	eb 01       	movw	r28, r22
     486:	5a 01       	movw	r10, r20
     488:	69 01       	movw	r12, r18
	switch(valor){
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	91 05       	cpc	r25, r1
     48e:	f1 f0       	breq	.+60     	; 0x4cc <seleccion_orden+0x5c>
     490:	1c f4       	brge	.+6      	; 0x498 <seleccion_orden+0x28>
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	71 f0       	breq	.+28     	; 0x4b2 <seleccion_orden+0x42>
     496:	3b c0       	rjmp	.+118    	; 0x50e <seleccion_orden+0x9e>
     498:	83 30       	cpi	r24, 0x03	; 3
     49a:	91 05       	cpc	r25, r1
     49c:	29 f1       	breq	.+74     	; 0x4e8 <seleccion_orden+0x78>
     49e:	04 97       	sbiw	r24, 0x04	; 4
     4a0:	89 f1       	breq	.+98     	; 0x504 <seleccion_orden+0x94>
     4a2:	35 c0       	rjmp	.+106    	; 0x50e <seleccion_orden+0x9e>
		case 1:
			for (int i=0; i<20; i++){
				uno(PORT,UNO);
     4a4:	b5 01       	movw	r22, r10
     4a6:	ce 01       	movw	r24, r28
     4a8:	0e 94 49 01 	call	0x292	; 0x292 <uno>
}

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
		case 1:
			for (int i=0; i<20; i++){
     4ac:	0f 5f       	subi	r16, 0xFF	; 255
     4ae:	1f 4f       	sbci	r17, 0xFF	; 255
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <seleccion_orden+0x46>
	tres(PORT,TRES);_delay_ms(20);
	dos(PORT,DOS);_delay_ms(20);
}

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
     4b2:	00 e0       	ldi	r16, 0x00	; 0
     4b4:	10 e0       	ldi	r17, 0x00	; 0
		case 1:
			for (int i=0; i<20; i++){
     4b6:	04 31       	cpi	r16, 0x14	; 20
     4b8:	11 05       	cpc	r17, r1
     4ba:	a4 f3       	brlt	.-24     	; 0x4a4 <seleccion_orden+0x34>
     4bc:	28 c0       	rjmp	.+80     	; 0x50e <seleccion_orden+0x9e>
				uno(PORT,UNO);
			}
			break;
		case 2:
			for (int i=0; i<20; i++){
				dos(PORT,DOS);
     4be:	b6 01       	movw	r22, r12
     4c0:	ce 01       	movw	r24, r28
     4c2:	0e 94 66 01 	call	0x2cc	; 0x2cc <dos>
			for (int i=0; i<20; i++){
				uno(PORT,UNO);
			}
			break;
		case 2:
			for (int i=0; i<20; i++){
     4c6:	0f 5f       	subi	r16, 0xFF	; 255
     4c8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <seleccion_orden+0x60>
	tres(PORT,TRES);_delay_ms(20);
	dos(PORT,DOS);_delay_ms(20);
}

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
     4cc:	00 e0       	ldi	r16, 0x00	; 0
     4ce:	10 e0       	ldi	r17, 0x00	; 0
			for (int i=0; i<20; i++){
				uno(PORT,UNO);
			}
			break;
		case 2:
			for (int i=0; i<20; i++){
     4d0:	04 31       	cpi	r16, 0x14	; 20
     4d2:	11 05       	cpc	r17, r1
     4d4:	a4 f3       	brlt	.-24     	; 0x4be <seleccion_orden+0x4e>
     4d6:	1b c0       	rjmp	.+54     	; 0x50e <seleccion_orden+0x9e>
				dos(PORT,DOS);
			}
			break;
		case 3:
			for (int i=0; i<20; i++){
				tres(PORT,TRES);
     4d8:	b8 01       	movw	r22, r16
     4da:	ce 01       	movw	r24, r28
     4dc:	0e 94 83 01 	call	0x306	; 0x306 <tres>
			for (int i=0; i<20; i++){
				dos(PORT,DOS);
			}
			break;
		case 3:
			for (int i=0; i<20; i++){
     4e0:	8f ef       	ldi	r24, 0xFF	; 255
     4e2:	e8 1a       	sub	r14, r24
     4e4:	f8 0a       	sbc	r15, r24
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <seleccion_orden+0x7c>
	tres(PORT,TRES);_delay_ms(20);
	dos(PORT,DOS);_delay_ms(20);
}

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
     4e8:	e1 2c       	mov	r14, r1
     4ea:	f1 2c       	mov	r15, r1
			for (int i=0; i<20; i++){
				dos(PORT,DOS);
			}
			break;
		case 3:
			for (int i=0; i<20; i++){
     4ec:	84 e1       	ldi	r24, 0x14	; 20
     4ee:	e8 16       	cp	r14, r24
     4f0:	f1 04       	cpc	r15, r1
     4f2:	94 f3       	brlt	.-28     	; 0x4d8 <seleccion_orden+0x68>
     4f4:	0c c0       	rjmp	.+24     	; 0x50e <seleccion_orden+0x9e>
				tres(PORT,TRES);
			}
			break;
		case 4:
			for (int i=0; i<20; i++){
				cuatro(PORT,CUATRO);
     4f6:	b7 01       	movw	r22, r14
     4f8:	ce 01       	movw	r24, r28
     4fa:	0e 94 a0 01 	call	0x340	; 0x340 <cuatro>
			for (int i=0; i<20; i++){
				tres(PORT,TRES);
			}
			break;
		case 4:
			for (int i=0; i<20; i++){
     4fe:	0f 5f       	subi	r16, 0xFF	; 255
     500:	1f 4f       	sbci	r17, 0xFF	; 255
     502:	02 c0       	rjmp	.+4      	; 0x508 <seleccion_orden+0x98>
	tres(PORT,TRES);_delay_ms(20);
	dos(PORT,DOS);_delay_ms(20);
}

void seleccion_orden(int valor, char PORT[], char UNO[], char DOS[], char TRES[], char CUATRO[]){
	switch(valor){
     504:	00 e0       	ldi	r16, 0x00	; 0
     506:	10 e0       	ldi	r17, 0x00	; 0
			for (int i=0; i<20; i++){
				tres(PORT,TRES);
			}
			break;
		case 4:
			for (int i=0; i<20; i++){
     508:	04 31       	cpi	r16, 0x14	; 20
     50a:	11 05       	cpc	r17, r1
     50c:	a4 f3       	brlt	.-24     	; 0x4f6 <seleccion_orden+0x86>
				cuatro(PORT,CUATRO);
			}
			break;
	}
}
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	ff 90       	pop	r15
     518:	ef 90       	pop	r14
     51a:	df 90       	pop	r13
     51c:	cf 90       	pop	r12
     51e:	bf 90       	pop	r11
     520:	af 90       	pop	r10
     522:	08 95       	ret

00000524 <piso>:

void piso(char PORT[], char PISO[]){
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	7c 01       	movw	r14, r24
     532:	8b 01       	movw	r16, r22
	for (int i=0;i<8;i+=8)
     534:	c0 e0       	ldi	r28, 0x00	; 0
     536:	d0 e0       	ldi	r29, 0x00	; 0
     538:	08 c0       	rjmp	.+16     	; 0x54a <piso+0x26>
	{
		filas(i,10,PORT,PISO);
     53a:	98 01       	movw	r18, r16
     53c:	a7 01       	movw	r20, r14
     53e:	6a e0       	ldi	r22, 0x0A	; 10
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	ce 01       	movw	r24, r28
     544:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
			break;
	}
}

void piso(char PORT[], char PISO[]){
	for (int i=0;i<8;i+=8)
     548:	28 96       	adiw	r28, 0x08	; 8
     54a:	c8 30       	cpi	r28, 0x08	; 8
     54c:	d1 05       	cpc	r29, r1
     54e:	ac f3       	brlt	.-22     	; 0x53a <piso+0x16>
	{
		filas(i,10,PORT,PISO);
	}
}
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	08 95       	ret

0000055e <ganaste>:

void ganaste(char PORT[], char GANASTE[]) {
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	7c 01       	movw	r14, r24
     56c:	8b 01       	movw	r16, r22
	//MENSAJE DE VICTORIA
	PORTC = ((1<<5));
     56e:	80 e2       	ldi	r24, 0x20	; 32
     570:	88 b9       	out	0x08, r24	; 8
	for (int i=0;i<56;i++)
     572:	c0 e0       	ldi	r28, 0x00	; 0
     574:	d0 e0       	ldi	r29, 0x00	; 0
     576:	08 c0       	rjmp	.+16     	; 0x588 <ganaste+0x2a>
	{
		filas(i,10,PORT,GANASTE);
     578:	98 01       	movw	r18, r16
     57a:	a7 01       	movw	r20, r14
     57c:	6a e0       	ldi	r22, 0x0A	; 10
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	ce 01       	movw	r24, r28
     582:	0e 94 8c 00 	call	0x118	; 0x118 <filas>
}

void ganaste(char PORT[], char GANASTE[]) {
	//MENSAJE DE VICTORIA
	PORTC = ((1<<5));
	for (int i=0;i<56;i++)
     586:	21 96       	adiw	r28, 0x01	; 1
     588:	c8 33       	cpi	r28, 0x38	; 56
     58a:	d1 05       	cpc	r29, r1
     58c:	ac f3       	brlt	.-22     	; 0x578 <ganaste+0x1a>
	{
		filas(i,10,PORT,GANASTE);
	}
	PORTC = ((1<<5));
     58e:	80 e2       	ldi	r24, 0x20	; 32
     590:	88 b9       	out	0x08, r24	; 8
}
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	08 95       	ret

000005a0 <main>:

int main(void)
{
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	cc 56       	subi	r28, 0x6C	; 108
     5aa:	d1 40       	sbci	r29, 0x01	; 1
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
	// PARA EL DATO
	DDRB = 0B11111111; // SALIDA TODO EL PUERTO B
     5b6:	8f ef       	ldi	r24, 0xFF	; 255
     5b8:	84 b9       	out	0x04, r24	; 4
	
	// PARA EL DESPLAZMIENTO
	DDRD = 0B11111111; // SALIDAS TODO EL PUERTO D
     5ba:	8a b9       	out	0x0a, r24	; 10
	
	// PARA LAS BOTONERAS
	DDRC |= (0<<0)|(0<<1)|(0<<2); //ENTRADAS PARA LOS PUERTOS C0,C1,C2
     5bc:	87 b1       	in	r24, 0x07	; 7
     5be:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1<<3)|(1<<4)|(1<<5); //SALIDA PARA EL PUERTO C3 MUSICA RED LIGHT GREEN LIGHT, C4 CLICK, y C5 VICTORIA
     5c0:	87 b1       	in	r24, 0x07	; 7
     5c2:	88 63       	ori	r24, 0x38	; 56
     5c4:	87 b9       	out	0x07, r24	; 7
		
	//UART_init();
	
	// VA CON EL DESPLAZMIENTO
	char PORT[8] =  {1,2,4,8,16,32,64,128};//VALORES DE PINES DEL PORTD
     5c6:	88 e0       	ldi	r24, 0x08	; 8
     5c8:	e4 e0       	ldi	r30, 0x04	; 4
     5ca:	f1 e0       	ldi	r31, 0x01	; 1
     5cc:	de 01       	movw	r26, r28
     5ce:	11 96       	adiw	r26, 0x01	; 1
     5d0:	01 90       	ld	r0, Z+
     5d2:	0d 92       	st	X+, r0
     5d4:	8a 95       	dec	r24
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <main+0x30>
	// VALORES DE LA ELIMINACION DE CADA PISO DE ABAJO HACIA ARRIBA
	char PISO_FUERA[8] = {127,191,223,239,247,251,253,254};
		
	// UBICACIONES
	char UBICACION_SUPERIOR[2] = {129,80};
	char UBICACION_INFERIOR[2] = {129,1};
     5d8:	0f 2e       	mov	r0, r31
     5da:	f1 e8       	ldi	r31, 0x81	; 129
     5dc:	5f 2e       	mov	r5, r31
     5de:	f0 2d       	mov	r31, r0
     5e0:	44 24       	eor	r4, r4
     5e2:	43 94       	inc	r4
	
	char SQUID_GAME[]={0x0, 0x44, 0x4A, 0x4A, 0x4A, 0x4A, 0x32, 0x0, //S
     5e4:	88 e5       	ldi	r24, 0x58	; 88
     5e6:	ec e0       	ldi	r30, 0x0C	; 12
     5e8:	f1 e0       	ldi	r31, 0x01	; 1
     5ea:	de 01       	movw	r26, r28
     5ec:	19 96       	adiw	r26, 0x09	; 9
     5ee:	01 90       	ld	r0, Z+
     5f0:	0d 92       	st	X+, r0
     5f2:	8a 95       	dec	r24
     5f4:	e1 f7       	brne	.-8      	; 0x5ee <main+0x4e>
		0x0, 0x7e, 0x7e, 0x66, 0x66, 0x7e, 0x7e, 0x0, //O
		0x0, 0x7e, 0x7e, 0x60, 0x60, 0x60, 0x60, 0x0, //L
		0x0, 0x7e, 0x7e, 0x16, 0x16, 0x7e, 0x7e, 0x0, //A
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}; //ESPACIO
	
	char ANIMACION1[] = {
     5f6:	80 e2       	ldi	r24, 0x20	; 32
     5f8:	e4 e6       	ldi	r30, 0x64	; 100
     5fa:	f1 e0       	ldi	r31, 0x01	; 1
     5fc:	de 01       	movw	r26, r28
     5fe:	af 59       	subi	r26, 0x9F	; 159
     600:	bf 4f       	sbci	r27, 0xFF	; 255
     602:	01 90       	ld	r0, Z+
     604:	0d 92       	st	X+, r0
     606:	8a 95       	dec	r24
     608:	e1 f7       	brne	.-8      	; 0x602 <main+0x62>
		0x0, 0x0, 0x24, 0x0, 0x0, 0x24, 0x0, 0x0, // CENTRO 2
		0x0, 0x42, 0x0, 0x0, 0x0, 0x0, 0x42, 0x0, // CENTRO 3
		0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81 // CENTRO 4
	};
	
	char ANIMACION2[] = {
     60a:	80 e2       	ldi	r24, 0x20	; 32
     60c:	e4 e8       	ldi	r30, 0x84	; 132
     60e:	f1 e0       	ldi	r31, 0x01	; 1
     610:	de 01       	movw	r26, r28
     612:	af 57       	subi	r26, 0x7F	; 127
     614:	bf 4f       	sbci	r27, 0xFF	; 255
     616:	01 90       	ld	r0, Z+
     618:	0d 92       	st	X+, r0
     61a:	8a 95       	dec	r24
     61c:	e1 f7       	brne	.-8      	; 0x616 <main+0x76>
		0x0, 0x0, 0x3C, 0x24, 0x24, 0x3C, 0x0, 0x0, // CENTRO 2
		0x0, 0x7E, 0x42, 0x42, 0x42, 0x42, 0x7E, 0x0, // CENTRO 3
		0xFF, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xFF // CENTRO 4
	};
	
	char NUMERO3[] = {
     61e:	88 e0       	ldi	r24, 0x08	; 8
     620:	e4 ea       	ldi	r30, 0xA4	; 164
     622:	f1 e0       	ldi	r31, 0x01	; 1
     624:	de 01       	movw	r26, r28
     626:	af 55       	subi	r26, 0x5F	; 95
     628:	bf 4f       	sbci	r27, 0xFF	; 255
     62a:	01 90       	ld	r0, Z+
     62c:	0d 92       	st	X+, r0
     62e:	8a 95       	dec	r24
     630:	e1 f7       	brne	.-8      	; 0x62a <main+0x8a>
		0x00, 0x00, 0x11, 0x15, 0x15, 0x1F, 0xA0, 0x40, // CON FLECHAS
		//0x0, 0x0, 0x11, 0x15, 0x15, 0x1F, 0x0, 0x0 // SIN FLECHAS
	};
	
	char NUMERO4[] = {
     632:	88 e0       	ldi	r24, 0x08	; 8
     634:	ec ea       	ldi	r30, 0xAC	; 172
     636:	f1 e0       	ldi	r31, 0x01	; 1
     638:	de 01       	movw	r26, r28
     63a:	a7 55       	subi	r26, 0x57	; 87
     63c:	bf 4f       	sbci	r27, 0xFF	; 255
     63e:	01 90       	ld	r0, Z+
     640:	0d 92       	st	X+, r0
     642:	8a 95       	dec	r24
     644:	e1 f7       	brne	.-8      	; 0x63e <main+0x9e>
		0x40, 0xA0, 0x07, 0x04, 0x04, 0x1F, 0x0, 0x0, // CON FLECHAS
		//0x0, 0x0, 0x07, 0x04, 0x04, 0x1F, 0x0, 0x0 // SIN FLECHAS
	};
	
	char UNO[] = {
     646:	88 e0       	ldi	r24, 0x08	; 8
     648:	e4 eb       	ldi	r30, 0xB4	; 180
     64a:	f1 e0       	ldi	r31, 0x01	; 1
     64c:	de 01       	movw	r26, r28
     64e:	af 54       	subi	r26, 0x4F	; 79
     650:	bf 4f       	sbci	r27, 0xFF	; 255
     652:	01 90       	ld	r0, Z+
     654:	0d 92       	st	X+, r0
     656:	8a 95       	dec	r24
     658:	e1 f7       	brne	.-8      	; 0x652 <main+0xb2>
		0x0, 0x0, 0x04, 0x04, 0x7E, 0x7E, 0x0, 0x0
	};
	
	char DOS[] = {
     65a:	88 e0       	ldi	r24, 0x08	; 8
     65c:	ec eb       	ldi	r30, 0xBC	; 188
     65e:	f1 e0       	ldi	r31, 0x01	; 1
     660:	de 01       	movw	r26, r28
     662:	a7 54       	subi	r26, 0x47	; 71
     664:	bf 4f       	sbci	r27, 0xFF	; 255
     666:	01 90       	ld	r0, Z+
     668:	0d 92       	st	X+, r0
     66a:	8a 95       	dec	r24
     66c:	e1 f7       	brne	.-8      	; 0x666 <main+0xc6>
		0x0, 0x0, 0x7A, 0x7A, 0x5E, 0x5E, 0x0, 0x0
	};
	
	char TRES[] = {
     66e:	88 e0       	ldi	r24, 0x08	; 8
     670:	e4 ec       	ldi	r30, 0xC4	; 196
     672:	f1 e0       	ldi	r31, 0x01	; 1
     674:	de 01       	movw	r26, r28
     676:	af 53       	subi	r26, 0x3F	; 63
     678:	bf 4f       	sbci	r27, 0xFF	; 255
     67a:	01 90       	ld	r0, Z+
     67c:	0d 92       	st	X+, r0
     67e:	8a 95       	dec	r24
     680:	e1 f7       	brne	.-8      	; 0x67a <main+0xda>
		0x0, 0x0, 0x5A, 0x5A, 0x7E, 0x7E, 0x0, 0x0
	};
	
	char CUATRO[] = {
     682:	88 e0       	ldi	r24, 0x08	; 8
     684:	ec ec       	ldi	r30, 0xCC	; 204
     686:	f1 e0       	ldi	r31, 0x01	; 1
     688:	de 01       	movw	r26, r28
     68a:	a7 53       	subi	r26, 0x37	; 55
     68c:	bf 4f       	sbci	r27, 0xFF	; 255
     68e:	01 90       	ld	r0, Z+
     690:	0d 92       	st	X+, r0
     692:	8a 95       	dec	r24
     694:	e1 f7       	brne	.-8      	; 0x68e <main+0xee>
		0x0, 0x0, 0x18, 0x1C, 0x72, 0x7E, 0x0, 0x0
	};
	
	char ESQUINA1[] = {
     696:	fe 01       	movw	r30, r28
     698:	ef 52       	subi	r30, 0x2F	; 47
     69a:	ff 4f       	sbci	r31, 0xFF	; 255
     69c:	80 e1       	ldi	r24, 0x10	; 16
     69e:	df 01       	movw	r26, r30
     6a0:	28 2f       	mov	r18, r24
     6a2:	1d 92       	st	X+, r1
     6a4:	2a 95       	dec	r18
     6a6:	e9 f7       	brne	.-6      	; 0x6a2 <main+0x102>
     6a8:	40 82       	st	Z, r4
		0x01, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	};
	
	char ESQUINA2[] = {
     6aa:	70 96       	adiw	r30, 0x10	; 16
     6ac:	df 01       	movw	r26, r30
     6ae:	28 2f       	mov	r18, r24
     6b0:	1d 92       	st	X+, r1
     6b2:	2a 95       	dec	r18
     6b4:	e9 f7       	brne	.-6      	; 0x6b0 <main+0x110>
     6b6:	47 82       	std	Z+7, r4	; 0x07
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x01,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	};
	
	char ESQUINA3[] = {
     6b8:	70 96       	adiw	r30, 0x10	; 16
     6ba:	df 01       	movw	r26, r30
     6bc:	28 2f       	mov	r18, r24
     6be:	1d 92       	st	X+, r1
     6c0:	2a 95       	dec	r18
     6c2:	e9 f7       	brne	.-6      	; 0x6be <main+0x11e>
     6c4:	90 e8       	ldi	r25, 0x80	; 128
     6c6:	90 83       	st	Z, r25
		0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	};
	
	char ESQUINA4[] = {
     6c8:	70 96       	adiw	r30, 0x10	; 16
     6ca:	df 01       	movw	r26, r30
     6cc:	1d 92       	st	X+, r1
     6ce:	8a 95       	dec	r24
     6d0:	e9 f7       	brne	.-6      	; 0x6cc <main+0x12c>
     6d2:	97 83       	std	Z+7, r25	; 0x07
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	};
	
	char PISO[] = {
     6d4:	70 96       	adiw	r30, 0x10	; 16
     6d6:	88 e0       	ldi	r24, 0x08	; 8
     6d8:	df 01       	movw	r26, r30
     6da:	1d 92       	st	X+, r1
     6dc:	8a 95       	dec	r24
     6de:	e9 f7       	brne	.-6      	; 0x6da <main+0x13a>
		0,0,0,0,0,0,0,0
	};
	
	char GANASTE[] = {
     6e0:	80 e4       	ldi	r24, 0x40	; 64
     6e2:	e4 ed       	ldi	r30, 0xD4	; 212
     6e4:	f1 e0       	ldi	r31, 0x01	; 1
     6e6:	de 01       	movw	r26, r28
     6e8:	a7 5e       	subi	r26, 0xE7	; 231
     6ea:	be 4f       	sbci	r27, 0xFE	; 254
     6ec:	01 90       	ld	r0, Z+
     6ee:	0d 92       	st	X+, r0
     6f0:	8a 95       	dec	r24
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <main+0x14c>
		0x0, 0x7E, 0x4A, 0x4A, 0x4A, 0x42, 0x42, 0x0, //E
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 //ESPACIO
	};
	
	int inicio = 0;
	int valor3 = 1;
     6f4:	01 e0       	ldi	r16, 0x01	; 1
     6f6:	10 e0       	ldi	r17, 0x00	; 0
		0x0, 0x02, 0x02, 0x7E, 0x7E, 0x02, 0x02, 0x0, //T
		0x0, 0x7E, 0x4A, 0x4A, 0x4A, 0x42, 0x42, 0x0, //E
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 //ESPACIO
	};
	
	int inicio = 0;
     6f8:	c1 2c       	mov	r12, r1
     6fa:	d1 2c       	mov	r13, r1
     6fc:	2a c0       	rjmp	.+84     	; 0x752 <main+0x1b2>
	int jugadores = 0;
	
	while(1){
		
		while (!inicio) {
			animacion1(PORT,ANIMACION1);
     6fe:	be 01       	movw	r22, r28
     700:	6f 59       	subi	r22, 0x9F	; 159
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	ce 01       	movw	r24, r28
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	0e 94 b8 00 	call	0x170	; 0x170 <animacion1>
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
     70c:	86 b1       	in	r24, 0x06	; 6
     70e:	81 34       	cpi	r24, 0x41	; 65
     710:	59 f4       	brne	.+22     	; 0x728 <main+0x188>
				inicio = 1;
				squid_game(PORT,SQUID_GAME);
     712:	be 01       	movw	r22, r28
     714:	67 5f       	subi	r22, 0xF7	; 247
     716:	7f 4f       	sbci	r23, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	0e 94 0c 01 	call	0x218	; 0x218 <squid_game>
		
		while (!inicio) {
			animacion1(PORT,ANIMACION1);
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
				inicio = 1;
     720:	cc 24       	eor	r12, r12
     722:	c3 94       	inc	r12
     724:	d1 2c       	mov	r13, r1
				squid_game(PORT,SQUID_GAME);
				break;
     726:	18 c0       	rjmp	.+48     	; 0x758 <main+0x1b8>
			}
			animacion2(PORT,ANIMACION2);
     728:	be 01       	movw	r22, r28
     72a:	6f 57       	subi	r22, 0x7F	; 127
     72c:	7f 4f       	sbci	r23, 0xFF	; 255
     72e:	ce 01       	movw	r24, r28
     730:	01 96       	adiw	r24, 0x01	; 1
     732:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <animacion2>
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
     736:	86 b1       	in	r24, 0x06	; 6
     738:	81 34       	cpi	r24, 0x41	; 65
     73a:	59 f4       	brne	.+22     	; 0x752 <main+0x1b2>
				inicio = 1;
				squid_game(PORT,SQUID_GAME);
     73c:	be 01       	movw	r22, r28
     73e:	67 5f       	subi	r22, 0xF7	; 247
     740:	7f 4f       	sbci	r23, 0xFF	; 255
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	0e 94 0c 01 	call	0x218	; 0x218 <squid_game>
				break;
			}
			animacion2(PORT,ANIMACION2);
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
				inicio = 1;
     74a:	cc 24       	eor	r12, r12
     74c:	c3 94       	inc	r12
     74e:	d1 2c       	mov	r13, r1
				squid_game(PORT,SQUID_GAME);
				break;
     750:	03 c0       	rjmp	.+6      	; 0x758 <main+0x1b8>
	int valor3 = 1;
	int jugadores = 0;
	
	while(1){
		
		while (!inicio) {
     752:	c1 14       	cp	r12, r1
     754:	d1 04       	cpc	r13, r1
     756:	99 f2       	breq	.-90     	; 0x6fe <main+0x15e>
		/* EMPIEZA LA SELECCION DE CANTIDAD DE JUGADORES CON:
		DERECHA: 0B 0100 0010
		IZQUIERDA: 0B 0100 0100 */
		
		//NUMERO 3 CON FLECHA A LA DERECHA
		jugadores = 0;
     758:	a1 2c       	mov	r10, r1
     75a:	b1 2c       	mov	r11, r1
		while (valor3) {
     75c:	36 c0       	rjmp	.+108    	; 0x7ca <main+0x22a>
			numero(PORT,NUMERO3);
     75e:	be 01       	movw	r22, r28
     760:	6f 55       	subi	r22, 0x5F	; 95
     762:	7f 4f       	sbci	r23, 0xFF	; 255
     764:	ce 01       	movw	r24, r28
     766:	01 96       	adiw	r24, 0x01	; 1
     768:	0e 94 2c 01 	call	0x258	; 0x258 <numero>
			// SI PRESIONA PARA LA DERECHA
			if (PINC == 0x42) {
     76c:	86 b1       	in	r24, 0x06	; 6
     76e:	82 34       	cpi	r24, 0x42	; 66
     770:	31 f5       	brne	.+76     	; 0x7be <main+0x21e>
				// SONIDO DEL CLICK
				PORTC = ((1<<4));
     772:	80 e1       	ldi	r24, 0x10	; 16
     774:	88 b9       	out	0x08, r24	; 8
     776:	83 ef       	ldi	r24, 0xF3	; 243
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	f1 f7       	brne	.-4      	; 0x77a <main+0x1da>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <main+0x1e0>
     780:	00 00       	nop
				_delay_ms(0.25);
				PORTC = ((0<<4));
     782:	18 b8       	out	0x08, r1	; 8
				while (1) {
					numero(PORT,NUMERO4);
     784:	be 01       	movw	r22, r28
     786:	67 55       	subi	r22, 0x57	; 87
     788:	7f 4f       	sbci	r23, 0xFF	; 255
     78a:	ce 01       	movw	r24, r28
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	0e 94 2c 01 	call	0x258	; 0x258 <numero>
					// SI PRESIONA PARA LA IZQUIERDA
					if (PINC == 0x44) {
     792:	86 b1       	in	r24, 0x06	; 6
     794:	84 34       	cpi	r24, 0x44	; 68
     796:	51 f4       	brne	.+20     	; 0x7ac <main+0x20c>
						// SONIDO DEL CLICK
						PORTC = ((1<<4));
     798:	80 e1       	ldi	r24, 0x10	; 16
     79a:	88 b9       	out	0x08, r24	; 8
     79c:	a3 ef       	ldi	r26, 0xF3	; 243
     79e:	b1 e0       	ldi	r27, 0x01	; 1
     7a0:	11 97       	sbiw	r26, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <main+0x200>
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <main+0x206>
     7a6:	00 00       	nop
						_delay_ms(0.25);
						PORTC = ((0<<4));
     7a8:	18 b8       	out	0x08, r1	; 8
						break;
     7aa:	09 c0       	rjmp	.+18     	; 0x7be <main+0x21e>
					}
					// SI SELECCIONA LA OPCION DE 4 JUGADORES
					if (PINC == 0x41) {
     7ac:	86 b1       	in	r24, 0x06	; 6
     7ae:	81 34       	cpi	r24, 0x41	; 65
     7b0:	49 f7       	brne	.-46     	; 0x784 <main+0x1e4>
						jugadores = 4;
     7b2:	68 94       	set
     7b4:	aa 24       	eor	r10, r10
     7b6:	a2 f8       	bld	r10, 2
     7b8:	b1 2c       	mov	r11, r1
						valor3 = 0;
     7ba:	00 e0       	ldi	r16, 0x00	; 0
     7bc:	10 e0       	ldi	r17, 0x00	; 0
						break;
					}
				}
			}
			// SI SELECCIONA LA OPCION DE 3 JUGADORES
			if (PINC == 0x41 && valor3) {
     7be:	86 b1       	in	r24, 0x06	; 6
     7c0:	81 34       	cpi	r24, 0x41	; 65
     7c2:	19 f4       	brne	.+6      	; 0x7ca <main+0x22a>
     7c4:	01 15       	cp	r16, r1
     7c6:	11 05       	cpc	r17, r1
     7c8:	21 f4       	brne	.+8      	; 0x7d2 <main+0x232>
		DERECHA: 0B 0100 0010
		IZQUIERDA: 0B 0100 0100 */
		
		//NUMERO 3 CON FLECHA A LA DERECHA
		jugadores = 0;
		while (valor3) {
     7ca:	01 15       	cp	r16, r1
     7cc:	11 05       	cpc	r17, r1
     7ce:	39 f6       	brne	.-114    	; 0x75e <main+0x1be>
     7d0:	05 c0       	rjmp	.+10     	; 0x7dc <main+0x23c>
					}
				}
			}
			// SI SELECCIONA LA OPCION DE 3 JUGADORES
			if (PINC == 0x41 && valor3) {
				jugadores = 3;
     7d2:	0f 2e       	mov	r0, r31
     7d4:	f3 e0       	ldi	r31, 0x03	; 3
     7d6:	af 2e       	mov	r10, r31
     7d8:	b1 2c       	mov	r11, r1
     7da:	f0 2d       	mov	r31, r0
				break;
			}
		}
		valor3 = 0;
		
		if (jugadores == 3){
     7dc:	b3 e0       	ldi	r27, 0x03	; 3
     7de:	ab 16       	cp	r10, r27
     7e0:	b1 04       	cpc	r11, r1
     7e2:	09 f0       	breq	.+2      	; 0x7e6 <main+0x246>
     7e4:	df c0       	rjmp	.+446    	; 0x9a4 <__stack+0xa5>
			//PARA EL CASO DE LAS 3 ESQUINAS
			int referencia[4] = {1,2,3};
     7e6:	fe 01       	movw	r30, r28
     7e8:	ef 59       	subi	r30, 0x9F	; 159
     7ea:	fe 4f       	sbci	r31, 0xFE	; 254
     7ec:	88 e0       	ldi	r24, 0x08	; 8
     7ee:	df 01       	movw	r26, r30
     7f0:	28 2f       	mov	r18, r24
     7f2:	1d 92       	st	X+, r1
     7f4:	2a 95       	dec	r18
     7f6:	e9 f7       	brne	.-6      	; 0x7f2 <main+0x252>
     7f8:	21 e0       	ldi	r18, 0x01	; 1
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	31 83       	std	Z+1, r19	; 0x01
     7fe:	20 83       	st	Z, r18
     800:	22 e0       	ldi	r18, 0x02	; 2
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	33 83       	std	Z+3, r19	; 0x03
     806:	22 83       	std	Z+2, r18	; 0x02
     808:	23 e0       	ldi	r18, 0x03	; 3
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	35 83       	std	Z+5, r19	; 0x05
     80e:	24 83       	std	Z+4, r18	; 0x04
			int orden_juego[4] = {0,0,0};
     810:	38 97       	sbiw	r30, 0x08	; 8
     812:	df 01       	movw	r26, r30
     814:	1d 92       	st	X+, r1
     816:	8a 95       	dec	r24
     818:	e9 f7       	brne	.-6      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
			int aleatorio = 0;
			
			for (int i=0; i<3; i++){
     81a:	00 e0       	ldi	r16, 0x00	; 0
     81c:	10 e0       	ldi	r17, 0x00	; 0
     81e:	29 c0       	rjmp	.+82     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
				// VALOR ALEATORIO PARA ESCOGER UNA POSICION DE LA REFERENCIA
				do {
					aleatorio = random()%3; //[0,3) // LO USO PARA LAS POSICIONES
     820:	0e 94 4a 0b 	call	0x1694	; 0x1694 <random>
     824:	23 e0       	ldi	r18, 0x03	; 3
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	0e 94 be 0a 	call	0x157c	; 0x157c <__divmodsi4>
				} while (referencia[aleatorio] == 0);
     830:	66 0f       	add	r22, r22
     832:	77 1f       	adc	r23, r23
     834:	e1 e6       	ldi	r30, 0x61	; 97
     836:	f1 e0       	ldi	r31, 0x01	; 1
     838:	ec 0f       	add	r30, r28
     83a:	fd 1f       	adc	r31, r29
     83c:	e6 0f       	add	r30, r22
     83e:	f7 1f       	adc	r31, r23
     840:	80 81       	ld	r24, Z
     842:	91 81       	ldd	r25, Z+1	; 0x01
     844:	00 97       	sbiw	r24, 0x00	; 0
     846:	61 f3       	breq	.-40     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
				
				orden_juego[i] = referencia[aleatorio];
     848:	f8 01       	movw	r30, r16
     84a:	ee 0f       	add	r30, r30
     84c:	ff 1f       	adc	r31, r31
     84e:	49 e5       	ldi	r20, 0x59	; 89
     850:	51 e0       	ldi	r21, 0x01	; 1
     852:	4c 0f       	add	r20, r28
     854:	5d 1f       	adc	r21, r29
     856:	e4 0f       	add	r30, r20
     858:	f5 1f       	adc	r31, r21
     85a:	91 83       	std	Z+1, r25	; 0x01
     85c:	80 83       	st	Z, r24
				referencia[aleatorio] = 0;
     85e:	e1 e6       	ldi	r30, 0x61	; 97
     860:	f1 e0       	ldi	r31, 0x01	; 1
     862:	ec 0f       	add	r30, r28
     864:	fd 1f       	adc	r31, r29
     866:	e6 0f       	add	r30, r22
     868:	f7 1f       	adc	r31, r23
     86a:	11 82       	std	Z+1, r1	; 0x01
     86c:	10 82       	st	Z, r1
			//PARA EL CASO DE LAS 3 ESQUINAS
			int referencia[4] = {1,2,3};
			int orden_juego[4] = {0,0,0};
			int aleatorio = 0;
			
			for (int i=0; i<3; i++){
     86e:	0f 5f       	subi	r16, 0xFF	; 255
     870:	1f 4f       	sbci	r17, 0xFF	; 255
     872:	03 30       	cpi	r16, 0x03	; 3
     874:	11 05       	cpc	r17, r1
     876:	a4 f2       	brlt	.-88     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
				referencia[aleatorio] = 0;
			}
			
			// MOVIMIENTO DE LOS NUMEROS
			// TURNO ESQUINA 1
			PORTC = ((1<<4));
     878:	68 94       	set
     87a:	99 24       	eor	r9, r9
     87c:	94 f8       	bld	r9, 4
     87e:	98 b8       	out	0x08, r9	; 8
     880:	83 ef       	ldi	r24, 0xF3	; 243
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	f1 f7       	brne	.-4      	; 0x884 <__DATA_REGION_LENGTH__+0x84>
     888:	00 c0       	rjmp	.+0      	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
     88a:	00 00       	nop
			_delay_ms(0.25);
			PORTC = ((0<<4));
     88c:	18 b8       	out	0x08, r1	; 8
			esquina(PORT,ESQUINA1);
     88e:	be 01       	movw	r22, r28
     890:	6f 52       	subi	r22, 0x2F	; 47
     892:	7f 4f       	sbci	r23, 0xFF	; 255
     894:	ce 01       	movw	r24, r28
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	0e 94 bd 01 	call	0x37a	; 0x37a <esquina>
			numeros_sorteo(PORT,UNO,DOS,TRES,CUATRO);
     89c:	8e 01       	movw	r16, r28
     89e:	07 53       	subi	r16, 0x37	; 55
     8a0:	1f 4f       	sbci	r17, 0xFF	; 255
     8a2:	9e 01       	movw	r18, r28
     8a4:	2f 53       	subi	r18, 0x3F	; 63
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255
     8a8:	ae 01       	movw	r20, r28
     8aa:	47 54       	subi	r20, 0x47	; 71
     8ac:	5f 4f       	sbci	r21, 0xFF	; 255
     8ae:	be 01       	movw	r22, r28
     8b0:	6f 54       	subi	r22, 0x4F	; 79
     8b2:	7f 4f       	sbci	r23, 0xFF	; 255
     8b4:	ce 01       	movw	r24, r28
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <numeros_sorteo>
			seleccion_orden(orden_juego[0],PORT,UNO,DOS,TRES,CUATRO);
     8bc:	78 01       	movw	r14, r16
     8be:	08 50       	subi	r16, 0x08	; 8
     8c0:	11 09       	sbc	r17, r1
     8c2:	9e 01       	movw	r18, r28
     8c4:	27 54       	subi	r18, 0x47	; 71
     8c6:	3f 4f       	sbci	r19, 0xFF	; 255
     8c8:	ae 01       	movw	r20, r28
     8ca:	4f 54       	subi	r20, 0x4F	; 79
     8cc:	5f 4f       	sbci	r21, 0xFF	; 255
     8ce:	be 01       	movw	r22, r28
     8d0:	6f 5f       	subi	r22, 0xFF	; 255
     8d2:	7f 4f       	sbci	r23, 0xFF	; 255
     8d4:	c7 5a       	subi	r28, 0xA7	; 167
     8d6:	de 4f       	sbci	r29, 0xFE	; 254
     8d8:	88 81       	ld	r24, Y
     8da:	99 81       	ldd	r25, Y+1	; 0x01
     8dc:	c9 55       	subi	r28, 0x59	; 89
     8de:	d1 40       	sbci	r29, 0x01	; 1
     8e0:	0e 94 38 02 	call	0x470	; 0x470 <seleccion_orden>
			
			
			// TURNO ESQUINA 2
			PORTC = ((1<<4));
     8e4:	98 b8       	out	0x08, r9	; 8
     8e6:	83 ef       	ldi	r24, 0xF3	; 243
     8e8:	91 e0       	ldi	r25, 0x01	; 1
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	f1 f7       	brne	.-4      	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
     8f0:	00 00       	nop
			_delay_ms(0.25);
			PORTC = ((0<<4));
     8f2:	18 b8       	out	0x08, r1	; 8
			esquina(PORT,ESQUINA2);
     8f4:	be 01       	movw	r22, r28
     8f6:	6f 51       	subi	r22, 0x1F	; 31
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	ce 01       	movw	r24, r28
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	0e 94 bd 01 	call	0x37a	; 0x37a <esquina>
			numeros_sorteo(PORT,UNO,DOS,TRES,CUATRO);
     902:	87 01       	movw	r16, r14
     904:	9e 01       	movw	r18, r28
     906:	2f 53       	subi	r18, 0x3F	; 63
     908:	3f 4f       	sbci	r19, 0xFF	; 255
     90a:	ae 01       	movw	r20, r28
     90c:	47 54       	subi	r20, 0x47	; 71
     90e:	5f 4f       	sbci	r21, 0xFF	; 255
     910:	be 01       	movw	r22, r28
     912:	6f 54       	subi	r22, 0x4F	; 79
     914:	7f 4f       	sbci	r23, 0xFF	; 255
     916:	ce 01       	movw	r24, r28
     918:	01 96       	adiw	r24, 0x01	; 1
     91a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <numeros_sorteo>
			seleccion_orden(orden_juego[1],PORT,UNO,DOS,TRES,CUATRO);
     91e:	08 50       	subi	r16, 0x08	; 8
     920:	11 09       	sbc	r17, r1
     922:	9e 01       	movw	r18, r28
     924:	27 54       	subi	r18, 0x47	; 71
     926:	3f 4f       	sbci	r19, 0xFF	; 255
     928:	ae 01       	movw	r20, r28
     92a:	4f 54       	subi	r20, 0x4F	; 79
     92c:	5f 4f       	sbci	r21, 0xFF	; 255
     92e:	be 01       	movw	r22, r28
     930:	6f 5f       	subi	r22, 0xFF	; 255
     932:	7f 4f       	sbci	r23, 0xFF	; 255
     934:	c5 5a       	subi	r28, 0xA5	; 165
     936:	de 4f       	sbci	r29, 0xFE	; 254
     938:	88 81       	ld	r24, Y
     93a:	99 81       	ldd	r25, Y+1	; 0x01
     93c:	cb 55       	subi	r28, 0x5B	; 91
     93e:	d1 40       	sbci	r29, 0x01	; 1
     940:	0e 94 38 02 	call	0x470	; 0x470 <seleccion_orden>
			
			// TURNO ESQUINA 3
			PORTC = ((1<<4));
     944:	98 b8       	out	0x08, r9	; 8
     946:	83 ef       	ldi	r24, 0xF3	; 243
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	f1 f7       	brne	.-4      	; 0x94a <__stack+0x4b>
     94e:	00 c0       	rjmp	.+0      	; 0x950 <__stack+0x51>
     950:	00 00       	nop
			_delay_ms(0.25);
			PORTC = ((0<<4));
     952:	18 b8       	out	0x08, r1	; 8
			esquina(PORT,ESQUINA3);
     954:	be 01       	movw	r22, r28
     956:	6f 50       	subi	r22, 0x0F	; 15
     958:	7f 4f       	sbci	r23, 0xFF	; 255
     95a:	ce 01       	movw	r24, r28
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	0e 94 bd 01 	call	0x37a	; 0x37a <esquina>
			numeros_sorteo(PORT,UNO,DOS,TRES,CUATRO);
     962:	87 01       	movw	r16, r14
     964:	9e 01       	movw	r18, r28
     966:	2f 53       	subi	r18, 0x3F	; 63
     968:	3f 4f       	sbci	r19, 0xFF	; 255
     96a:	ae 01       	movw	r20, r28
     96c:	47 54       	subi	r20, 0x47	; 71
     96e:	5f 4f       	sbci	r21, 0xFF	; 255
     970:	be 01       	movw	r22, r28
     972:	6f 54       	subi	r22, 0x4F	; 79
     974:	7f 4f       	sbci	r23, 0xFF	; 255
     976:	ce 01       	movw	r24, r28
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <numeros_sorteo>
			seleccion_orden(orden_juego[2],PORT,UNO,DOS,TRES,CUATRO);
     97e:	08 50       	subi	r16, 0x08	; 8
     980:	11 09       	sbc	r17, r1
     982:	9e 01       	movw	r18, r28
     984:	27 54       	subi	r18, 0x47	; 71
     986:	3f 4f       	sbci	r19, 0xFF	; 255
     988:	ae 01       	movw	r20, r28
     98a:	4f 54       	subi	r20, 0x4F	; 79
     98c:	5f 4f       	sbci	r21, 0xFF	; 255
     98e:	be 01       	movw	r22, r28
     990:	6f 5f       	subi	r22, 0xFF	; 255
     992:	7f 4f       	sbci	r23, 0xFF	; 255
     994:	c3 5a       	subi	r28, 0xA3	; 163
     996:	de 4f       	sbci	r29, 0xFE	; 254
     998:	88 81       	ld	r24, Y
     99a:	99 81       	ldd	r25, Y+1	; 0x01
     99c:	cd 55       	subi	r28, 0x5D	; 93
     99e:	d1 40       	sbci	r29, 0x01	; 1
     9a0:	0e 94 38 02 	call	0x470	; 0x470 <seleccion_orden>
			
		}
		
		if (jugadores == 4){
     9a4:	b4 e0       	ldi	r27, 0x04	; 4
     9a6:	ab 16       	cp	r10, r27
     9a8:	b1 04       	cpc	r11, r1
     9aa:	09 f0       	breq	.+2      	; 0x9ae <__stack+0xaf>
     9ac:	48 c2       	rjmp	.+1168   	; 0xe3e <__stack+0x53f>
			//PARA EL CASO DE LAS 4 ESQUINAS
			int referencia[4] = {1,2,3,4};
     9ae:	88 e0       	ldi	r24, 0x08	; 8
     9b0:	e4 e1       	ldi	r30, 0x14	; 20
     9b2:	f2 e0       	ldi	r31, 0x02	; 2
     9b4:	de 01       	movw	r26, r28
     9b6:	af 59       	subi	r26, 0x9F	; 159
     9b8:	be 4f       	sbci	r27, 0xFE	; 254
     9ba:	01 90       	ld	r0, Z+
     9bc:	0d 92       	st	X+, r0
     9be:	8a 95       	dec	r24
     9c0:	e1 f7       	brne	.-8      	; 0x9ba <__stack+0xbb>
			int orden_juego[4] = {0,0,0,0};
     9c2:	fe 01       	movw	r30, r28
     9c4:	e7 5a       	subi	r30, 0xA7	; 167
     9c6:	fe 4f       	sbci	r31, 0xFE	; 254
     9c8:	88 e0       	ldi	r24, 0x08	; 8
     9ca:	df 01       	movw	r26, r30
     9cc:	1d 92       	st	X+, r1
     9ce:	8a 95       	dec	r24
     9d0:	e9 f7       	brne	.-6      	; 0x9cc <__stack+0xcd>
			int aleatorio = 0;
			
			for (int i=0; i<4; i++){
     9d2:	00 e0       	ldi	r16, 0x00	; 0
     9d4:	10 e0       	ldi	r17, 0x00	; 0
     9d6:	36 c0       	rjmp	.+108    	; 0xa44 <__stack+0x145>
				// VALOR ALEATORIO PARA ESCOGER UNA POSICION DE LA REFERENCIA
				do {
					/*unsigned char valor = numeroAleatorio();
					semilla(valor);*/
					aleatorio = random()%4; //[0,4) // LO USO PARA LAS POSICIONES
     9d8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <random>
     9dc:	dc 01       	movw	r26, r24
     9de:	cb 01       	movw	r24, r22
     9e0:	83 70       	andi	r24, 0x03	; 3
     9e2:	99 27       	eor	r25, r25
     9e4:	aa 27       	eor	r26, r26
     9e6:	b0 78       	andi	r27, 0x80	; 128
     9e8:	bb 23       	and	r27, r27
     9ea:	54 f4       	brge	.+20     	; 0xa00 <__stack+0x101>
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	a1 09       	sbc	r26, r1
     9f0:	b1 09       	sbc	r27, r1
     9f2:	8c 6f       	ori	r24, 0xFC	; 252
     9f4:	9f 6f       	ori	r25, 0xFF	; 255
     9f6:	af 6f       	ori	r26, 0xFF	; 255
     9f8:	bf 6f       	ori	r27, 0xFF	; 255
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	a1 1d       	adc	r26, r1
     9fe:	b1 1d       	adc	r27, r1
				} while (referencia[aleatorio] == 0);
     a00:	bc 01       	movw	r22, r24
     a02:	66 0f       	add	r22, r22
     a04:	77 1f       	adc	r23, r23
     a06:	e1 e6       	ldi	r30, 0x61	; 97
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	ec 0f       	add	r30, r28
     a0c:	fd 1f       	adc	r31, r29
     a0e:	e6 0f       	add	r30, r22
     a10:	f7 1f       	adc	r31, r23
     a12:	80 81       	ld	r24, Z
     a14:	91 81       	ldd	r25, Z+1	; 0x01
     a16:	00 97       	sbiw	r24, 0x00	; 0
     a18:	f9 f2       	breq	.-66     	; 0x9d8 <__stack+0xd9>
				
				orden_juego[i] = referencia[aleatorio];
     a1a:	f8 01       	movw	r30, r16
     a1c:	ee 0f       	add	r30, r30
     a1e:	ff 1f       	adc	r31, r31
     a20:	49 e5       	ldi	r20, 0x59	; 89
     a22:	51 e0       	ldi	r21, 0x01	; 1
     a24:	4c 0f       	add	r20, r28
     a26:	5d 1f       	adc	r21, r29
     a28:	e4 0f       	add	r30, r20
     a2a:	f5 1f       	adc	r31, r21
     a2c:	91 83       	std	Z+1, r25	; 0x01
     a2e:	80 83       	st	Z, r24
				referencia[aleatorio] = 0;
     a30:	e1 e6       	ldi	r30, 0x61	; 97
     a32:	f1 e0       	ldi	r31, 0x01	; 1
     a34:	ec 0f       	add	r30, r28
     a36:	fd 1f       	adc	r31, r29
     a38:	e6 0f       	add	r30, r22
     a3a:	f7 1f       	adc	r31, r23
     a3c:	11 82       	std	Z+1, r1	; 0x01
     a3e:	10 82       	st	Z, r1
			//PARA EL CASO DE LAS 4 ESQUINAS
			int referencia[4] = {1,2,3,4};
			int orden_juego[4] = {0,0,0,0};
			int aleatorio = 0;
			
			for (int i=0; i<4; i++){
     a40:	0f 5f       	subi	r16, 0xFF	; 255
     a42:	1f 4f       	sbci	r17, 0xFF	; 255
     a44:	04 30       	cpi	r16, 0x04	; 4
     a46:	11 05       	cpc	r17, r1
     a48:	3c f2       	brlt	.-114    	; 0x9d8 <__stack+0xd9>
				referencia[aleatorio] = 0;
			}
			
			// MOVIMIENTO DE LOS NUMEROS
			// TURNO ESQUINA 1
			PORTC = ((1<<4));
     a4a:	68 94       	set
     a4c:	bb 24       	eor	r11, r11
     a4e:	b4 f8       	bld	r11, 4
     a50:	b8 b8       	out	0x08, r11	; 8
     a52:	83 ef       	ldi	r24, 0xF3	; 243
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	f1 f7       	brne	.-4      	; 0xa56 <__stack+0x157>
     a5a:	00 c0       	rjmp	.+0      	; 0xa5c <__stack+0x15d>
     a5c:	00 00       	nop
			_delay_ms(0.25);
			PORTC = ((0<<4));
     a5e:	18 b8       	out	0x08, r1	; 8
			esquina(PORT,ESQUINA1);
     a60:	be 01       	movw	r22, r28
     a62:	6f 52       	subi	r22, 0x2F	; 47
     a64:	7f 4f       	sbci	r23, 0xFF	; 255
     a66:	ce 01       	movw	r24, r28
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	0e 94 bd 01 	call	0x37a	; 0x37a <esquina>
			numeros_sorteo(PORT,UNO,DOS,TRES,CUATRO);
     a6e:	8e 01       	movw	r16, r28
     a70:	07 53       	subi	r16, 0x37	; 55
     a72:	1f 4f       	sbci	r17, 0xFF	; 255
     a74:	9e 01       	movw	r18, r28
     a76:	2f 53       	subi	r18, 0x3F	; 63
     a78:	3f 4f       	sbci	r19, 0xFF	; 255
     a7a:	ae 01       	movw	r20, r28
     a7c:	47 54       	subi	r20, 0x47	; 71
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	be 01       	movw	r22, r28
     a82:	6f 54       	subi	r22, 0x4F	; 79
     a84:	7f 4f       	sbci	r23, 0xFF	; 255
     a86:	ce 01       	movw	r24, r28
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <numeros_sorteo>
			seleccion_orden(orden_juego[0],PORT,UNO,DOS,TRES,CUATRO);
     a8e:	78 01       	movw	r14, r16
     a90:	08 50       	subi	r16, 0x08	; 8
     a92:	11 09       	sbc	r17, r1
     a94:	9e 01       	movw	r18, r28
     a96:	27 54       	subi	r18, 0x47	; 71
     a98:	3f 4f       	sbci	r19, 0xFF	; 255
     a9a:	ae 01       	movw	r20, r28
     a9c:	4f 54       	subi	r20, 0x4F	; 79
     a9e:	5f 4f       	sbci	r21, 0xFF	; 255
     aa0:	be 01       	movw	r22, r28
     aa2:	6f 5f       	subi	r22, 0xFF	; 255
     aa4:	7f 4f       	sbci	r23, 0xFF	; 255
     aa6:	c7 5a       	subi	r28, 0xA7	; 167
     aa8:	de 4f       	sbci	r29, 0xFE	; 254
     aaa:	88 81       	ld	r24, Y
     aac:	99 81       	ldd	r25, Y+1	; 0x01
     aae:	c9 55       	subi	r28, 0x59	; 89
     ab0:	d1 40       	sbci	r29, 0x01	; 1
     ab2:	0e 94 38 02 	call	0x470	; 0x470 <seleccion_orden>
			
			
			// TURNO ESQUINA 2
			PORTC = ((1<<4));
     ab6:	b8 b8       	out	0x08, r11	; 8
     ab8:	83 ef       	ldi	r24, 0xF3	; 243
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	f1 f7       	brne	.-4      	; 0xabc <__stack+0x1bd>
     ac0:	00 c0       	rjmp	.+0      	; 0xac2 <__stack+0x1c3>
     ac2:	00 00       	nop
			_delay_ms(0.25);
			PORTC = ((0<<4));
     ac4:	18 b8       	out	0x08, r1	; 8
			esquina(PORT,ESQUINA2);
     ac6:	be 01       	movw	r22, r28
     ac8:	6f 51       	subi	r22, 0x1F	; 31
     aca:	7f 4f       	sbci	r23, 0xFF	; 255
     acc:	ce 01       	movw	r24, r28
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	0e 94 bd 01 	call	0x37a	; 0x37a <esquina>
			numeros_sorteo(PORT,UNO,DOS,TRES,CUATRO);
     ad4:	87 01       	movw	r16, r14
     ad6:	9e 01       	movw	r18, r28
     ad8:	2f 53       	subi	r18, 0x3F	; 63
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	ae 01       	movw	r20, r28
     ade:	47 54       	subi	r20, 0x47	; 71
     ae0:	5f 4f       	sbci	r21, 0xFF	; 255
     ae2:	be 01       	movw	r22, r28
     ae4:	6f 54       	subi	r22, 0x4F	; 79
     ae6:	7f 4f       	sbci	r23, 0xFF	; 255
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	0e 94 da 01 	call	0x3b4	; 0x3b4 <numeros_sorteo>
			seleccion_orden(orden_juego[1],PORT,UNO,DOS,TRES,CUATRO);
     af0:	08 50       	subi	r16, 0x08	; 8
     af2:	11 09       	sbc	r17, r1
     af4:	9e 01       	movw	r18, r28
     af6:	27 54       	subi	r18, 0x47	; 71
     af8:	3f 4f       	sbci	r19, 0xFF	; 255
     afa:	ae 01       	movw	r20, r28
     afc:	4f 54       	subi	r20, 0x4F	; 79
     afe:	5f 4f       	sbci	r21, 0xFF	; 255
     b00:	be 01       	movw	r22, r28
     b02:	6f 5f       	subi	r22, 0xFF	; 255
     b04:	7f 4f       	sbci	r23, 0xFF	; 255
     b06:	c5 5a       	subi	r28, 0xA5	; 165
     b08:	de 4f       	sbci	r29, 0xFE	; 254
     b0a:	88 81       	ld	r24, Y
     b0c:	99 81       	ldd	r25, Y+1	; 0x01
     b0e:	cb 55       	subi	r28, 0x5B	; 91
     b10:	d1 40       	sbci	r29, 0x01	; 1
     b12:	0e 94 38 02 	call	0x470	; 0x470 <seleccion_orden>
			
			// TURNO ESQUINA 3
			PORTC = ((1<<4));
     b16:	b8 b8       	out	0x08, r11	; 8
     b18:	83 ef       	ldi	r24, 0xF3	; 243
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	01 97       	sbiw	r24, 0x01	; 1
     b1e:	f1 f7       	brne	.-4      	; 0xb1c <__stack+0x21d>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <__stack+0x223>
     b22:	00 00       	nop
			_delay_ms(0.25);
			PORTC = ((0<<4));
     b24:	18 b8       	out	0x08, r1	; 8
			esquina(PORT,ESQUINA3);
     b26:	be 01       	movw	r22, r28
     b28:	6f 50       	subi	r22, 0x0F	; 15
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	ce 01       	movw	r24, r28
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	0e 94 bd 01 	call	0x37a	; 0x37a <esquina>
			numeros_sorteo(PORT,UNO,DOS,TRES,CUATRO);
     b34:	87 01       	movw	r16, r14
     b36:	9e 01       	movw	r18, r28
     b38:	2f 53       	subi	r18, 0x3F	; 63
     b3a:	3f 4f       	sbci	r19, 0xFF	; 255
     b3c:	ae 01       	movw	r20, r28
     b3e:	47 54       	subi	r20, 0x47	; 71
     b40:	5f 4f       	sbci	r21, 0xFF	; 255
     b42:	be 01       	movw	r22, r28
     b44:	6f 54       	subi	r22, 0x4F	; 79
     b46:	7f 4f       	sbci	r23, 0xFF	; 255
     b48:	ce 01       	movw	r24, r28
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <numeros_sorteo>
			seleccion_orden(orden_juego[2],PORT,UNO,DOS,TRES,CUATRO);
     b50:	08 50       	subi	r16, 0x08	; 8
     b52:	11 09       	sbc	r17, r1
     b54:	9e 01       	movw	r18, r28
     b56:	27 54       	subi	r18, 0x47	; 71
     b58:	3f 4f       	sbci	r19, 0xFF	; 255
     b5a:	ae 01       	movw	r20, r28
     b5c:	4f 54       	subi	r20, 0x4F	; 79
     b5e:	5f 4f       	sbci	r21, 0xFF	; 255
     b60:	be 01       	movw	r22, r28
     b62:	6f 5f       	subi	r22, 0xFF	; 255
     b64:	7f 4f       	sbci	r23, 0xFF	; 255
     b66:	c3 5a       	subi	r28, 0xA3	; 163
     b68:	de 4f       	sbci	r29, 0xFE	; 254
     b6a:	88 81       	ld	r24, Y
     b6c:	99 81       	ldd	r25, Y+1	; 0x01
     b6e:	cd 55       	subi	r28, 0x5D	; 93
     b70:	d1 40       	sbci	r29, 0x01	; 1
     b72:	0e 94 38 02 	call	0x470	; 0x470 <seleccion_orden>
			
			// TURNO ESQUINA 4
			PORTC = ((1<<4));
     b76:	b8 b8       	out	0x08, r11	; 8
     b78:	83 ef       	ldi	r24, 0xF3	; 243
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	f1 f7       	brne	.-4      	; 0xb7c <__stack+0x27d>
     b80:	00 c0       	rjmp	.+0      	; 0xb82 <__stack+0x283>
     b82:	00 00       	nop
			_delay_ms(0.25);
			PORTC = ((0<<4));
     b84:	18 b8       	out	0x08, r1	; 8
			esquina(PORT,ESQUINA4);
     b86:	be 01       	movw	r22, r28
     b88:	6f 5f       	subi	r22, 0xFF	; 255
     b8a:	7e 4f       	sbci	r23, 0xFE	; 254
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	0e 94 bd 01 	call	0x37a	; 0x37a <esquina>
			numeros_sorteo(PORT,UNO,DOS,TRES,CUATRO);
     b94:	87 01       	movw	r16, r14
     b96:	9e 01       	movw	r18, r28
     b98:	2f 53       	subi	r18, 0x3F	; 63
     b9a:	3f 4f       	sbci	r19, 0xFF	; 255
     b9c:	ae 01       	movw	r20, r28
     b9e:	47 54       	subi	r20, 0x47	; 71
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	be 01       	movw	r22, r28
     ba4:	6f 54       	subi	r22, 0x4F	; 79
     ba6:	7f 4f       	sbci	r23, 0xFF	; 255
     ba8:	ce 01       	movw	r24, r28
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	0e 94 da 01 	call	0x3b4	; 0x3b4 <numeros_sorteo>
			seleccion_orden(orden_juego[3],PORT,UNO,DOS,TRES,CUATRO);
     bb0:	08 50       	subi	r16, 0x08	; 8
     bb2:	11 09       	sbc	r17, r1
     bb4:	9e 01       	movw	r18, r28
     bb6:	27 54       	subi	r18, 0x47	; 71
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	ae 01       	movw	r20, r28
     bbc:	4f 54       	subi	r20, 0x4F	; 79
     bbe:	5f 4f       	sbci	r21, 0xFF	; 255
     bc0:	be 01       	movw	r22, r28
     bc2:	6f 5f       	subi	r22, 0xFF	; 255
     bc4:	7f 4f       	sbci	r23, 0xFF	; 255
     bc6:	c1 5a       	subi	r28, 0xA1	; 161
     bc8:	de 4f       	sbci	r29, 0xFE	; 254
     bca:	88 81       	ld	r24, Y
     bcc:	99 81       	ldd	r25, Y+1	; 0x01
     bce:	cf 55       	subi	r28, 0x5F	; 95
     bd0:	d1 40       	sbci	r29, 0x01	; 1
     bd2:	0e 94 38 02 	call	0x470	; 0x470 <seleccion_orden>
     bd6:	bf ef       	ldi	r27, 0xFF	; 255
     bd8:	21 ee       	ldi	r18, 0xE1	; 225
     bda:	34 e0       	ldi	r19, 0x04	; 4
     bdc:	b1 50       	subi	r27, 0x01	; 1
     bde:	20 40       	sbci	r18, 0x00	; 0
     be0:	30 40       	sbci	r19, 0x00	; 0
     be2:	e1 f7       	brne	.-8      	; 0xbdc <__stack+0x2dd>
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <__stack+0x2e7>
     be6:	00 00       	nop
			
			_delay_ms(200);
			
			char orden_indice [4] = {0,0,0,0};
     be8:	c7 59       	subi	r28, 0x97	; 151
     bea:	de 4f       	sbci	r29, 0xFE	; 254
     bec:	18 82       	st	Y, r1
     bee:	19 82       	std	Y+1, r1	; 0x01
     bf0:	1a 82       	std	Y+2, r1	; 0x02
     bf2:	1b 82       	std	Y+3, r1	; 0x03
     bf4:	c9 56       	subi	r28, 0x69	; 105
     bf6:	d1 40       	sbci	r29, 0x01	; 1
			int bandera = 0;
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	70 e0       	ldi	r23, 0x00	; 0
			while (bandera < 4){
     bfc:	21 c0       	rjmp	.+66     	; 0xc40 <__stack+0x341>
				for (int i = 0; i<4; i++) {
					int jugador_actual = orden_juego[i];
     bfe:	fc 01       	movw	r30, r24
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	49 e5       	ldi	r20, 0x59	; 89
     c06:	51 e0       	ldi	r21, 0x01	; 1
     c08:	4c 0f       	add	r20, r28
     c0a:	5d 1f       	adc	r21, r29
     c0c:	e4 0f       	add	r30, r20
     c0e:	f5 1f       	adc	r31, r21
     c10:	40 81       	ld	r20, Z
     c12:	51 81       	ldd	r21, Z+1	; 0x01
					if (jugador_actual == bandera+1){
     c14:	9b 01       	movw	r18, r22
     c16:	2f 5f       	subi	r18, 0xFF	; 255
     c18:	3f 4f       	sbci	r19, 0xFF	; 255
     c1a:	42 17       	cp	r20, r18
     c1c:	53 07       	cpc	r21, r19
     c1e:	49 f4       	brne	.+18     	; 0xc32 <__stack+0x333>
						orden_indice[bandera] = i;
     c20:	e9 e6       	ldi	r30, 0x69	; 105
     c22:	f1 e0       	ldi	r31, 0x01	; 1
     c24:	ec 0f       	add	r30, r28
     c26:	fd 1f       	adc	r31, r29
     c28:	e6 0f       	add	r30, r22
     c2a:	f7 1f       	adc	r31, r23
     c2c:	80 83       	st	Z, r24
						bandera += 1;
     c2e:	b9 01       	movw	r22, r18
						break;
     c30:	07 c0       	rjmp	.+14     	; 0xc40 <__stack+0x341>
			_delay_ms(200);
			
			char orden_indice [4] = {0,0,0,0};
			int bandera = 0;
			while (bandera < 4){
				for (int i = 0; i<4; i++) {
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <__stack+0x33b>
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	84 30       	cpi	r24, 0x04	; 4
     c3c:	91 05       	cpc	r25, r1
     c3e:	fc f2       	brlt	.-66     	; 0xbfe <__stack+0x2ff>
			
			_delay_ms(200);
			
			char orden_indice [4] = {0,0,0,0};
			int bandera = 0;
			while (bandera < 4){
     c40:	64 30       	cpi	r22, 0x04	; 4
     c42:	71 05       	cpc	r23, r1
     c44:	c4 f3       	brlt	.-16     	; 0xc36 <__stack+0x337>
     c46:	66 24       	eor	r6, r6
     c48:	6a 94       	dec	r6
     c4a:	77 24       	eor	r7, r7
     c4c:	7a 94       	dec	r7
     c4e:	0f 2e       	mov	r0, r31
     c50:	f7 e0       	ldi	r31, 0x07	; 7
     c52:	8f 2e       	mov	r8, r31
     c54:	91 2c       	mov	r9, r1
     c56:	f0 2d       	mov	r31, r0
     c58:	0f 2e       	mov	r0, r31
     c5a:	f7 e0       	ldi	r31, 0x07	; 7
     c5c:	af 2e       	mov	r10, r31
     c5e:	b1 2c       	mov	r11, r1
     c60:	f0 2d       	mov	r31, r0
     c62:	e1 2c       	mov	r14, r1
     c64:	f1 2c       	mov	r15, r1
     c66:	e7 c0       	rjmp	.+462    	; 0xe36 <__stack+0x537>
			int avance_izquierda = 7;
			int resultado = 255;
			int resultado_derecha = 255;
			int resultado_izquierda = 255;
			while (bandera < 1){
				int indice = orden_indice[bandera];
     c68:	e9 e6       	ldi	r30, 0x69	; 105
     c6a:	f1 e0       	ldi	r31, 0x01	; 1
     c6c:	ec 0f       	add	r30, r28
     c6e:	fd 1f       	adc	r31, r29
     c70:	ee 0d       	add	r30, r14
     c72:	ff 1d       	adc	r31, r15
     c74:	80 81       	ld	r24, Z
				switch(indice){
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	01 f1       	breq	.+64     	; 0xcba <__stack+0x3bb>
     c7a:	78 f0       	brcs	.+30     	; 0xc9a <__stack+0x39b>
     c7c:	82 30       	cpi	r24, 0x02	; 2
     c7e:	69 f1       	breq	.+90     	; 0xcda <__stack+0x3db>
     c80:	83 30       	cpi	r24, 0x03	; 3
     c82:	89 f1       	breq	.+98     	; 0xce6 <__stack+0x3e7>
     c84:	d5 c0       	rjmp	.+426    	; 0xe30 <__stack+0x531>
					case 0:
						for (int i=0; i<20; i++){
							uno(PORT,UNO);
     c86:	be 01       	movw	r22, r28
     c88:	6f 54       	subi	r22, 0x4F	; 79
     c8a:	7f 4f       	sbci	r23, 0xFF	; 255
     c8c:	ce 01       	movw	r24, r28
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	0e 94 49 01 	call	0x292	; 0x292 <uno>
			int resultado_izquierda = 255;
			while (bandera < 1){
				int indice = orden_indice[bandera];
				switch(indice){
					case 0:
						for (int i=0; i<20; i++){
     c94:	0f 5f       	subi	r16, 0xFF	; 255
     c96:	1f 4f       	sbci	r17, 0xFF	; 255
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <__stack+0x39f>
			int resultado = 255;
			int resultado_derecha = 255;
			int resultado_izquierda = 255;
			while (bandera < 1){
				int indice = orden_indice[bandera];
				switch(indice){
     c9a:	00 e0       	ldi	r16, 0x00	; 0
     c9c:	10 e0       	ldi	r17, 0x00	; 0
					case 0:
						for (int i=0; i<20; i++){
     c9e:	04 31       	cpi	r16, 0x14	; 20
     ca0:	11 05       	cpc	r17, r1
     ca2:	8c f3       	brlt	.-30     	; 0xc86 <__stack+0x387>
     ca4:	c5 c0       	rjmp	.+394    	; 0xe30 <__stack+0x531>
							uno(PORT,UNO);
						}
						break;
					case 1:
						for (int i=0; i<20; i++){
							dos(PORT,DOS);
     ca6:	be 01       	movw	r22, r28
     ca8:	67 54       	subi	r22, 0x47	; 71
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	ce 01       	movw	r24, r28
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	0e 94 66 01 	call	0x2cc	; 0x2cc <dos>
						for (int i=0; i<20; i++){
							uno(PORT,UNO);
						}
						break;
					case 1:
						for (int i=0; i<20; i++){
     cb4:	0f 5f       	subi	r16, 0xFF	; 255
     cb6:	1f 4f       	sbci	r17, 0xFF	; 255
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <__stack+0x3bf>
			int resultado = 255;
			int resultado_derecha = 255;
			int resultado_izquierda = 255;
			while (bandera < 1){
				int indice = orden_indice[bandera];
				switch(indice){
     cba:	00 e0       	ldi	r16, 0x00	; 0
     cbc:	10 e0       	ldi	r17, 0x00	; 0
						for (int i=0; i<20; i++){
							uno(PORT,UNO);
						}
						break;
					case 1:
						for (int i=0; i<20; i++){
     cbe:	04 31       	cpi	r16, 0x14	; 20
     cc0:	11 05       	cpc	r17, r1
     cc2:	8c f3       	brlt	.-30     	; 0xca6 <__stack+0x3a7>
     cc4:	b5 c0       	rjmp	.+362    	; 0xe30 <__stack+0x531>
							dos(PORT,DOS);
						}
						break;
					case 2:
						for (int i=0; i<20; i++){
							tres(PORT,TRES);
     cc6:	be 01       	movw	r22, r28
     cc8:	6f 53       	subi	r22, 0x3F	; 63
     cca:	7f 4f       	sbci	r23, 0xFF	; 255
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	0e 94 83 01 	call	0x306	; 0x306 <tres>
						for (int i=0; i<20; i++){
							dos(PORT,DOS);
						}
						break;
					case 2:
						for (int i=0; i<20; i++){
     cd4:	0f 5f       	subi	r16, 0xFF	; 255
     cd6:	1f 4f       	sbci	r17, 0xFF	; 255
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <__stack+0x3df>
			int resultado = 255;
			int resultado_derecha = 255;
			int resultado_izquierda = 255;
			while (bandera < 1){
				int indice = orden_indice[bandera];
				switch(indice){
     cda:	00 e0       	ldi	r16, 0x00	; 0
     cdc:	10 e0       	ldi	r17, 0x00	; 0
						for (int i=0; i<20; i++){
							dos(PORT,DOS);
						}
						break;
					case 2:
						for (int i=0; i<20; i++){
     cde:	04 31       	cpi	r16, 0x14	; 20
     ce0:	11 05       	cpc	r17, r1
     ce2:	8c f3       	brlt	.-30     	; 0xcc6 <__stack+0x3c7>
     ce4:	a5 c0       	rjmp	.+330    	; 0xe30 <__stack+0x531>
							tres(PORT,TRES);
						}
						break;
					case 3:
						PISO[0] = 129;
     ce6:	81 e8       	ldi	r24, 0x81	; 129
     ce8:	cf 5e       	subi	r28, 0xEF	; 239
     cea:	de 4f       	sbci	r29, 0xFE	; 254
     cec:	88 83       	st	Y, r24
     cee:	c1 51       	subi	r28, 0x11	; 17
     cf0:	d1 40       	sbci	r29, 0x01	; 1
						PISO[3] = resultado;
     cf2:	8f ef       	ldi	r24, 0xFF	; 255
     cf4:	cc 5e       	subi	r28, 0xEC	; 236
     cf6:	de 4f       	sbci	r29, 0xFE	; 254
     cf8:	88 83       	st	Y, r24
     cfa:	c4 51       	subi	r28, 0x14	; 20
     cfc:	d1 40       	sbci	r29, 0x01	; 1
						PISO[4] = resultado;
     cfe:	cb 5e       	subi	r28, 0xEB	; 235
     d00:	de 4f       	sbci	r29, 0xFE	; 254
     d02:	88 83       	st	Y, r24
     d04:	c5 51       	subi	r28, 0x15	; 21
     d06:	d1 40       	sbci	r29, 0x01	; 1
						PISO[7] = UBICACION_INFERIOR[0];
     d08:	c8 5e       	subi	r28, 0xE8	; 232
     d0a:	de 4f       	sbci	r29, 0xFE	; 254
     d0c:	58 82       	st	Y, r5
     d0e:	c8 51       	subi	r28, 0x18	; 24
     d10:	d1 40       	sbci	r29, 0x01	; 1
						while (entrada && avance_derecha>=0 && avance_izquierda>=0) {
     d12:	89 c0       	rjmp	.+274    	; 0xe26 <__stack+0x527>
							//129,0,0,255,255,0,0,129
							piso(PORT,PISO);
     d14:	be 01       	movw	r22, r28
     d16:	6f 5e       	subi	r22, 0xEF	; 239
     d18:	7e 4f       	sbci	r23, 0xFE	; 254
     d1a:	ce 01       	movw	r24, r28
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	0e 94 92 02 	call	0x524	; 0x524 <piso>
							//129,0,0,255,255,0,0,1
							PISO[7] = UBICACION_INFERIOR[1];
     d22:	c8 5e       	subi	r28, 0xE8	; 232
     d24:	de 4f       	sbci	r29, 0xFE	; 254
     d26:	48 82       	st	Y, r4
     d28:	c8 51       	subi	r28, 0x18	; 24
     d2a:	d1 40       	sbci	r29, 0x01	; 1
							PISO[3] = resultado;
     d2c:	8f ef       	ldi	r24, 0xFF	; 255
     d2e:	cc 5e       	subi	r28, 0xEC	; 236
     d30:	de 4f       	sbci	r29, 0xFE	; 254
     d32:	88 83       	st	Y, r24
     d34:	c4 51       	subi	r28, 0x14	; 20
     d36:	d1 40       	sbci	r29, 0x01	; 1
							PISO[4] = resultado;
     d38:	cb 5e       	subi	r28, 0xEB	; 235
     d3a:	de 4f       	sbci	r29, 0xFE	; 254
     d3c:	88 83       	st	Y, r24
     d3e:	c5 51       	subi	r28, 0x15	; 21
     d40:	d1 40       	sbci	r29, 0x01	; 1
							//81,0,0,255,255,0,0,1
							piso(PORT,PISO);
     d42:	be 01       	movw	r22, r28
     d44:	6f 5e       	subi	r22, 0xEF	; 239
     d46:	7e 4f       	sbci	r23, 0xFE	; 254
     d48:	ce 01       	movw	r24, r28
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	0e 94 92 02 	call	0x524	; 0x524 <piso>
							//129,0,0,255,127,0,0,129
							PISO[7] = UBICACION_INFERIOR[0];
     d50:	c8 5e       	subi	r28, 0xE8	; 232
     d52:	de 4f       	sbci	r29, 0xFE	; 254
     d54:	58 82       	st	Y, r5
     d56:	c8 51       	subi	r28, 0x18	; 24
     d58:	d1 40       	sbci	r29, 0x01	; 1
							PISO[3] = resultado_izquierda;
     d5a:	cc 5e       	subi	r28, 0xEC	; 236
     d5c:	de 4f       	sbci	r29, 0xFE	; 254
     d5e:	68 82       	st	Y, r6
     d60:	c4 51       	subi	r28, 0x14	; 20
     d62:	d1 40       	sbci	r29, 0x01	; 1
							PISO[4] = resultado_derecha;
     d64:	cb 5e       	subi	r28, 0xEB	; 235
     d66:	de 4f       	sbci	r29, 0xFE	; 254
     d68:	78 82       	st	Y, r7
     d6a:	c5 51       	subi	r28, 0x15	; 21
     d6c:	d1 40       	sbci	r29, 0x01	; 1
							// SI PRESIONA PARA LA DERECHA
							if (PINC == 0x42) {
     d6e:	86 b1       	in	r24, 0x06	; 6
     d70:	82 34       	cpi	r24, 0x42	; 66
     d72:	59 f5       	brne	.+86     	; 0xdca <__stack+0x4cb>
								// SONIDO DEL CLICK
								PORTC = ((1<<4));
     d74:	80 e1       	ldi	r24, 0x10	; 16
     d76:	88 b9       	out	0x08, r24	; 8
     d78:	83 ef       	ldi	r24, 0xF3	; 243
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	f1 f7       	brne	.-4      	; 0xd7c <__stack+0x47d>
     d80:	00 c0       	rjmp	.+0      	; 0xd82 <__stack+0x483>
     d82:	00 00       	nop
								_delay_ms(0.25);
								PORTC = ((0<<4));
     d84:	18 b8       	out	0x08, r1	; 8
								resultado_derecha = (pow(2,8)-1) - (pow(2,avance_derecha));
     d86:	b5 01       	movw	r22, r10
     d88:	0b 2c       	mov	r0, r11
     d8a:	00 0c       	add	r0, r0
     d8c:	88 0b       	sbc	r24, r24
     d8e:	99 0b       	sbc	r25, r25
     d90:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__floatsisf>
     d94:	9b 01       	movw	r18, r22
     d96:	ac 01       	movw	r20, r24
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	90 e4       	ldi	r25, 0x40	; 64
     da0:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <pow>
     da4:	9b 01       	movw	r18, r22
     da6:	ac 01       	movw	r20, r24
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	8f e7       	ldi	r24, 0x7F	; 127
     dae:	93 e4       	ldi	r25, 0x43	; 67
     db0:	0e 94 29 07 	call	0xe52	; 0xe52 <__subsf3>
     db4:	0e 94 96 07 	call	0xf2c	; 0xf2c <__fixsfsi>
     db8:	76 2e       	mov	r7, r22
								PISO[4] = resultado_derecha;
     dba:	cb 5e       	subi	r28, 0xEB	; 235
     dbc:	de 4f       	sbci	r29, 0xFE	; 254
     dbe:	68 83       	st	Y, r22
     dc0:	c5 51       	subi	r28, 0x15	; 21
     dc2:	d1 40       	sbci	r29, 0x01	; 1
								avance_derecha -= 1;
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	a9 1a       	sub	r10, r25
     dc8:	b1 08       	sbc	r11, r1
							}
							if (PINC == 0x44) {
     dca:	86 b1       	in	r24, 0x06	; 6
     dcc:	84 34       	cpi	r24, 0x44	; 68
     dce:	59 f5       	brne	.+86     	; 0xe26 <__stack+0x527>
								// SONIDO DEL CLICK
								PORTC = ((1<<4));
     dd0:	80 e1       	ldi	r24, 0x10	; 16
     dd2:	88 b9       	out	0x08, r24	; 8
     dd4:	a3 ef       	ldi	r26, 0xF3	; 243
     dd6:	b1 e0       	ldi	r27, 0x01	; 1
     dd8:	11 97       	sbiw	r26, 0x01	; 1
     dda:	f1 f7       	brne	.-4      	; 0xdd8 <__stack+0x4d9>
     ddc:	00 c0       	rjmp	.+0      	; 0xdde <__stack+0x4df>
     dde:	00 00       	nop
								_delay_ms(0.25);
								PORTC = ((0<<4));
     de0:	18 b8       	out	0x08, r1	; 8
								resultado_izquierda = (pow(2,8)-1) - (pow(2,avance_izquierda));
     de2:	b4 01       	movw	r22, r8
     de4:	09 2c       	mov	r0, r9
     de6:	00 0c       	add	r0, r0
     de8:	88 0b       	sbc	r24, r24
     dea:	99 0b       	sbc	r25, r25
     dec:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__floatsisf>
     df0:	9b 01       	movw	r18, r22
     df2:	ac 01       	movw	r20, r24
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	90 e4       	ldi	r25, 0x40	; 64
     dfc:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <pow>
     e00:	9b 01       	movw	r18, r22
     e02:	ac 01       	movw	r20, r24
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	8f e7       	ldi	r24, 0x7F	; 127
     e0a:	93 e4       	ldi	r25, 0x43	; 67
     e0c:	0e 94 29 07 	call	0xe52	; 0xe52 <__subsf3>
     e10:	0e 94 96 07 	call	0xf2c	; 0xf2c <__fixsfsi>
     e14:	66 2e       	mov	r6, r22
								PISO[4] = resultado_izquierda;
     e16:	cb 5e       	subi	r28, 0xEB	; 235
     e18:	de 4f       	sbci	r29, 0xFE	; 254
     e1a:	68 83       	st	Y, r22
     e1c:	c5 51       	subi	r28, 0x15	; 21
     e1e:	d1 40       	sbci	r29, 0x01	; 1
								avance_izquierda -= 1;
     e20:	b1 e0       	ldi	r27, 0x01	; 1
     e22:	8b 1a       	sub	r8, r27
     e24:	91 08       	sbc	r9, r1
					case 3:
						PISO[0] = 129;
						PISO[3] = resultado;
						PISO[4] = resultado;
						PISO[7] = UBICACION_INFERIOR[0];
						while (entrada && avance_derecha>=0 && avance_izquierda>=0) {
     e26:	bb 20       	and	r11, r11
     e28:	1c f0       	brlt	.+6      	; 0xe30 <__stack+0x531>
     e2a:	99 20       	and	r9, r9
     e2c:	0c f0       	brlt	.+2      	; 0xe30 <__stack+0x531>
     e2e:	72 cf       	rjmp	.-284    	; 0xd14 <__stack+0x415>
								avance_izquierda -= 1;
							}	
						}
						break;
				}
				bandera += 1;
     e30:	2f ef       	ldi	r18, 0xFF	; 255
     e32:	e2 1a       	sub	r14, r18
     e34:	f2 0a       	sbc	r15, r18
			int avance_derecha = 7;
			int avance_izquierda = 7;
			int resultado = 255;
			int resultado_derecha = 255;
			int resultado_izquierda = 255;
			while (bandera < 1){
     e36:	1e 14       	cp	r1, r14
     e38:	1f 04       	cpc	r1, r15
     e3a:	0c f0       	brlt	.+2      	; 0xe3e <__stack+0x53f>
     e3c:	15 cf       	rjmp	.-470    	; 0xc68 <__stack+0x369>
				}
				bandera += 1;
			}
		}
		
		ganaste(PORT,GANASTE);
     e3e:	be 01       	movw	r22, r28
     e40:	67 5e       	subi	r22, 0xE7	; 231
     e42:	7e 4f       	sbci	r23, 0xFE	; 254
     e44:	ce 01       	movw	r24, r28
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	0e 94 af 02 	call	0x55e	; 0x55e <ganaste>
			if (PINC == 0x41 && valor3) {
				jugadores = 3;
				break;
			}
		}
		valor3 = 0;
     e4c:	00 e0       	ldi	r16, 0x00	; 0
     e4e:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		
		ganaste(PORT,GANASTE);
		
	}
     e50:	80 cc       	rjmp	.-1792   	; 0x752 <main+0x1b2>

00000e52 <__subsf3>:
     e52:	50 58       	subi	r21, 0x80	; 128

00000e54 <__addsf3>:
     e54:	bb 27       	eor	r27, r27
     e56:	aa 27       	eor	r26, r26
     e58:	0e 94 41 07 	call	0xe82	; 0xe82 <__addsf3x>
     e5c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_round>
     e60:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_pscA>
     e64:	38 f0       	brcs	.+14     	; 0xe74 <__addsf3+0x20>
     e66:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_pscB>
     e6a:	20 f0       	brcs	.+8      	; 0xe74 <__addsf3+0x20>
     e6c:	39 f4       	brne	.+14     	; 0xe7c <__addsf3+0x28>
     e6e:	9f 3f       	cpi	r25, 0xFF	; 255
     e70:	19 f4       	brne	.+6      	; 0xe78 <__addsf3+0x24>
     e72:	26 f4       	brtc	.+8      	; 0xe7c <__addsf3+0x28>
     e74:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>
     e78:	0e f4       	brtc	.+2      	; 0xe7c <__addsf3+0x28>
     e7a:	e0 95       	com	r30
     e7c:	e7 fb       	bst	r30, 7
     e7e:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>

00000e82 <__addsf3x>:
     e82:	e9 2f       	mov	r30, r25
     e84:	0e 94 31 08 	call	0x1062	; 0x1062 <__fp_split3>
     e88:	58 f3       	brcs	.-42     	; 0xe60 <__addsf3+0xc>
     e8a:	ba 17       	cp	r27, r26
     e8c:	62 07       	cpc	r22, r18
     e8e:	73 07       	cpc	r23, r19
     e90:	84 07       	cpc	r24, r20
     e92:	95 07       	cpc	r25, r21
     e94:	20 f0       	brcs	.+8      	; 0xe9e <__addsf3x+0x1c>
     e96:	79 f4       	brne	.+30     	; 0xeb6 <__addsf3x+0x34>
     e98:	a6 f5       	brtc	.+104    	; 0xf02 <__addsf3x+0x80>
     e9a:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__fp_zero>
     e9e:	0e f4       	brtc	.+2      	; 0xea2 <__addsf3x+0x20>
     ea0:	e0 95       	com	r30
     ea2:	0b 2e       	mov	r0, r27
     ea4:	ba 2f       	mov	r27, r26
     ea6:	a0 2d       	mov	r26, r0
     ea8:	0b 01       	movw	r0, r22
     eaa:	b9 01       	movw	r22, r18
     eac:	90 01       	movw	r18, r0
     eae:	0c 01       	movw	r0, r24
     eb0:	ca 01       	movw	r24, r20
     eb2:	a0 01       	movw	r20, r0
     eb4:	11 24       	eor	r1, r1
     eb6:	ff 27       	eor	r31, r31
     eb8:	59 1b       	sub	r21, r25
     eba:	99 f0       	breq	.+38     	; 0xee2 <__addsf3x+0x60>
     ebc:	59 3f       	cpi	r21, 0xF9	; 249
     ebe:	50 f4       	brcc	.+20     	; 0xed4 <__addsf3x+0x52>
     ec0:	50 3e       	cpi	r21, 0xE0	; 224
     ec2:	68 f1       	brcs	.+90     	; 0xf1e <__addsf3x+0x9c>
     ec4:	1a 16       	cp	r1, r26
     ec6:	f0 40       	sbci	r31, 0x00	; 0
     ec8:	a2 2f       	mov	r26, r18
     eca:	23 2f       	mov	r18, r19
     ecc:	34 2f       	mov	r19, r20
     ece:	44 27       	eor	r20, r20
     ed0:	58 5f       	subi	r21, 0xF8	; 248
     ed2:	f3 cf       	rjmp	.-26     	; 0xeba <__addsf3x+0x38>
     ed4:	46 95       	lsr	r20
     ed6:	37 95       	ror	r19
     ed8:	27 95       	ror	r18
     eda:	a7 95       	ror	r26
     edc:	f0 40       	sbci	r31, 0x00	; 0
     ede:	53 95       	inc	r21
     ee0:	c9 f7       	brne	.-14     	; 0xed4 <__addsf3x+0x52>
     ee2:	7e f4       	brtc	.+30     	; 0xf02 <__addsf3x+0x80>
     ee4:	1f 16       	cp	r1, r31
     ee6:	ba 0b       	sbc	r27, r26
     ee8:	62 0b       	sbc	r22, r18
     eea:	73 0b       	sbc	r23, r19
     eec:	84 0b       	sbc	r24, r20
     eee:	ba f0       	brmi	.+46     	; 0xf1e <__addsf3x+0x9c>
     ef0:	91 50       	subi	r25, 0x01	; 1
     ef2:	a1 f0       	breq	.+40     	; 0xf1c <__addsf3x+0x9a>
     ef4:	ff 0f       	add	r31, r31
     ef6:	bb 1f       	adc	r27, r27
     ef8:	66 1f       	adc	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	88 1f       	adc	r24, r24
     efe:	c2 f7       	brpl	.-16     	; 0xef0 <__addsf3x+0x6e>
     f00:	0e c0       	rjmp	.+28     	; 0xf1e <__addsf3x+0x9c>
     f02:	ba 0f       	add	r27, r26
     f04:	62 1f       	adc	r22, r18
     f06:	73 1f       	adc	r23, r19
     f08:	84 1f       	adc	r24, r20
     f0a:	48 f4       	brcc	.+18     	; 0xf1e <__addsf3x+0x9c>
     f0c:	87 95       	ror	r24
     f0e:	77 95       	ror	r23
     f10:	67 95       	ror	r22
     f12:	b7 95       	ror	r27
     f14:	f7 95       	ror	r31
     f16:	9e 3f       	cpi	r25, 0xFE	; 254
     f18:	08 f0       	brcs	.+2      	; 0xf1c <__addsf3x+0x9a>
     f1a:	b0 cf       	rjmp	.-160    	; 0xe7c <__addsf3+0x28>
     f1c:	93 95       	inc	r25
     f1e:	88 0f       	add	r24, r24
     f20:	08 f0       	brcs	.+2      	; 0xf24 <__addsf3x+0xa2>
     f22:	99 27       	eor	r25, r25
     f24:	ee 0f       	add	r30, r30
     f26:	97 95       	ror	r25
     f28:	87 95       	ror	r24
     f2a:	08 95       	ret

00000f2c <__fixsfsi>:
     f2c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__fixunssfsi>
     f30:	68 94       	set
     f32:	b1 11       	cpse	r27, r1
     f34:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>
     f38:	08 95       	ret

00000f3a <__fixunssfsi>:
     f3a:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_splitA>
     f3e:	88 f0       	brcs	.+34     	; 0xf62 <__fixunssfsi+0x28>
     f40:	9f 57       	subi	r25, 0x7F	; 127
     f42:	98 f0       	brcs	.+38     	; 0xf6a <__fixunssfsi+0x30>
     f44:	b9 2f       	mov	r27, r25
     f46:	99 27       	eor	r25, r25
     f48:	b7 51       	subi	r27, 0x17	; 23
     f4a:	b0 f0       	brcs	.+44     	; 0xf78 <__fixunssfsi+0x3e>
     f4c:	e1 f0       	breq	.+56     	; 0xf86 <__fixunssfsi+0x4c>
     f4e:	66 0f       	add	r22, r22
     f50:	77 1f       	adc	r23, r23
     f52:	88 1f       	adc	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	1a f0       	brmi	.+6      	; 0xf5e <__fixunssfsi+0x24>
     f58:	ba 95       	dec	r27
     f5a:	c9 f7       	brne	.-14     	; 0xf4e <__fixunssfsi+0x14>
     f5c:	14 c0       	rjmp	.+40     	; 0xf86 <__fixunssfsi+0x4c>
     f5e:	b1 30       	cpi	r27, 0x01	; 1
     f60:	91 f0       	breq	.+36     	; 0xf86 <__fixunssfsi+0x4c>
     f62:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__fp_zero>
     f66:	b1 e0       	ldi	r27, 0x01	; 1
     f68:	08 95       	ret
     f6a:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__fp_zero>
     f6e:	67 2f       	mov	r22, r23
     f70:	78 2f       	mov	r23, r24
     f72:	88 27       	eor	r24, r24
     f74:	b8 5f       	subi	r27, 0xF8	; 248
     f76:	39 f0       	breq	.+14     	; 0xf86 <__fixunssfsi+0x4c>
     f78:	b9 3f       	cpi	r27, 0xF9	; 249
     f7a:	cc f3       	brlt	.-14     	; 0xf6e <__fixunssfsi+0x34>
     f7c:	86 95       	lsr	r24
     f7e:	77 95       	ror	r23
     f80:	67 95       	ror	r22
     f82:	b3 95       	inc	r27
     f84:	d9 f7       	brne	.-10     	; 0xf7c <__fixunssfsi+0x42>
     f86:	3e f4       	brtc	.+14     	; 0xf96 <__fixunssfsi+0x5c>
     f88:	90 95       	com	r25
     f8a:	80 95       	com	r24
     f8c:	70 95       	com	r23
     f8e:	61 95       	neg	r22
     f90:	7f 4f       	sbci	r23, 0xFF	; 255
     f92:	8f 4f       	sbci	r24, 0xFF	; 255
     f94:	9f 4f       	sbci	r25, 0xFF	; 255
     f96:	08 95       	ret

00000f98 <__floatunsisf>:
     f98:	e8 94       	clt
     f9a:	09 c0       	rjmp	.+18     	; 0xfae <__floatsisf+0x12>

00000f9c <__floatsisf>:
     f9c:	97 fb       	bst	r25, 7
     f9e:	3e f4       	brtc	.+14     	; 0xfae <__floatsisf+0x12>
     fa0:	90 95       	com	r25
     fa2:	80 95       	com	r24
     fa4:	70 95       	com	r23
     fa6:	61 95       	neg	r22
     fa8:	7f 4f       	sbci	r23, 0xFF	; 255
     faa:	8f 4f       	sbci	r24, 0xFF	; 255
     fac:	9f 4f       	sbci	r25, 0xFF	; 255
     fae:	99 23       	and	r25, r25
     fb0:	a9 f0       	breq	.+42     	; 0xfdc <__floatsisf+0x40>
     fb2:	f9 2f       	mov	r31, r25
     fb4:	96 e9       	ldi	r25, 0x96	; 150
     fb6:	bb 27       	eor	r27, r27
     fb8:	93 95       	inc	r25
     fba:	f6 95       	lsr	r31
     fbc:	87 95       	ror	r24
     fbe:	77 95       	ror	r23
     fc0:	67 95       	ror	r22
     fc2:	b7 95       	ror	r27
     fc4:	f1 11       	cpse	r31, r1
     fc6:	f8 cf       	rjmp	.-16     	; 0xfb8 <__floatsisf+0x1c>
     fc8:	fa f4       	brpl	.+62     	; 0x1008 <__floatsisf+0x6c>
     fca:	bb 0f       	add	r27, r27
     fcc:	11 f4       	brne	.+4      	; 0xfd2 <__floatsisf+0x36>
     fce:	60 ff       	sbrs	r22, 0
     fd0:	1b c0       	rjmp	.+54     	; 0x1008 <__floatsisf+0x6c>
     fd2:	6f 5f       	subi	r22, 0xFF	; 255
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	8f 4f       	sbci	r24, 0xFF	; 255
     fd8:	9f 4f       	sbci	r25, 0xFF	; 255
     fda:	16 c0       	rjmp	.+44     	; 0x1008 <__floatsisf+0x6c>
     fdc:	88 23       	and	r24, r24
     fde:	11 f0       	breq	.+4      	; 0xfe4 <__floatsisf+0x48>
     fe0:	96 e9       	ldi	r25, 0x96	; 150
     fe2:	11 c0       	rjmp	.+34     	; 0x1006 <__floatsisf+0x6a>
     fe4:	77 23       	and	r23, r23
     fe6:	21 f0       	breq	.+8      	; 0xff0 <__floatsisf+0x54>
     fe8:	9e e8       	ldi	r25, 0x8E	; 142
     fea:	87 2f       	mov	r24, r23
     fec:	76 2f       	mov	r23, r22
     fee:	05 c0       	rjmp	.+10     	; 0xffa <__floatsisf+0x5e>
     ff0:	66 23       	and	r22, r22
     ff2:	71 f0       	breq	.+28     	; 0x1010 <__floatsisf+0x74>
     ff4:	96 e8       	ldi	r25, 0x86	; 134
     ff6:	86 2f       	mov	r24, r22
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	2a f0       	brmi	.+10     	; 0x1008 <__floatsisf+0x6c>
     ffe:	9a 95       	dec	r25
    1000:	66 0f       	add	r22, r22
    1002:	77 1f       	adc	r23, r23
    1004:	88 1f       	adc	r24, r24
    1006:	da f7       	brpl	.-10     	; 0xffe <__floatsisf+0x62>
    1008:	88 0f       	add	r24, r24
    100a:	96 95       	lsr	r25
    100c:	87 95       	ror	r24
    100e:	97 f9       	bld	r25, 7
    1010:	08 95       	ret

00001012 <__fp_inf>:
    1012:	97 f9       	bld	r25, 7
    1014:	9f 67       	ori	r25, 0x7F	; 127
    1016:	80 e8       	ldi	r24, 0x80	; 128
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	08 95       	ret

0000101e <__fp_nan>:
    101e:	9f ef       	ldi	r25, 0xFF	; 255
    1020:	80 ec       	ldi	r24, 0xC0	; 192
    1022:	08 95       	ret

00001024 <__fp_pscA>:
    1024:	00 24       	eor	r0, r0
    1026:	0a 94       	dec	r0
    1028:	16 16       	cp	r1, r22
    102a:	17 06       	cpc	r1, r23
    102c:	18 06       	cpc	r1, r24
    102e:	09 06       	cpc	r0, r25
    1030:	08 95       	ret

00001032 <__fp_pscB>:
    1032:	00 24       	eor	r0, r0
    1034:	0a 94       	dec	r0
    1036:	12 16       	cp	r1, r18
    1038:	13 06       	cpc	r1, r19
    103a:	14 06       	cpc	r1, r20
    103c:	05 06       	cpc	r0, r21
    103e:	08 95       	ret

00001040 <__fp_round>:
    1040:	09 2e       	mov	r0, r25
    1042:	03 94       	inc	r0
    1044:	00 0c       	add	r0, r0
    1046:	11 f4       	brne	.+4      	; 0x104c <__fp_round+0xc>
    1048:	88 23       	and	r24, r24
    104a:	52 f0       	brmi	.+20     	; 0x1060 <__fp_round+0x20>
    104c:	bb 0f       	add	r27, r27
    104e:	40 f4       	brcc	.+16     	; 0x1060 <__fp_round+0x20>
    1050:	bf 2b       	or	r27, r31
    1052:	11 f4       	brne	.+4      	; 0x1058 <__fp_round+0x18>
    1054:	60 ff       	sbrs	r22, 0
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <__fp_round+0x20>
    1058:	6f 5f       	subi	r22, 0xFF	; 255
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	8f 4f       	sbci	r24, 0xFF	; 255
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	08 95       	ret

00001062 <__fp_split3>:
    1062:	57 fd       	sbrc	r21, 7
    1064:	90 58       	subi	r25, 0x80	; 128
    1066:	44 0f       	add	r20, r20
    1068:	55 1f       	adc	r21, r21
    106a:	59 f0       	breq	.+22     	; 0x1082 <__fp_splitA+0x10>
    106c:	5f 3f       	cpi	r21, 0xFF	; 255
    106e:	71 f0       	breq	.+28     	; 0x108c <__fp_splitA+0x1a>
    1070:	47 95       	ror	r20

00001072 <__fp_splitA>:
    1072:	88 0f       	add	r24, r24
    1074:	97 fb       	bst	r25, 7
    1076:	99 1f       	adc	r25, r25
    1078:	61 f0       	breq	.+24     	; 0x1092 <__fp_splitA+0x20>
    107a:	9f 3f       	cpi	r25, 0xFF	; 255
    107c:	79 f0       	breq	.+30     	; 0x109c <__fp_splitA+0x2a>
    107e:	87 95       	ror	r24
    1080:	08 95       	ret
    1082:	12 16       	cp	r1, r18
    1084:	13 06       	cpc	r1, r19
    1086:	14 06       	cpc	r1, r20
    1088:	55 1f       	adc	r21, r21
    108a:	f2 cf       	rjmp	.-28     	; 0x1070 <__fp_split3+0xe>
    108c:	46 95       	lsr	r20
    108e:	f1 df       	rcall	.-30     	; 0x1072 <__fp_splitA>
    1090:	08 c0       	rjmp	.+16     	; 0x10a2 <__fp_splitA+0x30>
    1092:	16 16       	cp	r1, r22
    1094:	17 06       	cpc	r1, r23
    1096:	18 06       	cpc	r1, r24
    1098:	99 1f       	adc	r25, r25
    109a:	f1 cf       	rjmp	.-30     	; 0x107e <__fp_splitA+0xc>
    109c:	86 95       	lsr	r24
    109e:	71 05       	cpc	r23, r1
    10a0:	61 05       	cpc	r22, r1
    10a2:	08 94       	sec
    10a4:	08 95       	ret

000010a6 <__fp_zero>:
    10a6:	e8 94       	clt

000010a8 <__fp_szero>:
    10a8:	bb 27       	eor	r27, r27
    10aa:	66 27       	eor	r22, r22
    10ac:	77 27       	eor	r23, r23
    10ae:	cb 01       	movw	r24, r22
    10b0:	97 f9       	bld	r25, 7
    10b2:	08 95       	ret

000010b4 <pow>:
    10b4:	fa 01       	movw	r30, r20
    10b6:	ee 0f       	add	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	30 96       	adiw	r30, 0x00	; 0
    10bc:	21 05       	cpc	r18, r1
    10be:	31 05       	cpc	r19, r1
    10c0:	a1 f1       	breq	.+104    	; 0x112a <pow+0x76>
    10c2:	61 15       	cp	r22, r1
    10c4:	71 05       	cpc	r23, r1
    10c6:	61 f4       	brne	.+24     	; 0x10e0 <pow+0x2c>
    10c8:	80 38       	cpi	r24, 0x80	; 128
    10ca:	bf e3       	ldi	r27, 0x3F	; 63
    10cc:	9b 07       	cpc	r25, r27
    10ce:	49 f1       	breq	.+82     	; 0x1122 <pow+0x6e>
    10d0:	68 94       	set
    10d2:	90 38       	cpi	r25, 0x80	; 128
    10d4:	81 05       	cpc	r24, r1
    10d6:	61 f0       	breq	.+24     	; 0x10f0 <pow+0x3c>
    10d8:	80 38       	cpi	r24, 0x80	; 128
    10da:	bf ef       	ldi	r27, 0xFF	; 255
    10dc:	9b 07       	cpc	r25, r27
    10de:	41 f0       	breq	.+16     	; 0x10f0 <pow+0x3c>
    10e0:	99 23       	and	r25, r25
    10e2:	4a f5       	brpl	.+82     	; 0x1136 <pow+0x82>
    10e4:	ff 3f       	cpi	r31, 0xFF	; 255
    10e6:	e1 05       	cpc	r30, r1
    10e8:	31 05       	cpc	r19, r1
    10ea:	21 05       	cpc	r18, r1
    10ec:	19 f1       	breq	.+70     	; 0x1134 <pow+0x80>
    10ee:	e8 94       	clt
    10f0:	08 94       	sec
    10f2:	e7 95       	ror	r30
    10f4:	d9 01       	movw	r26, r18
    10f6:	aa 23       	and	r26, r26
    10f8:	29 f4       	brne	.+10     	; 0x1104 <pow+0x50>
    10fa:	ab 2f       	mov	r26, r27
    10fc:	be 2f       	mov	r27, r30
    10fe:	f8 5f       	subi	r31, 0xF8	; 248
    1100:	d0 f3       	brcs	.-12     	; 0x10f6 <pow+0x42>
    1102:	10 c0       	rjmp	.+32     	; 0x1124 <pow+0x70>
    1104:	ff 5f       	subi	r31, 0xFF	; 255
    1106:	70 f4       	brcc	.+28     	; 0x1124 <pow+0x70>
    1108:	a6 95       	lsr	r26
    110a:	e0 f7       	brcc	.-8      	; 0x1104 <pow+0x50>
    110c:	f7 39       	cpi	r31, 0x97	; 151
    110e:	50 f0       	brcs	.+20     	; 0x1124 <pow+0x70>
    1110:	19 f0       	breq	.+6      	; 0x1118 <pow+0x64>
    1112:	ff 3a       	cpi	r31, 0xAF	; 175
    1114:	38 f4       	brcc	.+14     	; 0x1124 <pow+0x70>
    1116:	9f 77       	andi	r25, 0x7F	; 127
    1118:	9f 93       	push	r25
    111a:	0d d0       	rcall	.+26     	; 0x1136 <pow+0x82>
    111c:	0f 90       	pop	r0
    111e:	07 fc       	sbrc	r0, 7
    1120:	90 58       	subi	r25, 0x80	; 128
    1122:	08 95       	ret
    1124:	46 f0       	brts	.+16     	; 0x1136 <pow+0x82>
    1126:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	80 e8       	ldi	r24, 0x80	; 128
    1130:	9f e3       	ldi	r25, 0x3F	; 63
    1132:	08 95       	ret
    1134:	4f e7       	ldi	r20, 0x7F	; 127
    1136:	9f 77       	andi	r25, 0x7F	; 127
    1138:	5f 93       	push	r21
    113a:	4f 93       	push	r20
    113c:	3f 93       	push	r19
    113e:	2f 93       	push	r18
    1140:	0e 94 55 09 	call	0x12aa	; 0x12aa <log>
    1144:	2f 91       	pop	r18
    1146:	3f 91       	pop	r19
    1148:	4f 91       	pop	r20
    114a:	5f 91       	pop	r21
    114c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__mulsf3>
    1150:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <exp>
    1154:	29 f4       	brne	.+10     	; 0x1160 <pow+0xac>
    1156:	16 f0       	brts	.+4      	; 0x115c <pow+0xa8>
    1158:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
    115c:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__fp_zero>
    1160:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>

00001164 <exp>:
    1164:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_splitA>
    1168:	a8 f3       	brcs	.-22     	; 0x1154 <pow+0xa0>
    116a:	96 38       	cpi	r25, 0x86	; 134
    116c:	a0 f7       	brcc	.-24     	; 0x1156 <pow+0xa2>
    116e:	07 f8       	bld	r0, 7
    1170:	0f 92       	push	r0
    1172:	e8 94       	clt
    1174:	2b e3       	ldi	r18, 0x3B	; 59
    1176:	3a ea       	ldi	r19, 0xAA	; 170
    1178:	48 eb       	ldi	r20, 0xB8	; 184
    117a:	5f e7       	ldi	r21, 0x7F	; 127
    117c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__mulsf3_pse>
    1180:	0f 92       	push	r0
    1182:	0f 92       	push	r0
    1184:	0f 92       	push	r0
    1186:	4d b7       	in	r20, 0x3d	; 61
    1188:	5e b7       	in	r21, 0x3e	; 62
    118a:	0f 92       	push	r0
    118c:	0e 94 9d 09 	call	0x133a	; 0x133a <modf>
    1190:	e8 e6       	ldi	r30, 0x68	; 104
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__fp_powser>
    1198:	4f 91       	pop	r20
    119a:	5f 91       	pop	r21
    119c:	ef 91       	pop	r30
    119e:	ff 91       	pop	r31
    11a0:	e5 95       	asr	r30
    11a2:	ee 1f       	adc	r30, r30
    11a4:	ff 1f       	adc	r31, r31
    11a6:	49 f0       	breq	.+18     	; 0x11ba <exp+0x56>
    11a8:	fe 57       	subi	r31, 0x7E	; 126
    11aa:	e0 68       	ori	r30, 0x80	; 128
    11ac:	44 27       	eor	r20, r20
    11ae:	ee 0f       	add	r30, r30
    11b0:	44 1f       	adc	r20, r20
    11b2:	fa 95       	dec	r31
    11b4:	e1 f7       	brne	.-8      	; 0x11ae <exp+0x4a>
    11b6:	41 95       	neg	r20
    11b8:	55 0b       	sbc	r21, r21
    11ba:	0e 94 17 09 	call	0x122e	; 0x122e <ldexp>
    11be:	0f 90       	pop	r0
    11c0:	07 fe       	sbrs	r0, 7
    11c2:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <inverse>
    11c6:	08 95       	ret

000011c8 <__fp_powser>:
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	1f 93       	push	r17
    11ce:	0f 93       	push	r16
    11d0:	ff 92       	push	r15
    11d2:	ef 92       	push	r14
    11d4:	df 92       	push	r13
    11d6:	7b 01       	movw	r14, r22
    11d8:	8c 01       	movw	r16, r24
    11da:	68 94       	set
    11dc:	06 c0       	rjmp	.+12     	; 0x11ea <__fp_powser+0x22>
    11de:	da 2e       	mov	r13, r26
    11e0:	ef 01       	movw	r28, r30
    11e2:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3x>
    11e6:	fe 01       	movw	r30, r28
    11e8:	e8 94       	clt
    11ea:	a5 91       	lpm	r26, Z+
    11ec:	25 91       	lpm	r18, Z+
    11ee:	35 91       	lpm	r19, Z+
    11f0:	45 91       	lpm	r20, Z+
    11f2:	55 91       	lpm	r21, Z+
    11f4:	a6 f3       	brts	.-24     	; 0x11de <__fp_powser+0x16>
    11f6:	ef 01       	movw	r28, r30
    11f8:	0e 94 41 07 	call	0xe82	; 0xe82 <__addsf3x>
    11fc:	fe 01       	movw	r30, r28
    11fe:	97 01       	movw	r18, r14
    1200:	a8 01       	movw	r20, r16
    1202:	da 94       	dec	r13
    1204:	69 f7       	brne	.-38     	; 0x11e0 <__fp_powser+0x18>
    1206:	df 90       	pop	r13
    1208:	ef 90       	pop	r14
    120a:	ff 90       	pop	r15
    120c:	0f 91       	pop	r16
    120e:	1f 91       	pop	r17
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <inverse>:
    1216:	9b 01       	movw	r18, r22
    1218:	ac 01       	movw	r20, r24
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	80 e8       	ldi	r24, 0x80	; 128
    1220:	9f e3       	ldi	r25, 0x3F	; 63
    1222:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__divsf3>
    1226:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
    122a:	0c 94 b0 0a 	jmp	0x1560	; 0x1560 <__fp_mpack>

0000122e <ldexp>:
    122e:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_splitA>
    1232:	d8 f3       	brcs	.-10     	; 0x122a <inverse+0x14>
    1234:	99 23       	and	r25, r25
    1236:	c9 f3       	breq	.-14     	; 0x122a <inverse+0x14>
    1238:	94 0f       	add	r25, r20
    123a:	51 1d       	adc	r21, r1
    123c:	a3 f3       	brvs	.-24     	; 0x1226 <inverse+0x10>
    123e:	91 50       	subi	r25, 0x01	; 1
    1240:	50 40       	sbci	r21, 0x00	; 0
    1242:	94 f0       	brlt	.+36     	; 0x1268 <ldexp+0x3a>
    1244:	59 f0       	breq	.+22     	; 0x125c <ldexp+0x2e>
    1246:	88 23       	and	r24, r24
    1248:	32 f0       	brmi	.+12     	; 0x1256 <ldexp+0x28>
    124a:	66 0f       	add	r22, r22
    124c:	77 1f       	adc	r23, r23
    124e:	88 1f       	adc	r24, r24
    1250:	91 50       	subi	r25, 0x01	; 1
    1252:	50 40       	sbci	r21, 0x00	; 0
    1254:	c1 f7       	brne	.-16     	; 0x1246 <ldexp+0x18>
    1256:	9e 3f       	cpi	r25, 0xFE	; 254
    1258:	51 05       	cpc	r21, r1
    125a:	2c f7       	brge	.-54     	; 0x1226 <inverse+0x10>
    125c:	88 0f       	add	r24, r24
    125e:	91 1d       	adc	r25, r1
    1260:	96 95       	lsr	r25
    1262:	87 95       	ror	r24
    1264:	97 f9       	bld	r25, 7
    1266:	08 95       	ret
    1268:	5f 3f       	cpi	r21, 0xFF	; 255
    126a:	ac f0       	brlt	.+42     	; 0x1296 <ldexp+0x68>
    126c:	98 3e       	cpi	r25, 0xE8	; 232
    126e:	9c f0       	brlt	.+38     	; 0x1296 <ldexp+0x68>
    1270:	bb 27       	eor	r27, r27
    1272:	86 95       	lsr	r24
    1274:	77 95       	ror	r23
    1276:	67 95       	ror	r22
    1278:	b7 95       	ror	r27
    127a:	08 f4       	brcc	.+2      	; 0x127e <ldexp+0x50>
    127c:	b1 60       	ori	r27, 0x01	; 1
    127e:	93 95       	inc	r25
    1280:	c1 f7       	brne	.-16     	; 0x1272 <ldexp+0x44>
    1282:	bb 0f       	add	r27, r27
    1284:	58 f7       	brcc	.-42     	; 0x125c <ldexp+0x2e>
    1286:	11 f4       	brne	.+4      	; 0x128c <ldexp+0x5e>
    1288:	60 ff       	sbrs	r22, 0
    128a:	e8 cf       	rjmp	.-48     	; 0x125c <ldexp+0x2e>
    128c:	6f 5f       	subi	r22, 0xFF	; 255
    128e:	7f 4f       	sbci	r23, 0xFF	; 255
    1290:	8f 4f       	sbci	r24, 0xFF	; 255
    1292:	9f 4f       	sbci	r25, 0xFF	; 255
    1294:	e3 cf       	rjmp	.-58     	; 0x125c <ldexp+0x2e>
    1296:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>
    129a:	16 f0       	brts	.+4      	; 0x12a0 <ldexp+0x72>
    129c:	0c 94 b0 0a 	jmp	0x1560	; 0x1560 <__fp_mpack>
    12a0:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>
    12a4:	68 94       	set
    12a6:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>

000012aa <log>:
    12aa:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_splitA>
    12ae:	a8 f3       	brcs	.-22     	; 0x129a <ldexp+0x6c>
    12b0:	99 23       	and	r25, r25
    12b2:	c1 f3       	breq	.-16     	; 0x12a4 <ldexp+0x76>
    12b4:	ae f3       	brts	.-22     	; 0x12a0 <ldexp+0x72>
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	1f 93       	push	r17
    12bc:	0f 93       	push	r16
    12be:	ff 92       	push	r15
    12c0:	c9 2f       	mov	r28, r25
    12c2:	dd 27       	eor	r29, r29
    12c4:	88 23       	and	r24, r24
    12c6:	2a f0       	brmi	.+10     	; 0x12d2 <log+0x28>
    12c8:	21 97       	sbiw	r28, 0x01	; 1
    12ca:	66 0f       	add	r22, r22
    12cc:	77 1f       	adc	r23, r23
    12ce:	88 1f       	adc	r24, r24
    12d0:	da f7       	brpl	.-10     	; 0x12c8 <log+0x1e>
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e8       	ldi	r20, 0x80	; 128
    12d8:	5f eb       	ldi	r21, 0xBF	; 191
    12da:	9f e3       	ldi	r25, 0x3F	; 63
    12dc:	88 39       	cpi	r24, 0x98	; 152
    12de:	20 f0       	brcs	.+8      	; 0x12e8 <log+0x3e>
    12e0:	80 3e       	cpi	r24, 0xE0	; 224
    12e2:	38 f0       	brcs	.+14     	; 0x12f2 <log+0x48>
    12e4:	21 96       	adiw	r28, 0x01	; 1
    12e6:	8f 77       	andi	r24, 0x7F	; 127
    12e8:	0e 94 2a 07 	call	0xe54	; 0xe54 <__addsf3>
    12ec:	e0 e9       	ldi	r30, 0x90	; 144
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <log+0x50>
    12f2:	0e 94 2a 07 	call	0xe54	; 0xe54 <__addsf3>
    12f6:	ed eb       	ldi	r30, 0xBD	; 189
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__fp_powser>
    12fe:	8b 01       	movw	r16, r22
    1300:	be 01       	movw	r22, r28
    1302:	ec 01       	movw	r28, r24
    1304:	fb 2e       	mov	r15, r27
    1306:	6f 57       	subi	r22, 0x7F	; 127
    1308:	71 09       	sbc	r23, r1
    130a:	75 95       	asr	r23
    130c:	77 1f       	adc	r23, r23
    130e:	88 0b       	sbc	r24, r24
    1310:	99 0b       	sbc	r25, r25
    1312:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__floatsisf>
    1316:	28 e1       	ldi	r18, 0x18	; 24
    1318:	32 e7       	ldi	r19, 0x72	; 114
    131a:	41 e3       	ldi	r20, 0x31	; 49
    131c:	5f e3       	ldi	r21, 0x3F	; 63
    131e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3x>
    1322:	af 2d       	mov	r26, r15
    1324:	98 01       	movw	r18, r16
    1326:	ae 01       	movw	r20, r28
    1328:	ff 90       	pop	r15
    132a:	0f 91       	pop	r16
    132c:	1f 91       	pop	r17
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	0e 94 41 07 	call	0xe82	; 0xe82 <__addsf3x>
    1336:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_round>

0000133a <modf>:
    133a:	fa 01       	movw	r30, r20
    133c:	dc 01       	movw	r26, r24
    133e:	aa 0f       	add	r26, r26
    1340:	bb 1f       	adc	r27, r27
    1342:	9b 01       	movw	r18, r22
    1344:	ac 01       	movw	r20, r24
    1346:	bf 57       	subi	r27, 0x7F	; 127
    1348:	28 f4       	brcc	.+10     	; 0x1354 <modf+0x1a>
    134a:	22 27       	eor	r18, r18
    134c:	33 27       	eor	r19, r19
    134e:	44 27       	eor	r20, r20
    1350:	50 78       	andi	r21, 0x80	; 128
    1352:	20 c0       	rjmp	.+64     	; 0x1394 <modf+0x5a>
    1354:	b7 51       	subi	r27, 0x17	; 23
    1356:	90 f4       	brcc	.+36     	; 0x137c <modf+0x42>
    1358:	ab 2f       	mov	r26, r27
    135a:	00 24       	eor	r0, r0
    135c:	46 95       	lsr	r20
    135e:	37 95       	ror	r19
    1360:	27 95       	ror	r18
    1362:	01 1c       	adc	r0, r1
    1364:	a3 95       	inc	r26
    1366:	d2 f3       	brmi	.-12     	; 0x135c <modf+0x22>
    1368:	00 20       	and	r0, r0
    136a:	71 f0       	breq	.+28     	; 0x1388 <modf+0x4e>
    136c:	22 0f       	add	r18, r18
    136e:	33 1f       	adc	r19, r19
    1370:	44 1f       	adc	r20, r20
    1372:	b3 95       	inc	r27
    1374:	da f3       	brmi	.-10     	; 0x136c <modf+0x32>
    1376:	0e d0       	rcall	.+28     	; 0x1394 <modf+0x5a>
    1378:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__subsf3>
    137c:	61 30       	cpi	r22, 0x01	; 1
    137e:	71 05       	cpc	r23, r1
    1380:	a0 e8       	ldi	r26, 0x80	; 128
    1382:	8a 07       	cpc	r24, r26
    1384:	b9 46       	sbci	r27, 0x69	; 105
    1386:	30 f4       	brcc	.+12     	; 0x1394 <modf+0x5a>
    1388:	9b 01       	movw	r18, r22
    138a:	ac 01       	movw	r20, r24
    138c:	66 27       	eor	r22, r22
    138e:	77 27       	eor	r23, r23
    1390:	88 27       	eor	r24, r24
    1392:	90 78       	andi	r25, 0x80	; 128
    1394:	30 96       	adiw	r30, 0x00	; 0
    1396:	21 f0       	breq	.+8      	; 0x13a0 <modf+0x66>
    1398:	20 83       	st	Z, r18
    139a:	31 83       	std	Z+1, r19	; 0x01
    139c:	42 83       	std	Z+2, r20	; 0x02
    139e:	53 83       	std	Z+3, r21	; 0x03
    13a0:	08 95       	ret

000013a2 <__mulsf3>:
    13a2:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__mulsf3x>
    13a6:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_round>
    13aa:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_pscA>
    13ae:	38 f0       	brcs	.+14     	; 0x13be <__mulsf3+0x1c>
    13b0:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_pscB>
    13b4:	20 f0       	brcs	.+8      	; 0x13be <__mulsf3+0x1c>
    13b6:	95 23       	and	r25, r21
    13b8:	11 f0       	breq	.+4      	; 0x13be <__mulsf3+0x1c>
    13ba:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
    13be:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>
    13c2:	11 24       	eor	r1, r1
    13c4:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>

000013c8 <__mulsf3x>:
    13c8:	0e 94 31 08 	call	0x1062	; 0x1062 <__fp_split3>
    13cc:	70 f3       	brcs	.-36     	; 0x13aa <__mulsf3+0x8>

000013ce <__mulsf3_pse>:
    13ce:	95 9f       	mul	r25, r21
    13d0:	c1 f3       	breq	.-16     	; 0x13c2 <__mulsf3+0x20>
    13d2:	95 0f       	add	r25, r21
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	55 1f       	adc	r21, r21
    13d8:	62 9f       	mul	r22, r18
    13da:	f0 01       	movw	r30, r0
    13dc:	72 9f       	mul	r23, r18
    13de:	bb 27       	eor	r27, r27
    13e0:	f0 0d       	add	r31, r0
    13e2:	b1 1d       	adc	r27, r1
    13e4:	63 9f       	mul	r22, r19
    13e6:	aa 27       	eor	r26, r26
    13e8:	f0 0d       	add	r31, r0
    13ea:	b1 1d       	adc	r27, r1
    13ec:	aa 1f       	adc	r26, r26
    13ee:	64 9f       	mul	r22, r20
    13f0:	66 27       	eor	r22, r22
    13f2:	b0 0d       	add	r27, r0
    13f4:	a1 1d       	adc	r26, r1
    13f6:	66 1f       	adc	r22, r22
    13f8:	82 9f       	mul	r24, r18
    13fa:	22 27       	eor	r18, r18
    13fc:	b0 0d       	add	r27, r0
    13fe:	a1 1d       	adc	r26, r1
    1400:	62 1f       	adc	r22, r18
    1402:	73 9f       	mul	r23, r19
    1404:	b0 0d       	add	r27, r0
    1406:	a1 1d       	adc	r26, r1
    1408:	62 1f       	adc	r22, r18
    140a:	83 9f       	mul	r24, r19
    140c:	a0 0d       	add	r26, r0
    140e:	61 1d       	adc	r22, r1
    1410:	22 1f       	adc	r18, r18
    1412:	74 9f       	mul	r23, r20
    1414:	33 27       	eor	r19, r19
    1416:	a0 0d       	add	r26, r0
    1418:	61 1d       	adc	r22, r1
    141a:	23 1f       	adc	r18, r19
    141c:	84 9f       	mul	r24, r20
    141e:	60 0d       	add	r22, r0
    1420:	21 1d       	adc	r18, r1
    1422:	82 2f       	mov	r24, r18
    1424:	76 2f       	mov	r23, r22
    1426:	6a 2f       	mov	r22, r26
    1428:	11 24       	eor	r1, r1
    142a:	9f 57       	subi	r25, 0x7F	; 127
    142c:	50 40       	sbci	r21, 0x00	; 0
    142e:	9a f0       	brmi	.+38     	; 0x1456 <__mulsf3_pse+0x88>
    1430:	f1 f0       	breq	.+60     	; 0x146e <__mulsf3_pse+0xa0>
    1432:	88 23       	and	r24, r24
    1434:	4a f0       	brmi	.+18     	; 0x1448 <__mulsf3_pse+0x7a>
    1436:	ee 0f       	add	r30, r30
    1438:	ff 1f       	adc	r31, r31
    143a:	bb 1f       	adc	r27, r27
    143c:	66 1f       	adc	r22, r22
    143e:	77 1f       	adc	r23, r23
    1440:	88 1f       	adc	r24, r24
    1442:	91 50       	subi	r25, 0x01	; 1
    1444:	50 40       	sbci	r21, 0x00	; 0
    1446:	a9 f7       	brne	.-22     	; 0x1432 <__mulsf3_pse+0x64>
    1448:	9e 3f       	cpi	r25, 0xFE	; 254
    144a:	51 05       	cpc	r21, r1
    144c:	80 f0       	brcs	.+32     	; 0x146e <__mulsf3_pse+0xa0>
    144e:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
    1452:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>
    1456:	5f 3f       	cpi	r21, 0xFF	; 255
    1458:	e4 f3       	brlt	.-8      	; 0x1452 <__mulsf3_pse+0x84>
    145a:	98 3e       	cpi	r25, 0xE8	; 232
    145c:	d4 f3       	brlt	.-12     	; 0x1452 <__mulsf3_pse+0x84>
    145e:	86 95       	lsr	r24
    1460:	77 95       	ror	r23
    1462:	67 95       	ror	r22
    1464:	b7 95       	ror	r27
    1466:	f7 95       	ror	r31
    1468:	e7 95       	ror	r30
    146a:	9f 5f       	subi	r25, 0xFF	; 255
    146c:	c1 f7       	brne	.-16     	; 0x145e <__mulsf3_pse+0x90>
    146e:	fe 2b       	or	r31, r30
    1470:	88 0f       	add	r24, r24
    1472:	91 1d       	adc	r25, r1
    1474:	96 95       	lsr	r25
    1476:	87 95       	ror	r24
    1478:	97 f9       	bld	r25, 7
    147a:	08 95       	ret

0000147c <__divsf3>:
    147c:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divsf3x>
    1480:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_round>
    1484:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_pscB>
    1488:	58 f0       	brcs	.+22     	; 0x14a0 <__divsf3+0x24>
    148a:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_pscA>
    148e:	40 f0       	brcs	.+16     	; 0x14a0 <__divsf3+0x24>
    1490:	29 f4       	brne	.+10     	; 0x149c <__divsf3+0x20>
    1492:	5f 3f       	cpi	r21, 0xFF	; 255
    1494:	29 f0       	breq	.+10     	; 0x14a0 <__divsf3+0x24>
    1496:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
    149a:	51 11       	cpse	r21, r1
    149c:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>
    14a0:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>

000014a4 <__divsf3x>:
    14a4:	0e 94 31 08 	call	0x1062	; 0x1062 <__fp_split3>
    14a8:	68 f3       	brcs	.-38     	; 0x1484 <__divsf3+0x8>

000014aa <__divsf3_pse>:
    14aa:	99 23       	and	r25, r25
    14ac:	b1 f3       	breq	.-20     	; 0x149a <__divsf3+0x1e>
    14ae:	55 23       	and	r21, r21
    14b0:	91 f3       	breq	.-28     	; 0x1496 <__divsf3+0x1a>
    14b2:	95 1b       	sub	r25, r21
    14b4:	55 0b       	sbc	r21, r21
    14b6:	bb 27       	eor	r27, r27
    14b8:	aa 27       	eor	r26, r26
    14ba:	62 17       	cp	r22, r18
    14bc:	73 07       	cpc	r23, r19
    14be:	84 07       	cpc	r24, r20
    14c0:	38 f0       	brcs	.+14     	; 0x14d0 <__divsf3_pse+0x26>
    14c2:	9f 5f       	subi	r25, 0xFF	; 255
    14c4:	5f 4f       	sbci	r21, 0xFF	; 255
    14c6:	22 0f       	add	r18, r18
    14c8:	33 1f       	adc	r19, r19
    14ca:	44 1f       	adc	r20, r20
    14cc:	aa 1f       	adc	r26, r26
    14ce:	a9 f3       	breq	.-22     	; 0x14ba <__divsf3_pse+0x10>
    14d0:	35 d0       	rcall	.+106    	; 0x153c <__divsf3_pse+0x92>
    14d2:	0e 2e       	mov	r0, r30
    14d4:	3a f0       	brmi	.+14     	; 0x14e4 <__divsf3_pse+0x3a>
    14d6:	e0 e8       	ldi	r30, 0x80	; 128
    14d8:	32 d0       	rcall	.+100    	; 0x153e <__divsf3_pse+0x94>
    14da:	91 50       	subi	r25, 0x01	; 1
    14dc:	50 40       	sbci	r21, 0x00	; 0
    14de:	e6 95       	lsr	r30
    14e0:	00 1c       	adc	r0, r0
    14e2:	ca f7       	brpl	.-14     	; 0x14d6 <__divsf3_pse+0x2c>
    14e4:	2b d0       	rcall	.+86     	; 0x153c <__divsf3_pse+0x92>
    14e6:	fe 2f       	mov	r31, r30
    14e8:	29 d0       	rcall	.+82     	; 0x153c <__divsf3_pse+0x92>
    14ea:	66 0f       	add	r22, r22
    14ec:	77 1f       	adc	r23, r23
    14ee:	88 1f       	adc	r24, r24
    14f0:	bb 1f       	adc	r27, r27
    14f2:	26 17       	cp	r18, r22
    14f4:	37 07       	cpc	r19, r23
    14f6:	48 07       	cpc	r20, r24
    14f8:	ab 07       	cpc	r26, r27
    14fa:	b0 e8       	ldi	r27, 0x80	; 128
    14fc:	09 f0       	breq	.+2      	; 0x1500 <__divsf3_pse+0x56>
    14fe:	bb 0b       	sbc	r27, r27
    1500:	80 2d       	mov	r24, r0
    1502:	bf 01       	movw	r22, r30
    1504:	ff 27       	eor	r31, r31
    1506:	93 58       	subi	r25, 0x83	; 131
    1508:	5f 4f       	sbci	r21, 0xFF	; 255
    150a:	3a f0       	brmi	.+14     	; 0x151a <__divsf3_pse+0x70>
    150c:	9e 3f       	cpi	r25, 0xFE	; 254
    150e:	51 05       	cpc	r21, r1
    1510:	78 f0       	brcs	.+30     	; 0x1530 <__divsf3_pse+0x86>
    1512:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
    1516:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>
    151a:	5f 3f       	cpi	r21, 0xFF	; 255
    151c:	e4 f3       	brlt	.-8      	; 0x1516 <__divsf3_pse+0x6c>
    151e:	98 3e       	cpi	r25, 0xE8	; 232
    1520:	d4 f3       	brlt	.-12     	; 0x1516 <__divsf3_pse+0x6c>
    1522:	86 95       	lsr	r24
    1524:	77 95       	ror	r23
    1526:	67 95       	ror	r22
    1528:	b7 95       	ror	r27
    152a:	f7 95       	ror	r31
    152c:	9f 5f       	subi	r25, 0xFF	; 255
    152e:	c9 f7       	brne	.-14     	; 0x1522 <__divsf3_pse+0x78>
    1530:	88 0f       	add	r24, r24
    1532:	91 1d       	adc	r25, r1
    1534:	96 95       	lsr	r25
    1536:	87 95       	ror	r24
    1538:	97 f9       	bld	r25, 7
    153a:	08 95       	ret
    153c:	e1 e0       	ldi	r30, 0x01	; 1
    153e:	66 0f       	add	r22, r22
    1540:	77 1f       	adc	r23, r23
    1542:	88 1f       	adc	r24, r24
    1544:	bb 1f       	adc	r27, r27
    1546:	62 17       	cp	r22, r18
    1548:	73 07       	cpc	r23, r19
    154a:	84 07       	cpc	r24, r20
    154c:	ba 07       	cpc	r27, r26
    154e:	20 f0       	brcs	.+8      	; 0x1558 <__divsf3_pse+0xae>
    1550:	62 1b       	sub	r22, r18
    1552:	73 0b       	sbc	r23, r19
    1554:	84 0b       	sbc	r24, r20
    1556:	ba 0b       	sbc	r27, r26
    1558:	ee 1f       	adc	r30, r30
    155a:	88 f7       	brcc	.-30     	; 0x153e <__divsf3_pse+0x94>
    155c:	e0 95       	com	r30
    155e:	08 95       	ret

00001560 <__fp_mpack>:
    1560:	9f 3f       	cpi	r25, 0xFF	; 255
    1562:	31 f0       	breq	.+12     	; 0x1570 <__fp_mpack_finite+0xc>

00001564 <__fp_mpack_finite>:
    1564:	91 50       	subi	r25, 0x01	; 1
    1566:	20 f4       	brcc	.+8      	; 0x1570 <__fp_mpack_finite+0xc>
    1568:	87 95       	ror	r24
    156a:	77 95       	ror	r23
    156c:	67 95       	ror	r22
    156e:	b7 95       	ror	r27
    1570:	88 0f       	add	r24, r24
    1572:	91 1d       	adc	r25, r1
    1574:	96 95       	lsr	r25
    1576:	87 95       	ror	r24
    1578:	97 f9       	bld	r25, 7
    157a:	08 95       	ret

0000157c <__divmodsi4>:
    157c:	05 2e       	mov	r0, r21
    157e:	97 fb       	bst	r25, 7
    1580:	1e f4       	brtc	.+6      	; 0x1588 <__divmodsi4+0xc>
    1582:	00 94       	com	r0
    1584:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__negsi2>
    1588:	57 fd       	sbrc	r21, 7
    158a:	07 d0       	rcall	.+14     	; 0x159a <__divmodsi4_neg2>
    158c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__udivmodsi4>
    1590:	07 fc       	sbrc	r0, 7
    1592:	03 d0       	rcall	.+6      	; 0x159a <__divmodsi4_neg2>
    1594:	4e f4       	brtc	.+18     	; 0x15a8 <__divmodsi4_exit>
    1596:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__negsi2>

0000159a <__divmodsi4_neg2>:
    159a:	50 95       	com	r21
    159c:	40 95       	com	r20
    159e:	30 95       	com	r19
    15a0:	21 95       	neg	r18
    15a2:	3f 4f       	sbci	r19, 0xFF	; 255
    15a4:	4f 4f       	sbci	r20, 0xFF	; 255
    15a6:	5f 4f       	sbci	r21, 0xFF	; 255

000015a8 <__divmodsi4_exit>:
    15a8:	08 95       	ret

000015aa <__negsi2>:
    15aa:	90 95       	com	r25
    15ac:	80 95       	com	r24
    15ae:	70 95       	com	r23
    15b0:	61 95       	neg	r22
    15b2:	7f 4f       	sbci	r23, 0xFF	; 255
    15b4:	8f 4f       	sbci	r24, 0xFF	; 255
    15b6:	9f 4f       	sbci	r25, 0xFF	; 255
    15b8:	08 95       	ret

000015ba <__udivmodsi4>:
    15ba:	a1 e2       	ldi	r26, 0x21	; 33
    15bc:	1a 2e       	mov	r1, r26
    15be:	aa 1b       	sub	r26, r26
    15c0:	bb 1b       	sub	r27, r27
    15c2:	fd 01       	movw	r30, r26
    15c4:	0d c0       	rjmp	.+26     	; 0x15e0 <__udivmodsi4_ep>

000015c6 <__udivmodsi4_loop>:
    15c6:	aa 1f       	adc	r26, r26
    15c8:	bb 1f       	adc	r27, r27
    15ca:	ee 1f       	adc	r30, r30
    15cc:	ff 1f       	adc	r31, r31
    15ce:	a2 17       	cp	r26, r18
    15d0:	b3 07       	cpc	r27, r19
    15d2:	e4 07       	cpc	r30, r20
    15d4:	f5 07       	cpc	r31, r21
    15d6:	20 f0       	brcs	.+8      	; 0x15e0 <__udivmodsi4_ep>
    15d8:	a2 1b       	sub	r26, r18
    15da:	b3 0b       	sbc	r27, r19
    15dc:	e4 0b       	sbc	r30, r20
    15de:	f5 0b       	sbc	r31, r21

000015e0 <__udivmodsi4_ep>:
    15e0:	66 1f       	adc	r22, r22
    15e2:	77 1f       	adc	r23, r23
    15e4:	88 1f       	adc	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	1a 94       	dec	r1
    15ea:	69 f7       	brne	.-38     	; 0x15c6 <__udivmodsi4_loop>
    15ec:	60 95       	com	r22
    15ee:	70 95       	com	r23
    15f0:	80 95       	com	r24
    15f2:	90 95       	com	r25
    15f4:	9b 01       	movw	r18, r22
    15f6:	ac 01       	movw	r20, r24
    15f8:	bd 01       	movw	r22, r26
    15fa:	cf 01       	movw	r24, r30
    15fc:	08 95       	ret

000015fe <random_r>:
    15fe:	8f 92       	push	r8
    1600:	9f 92       	push	r9
    1602:	af 92       	push	r10
    1604:	bf 92       	push	r11
    1606:	cf 92       	push	r12
    1608:	df 92       	push	r13
    160a:	ef 92       	push	r14
    160c:	ff 92       	push	r15
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	ec 01       	movw	r28, r24
    1614:	68 81       	ld	r22, Y
    1616:	79 81       	ldd	r23, Y+1	; 0x01
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	9b 81       	ldd	r25, Y+3	; 0x03
    161c:	61 15       	cp	r22, r1
    161e:	71 05       	cpc	r23, r1
    1620:	81 05       	cpc	r24, r1
    1622:	91 05       	cpc	r25, r1
    1624:	21 f4       	brne	.+8      	; 0x162e <random_r+0x30>
    1626:	64 e2       	ldi	r22, 0x24	; 36
    1628:	79 ed       	ldi	r23, 0xD9	; 217
    162a:	8b e5       	ldi	r24, 0x5B	; 91
    162c:	97 e0       	ldi	r25, 0x07	; 7
    162e:	2d e1       	ldi	r18, 0x1D	; 29
    1630:	33 ef       	ldi	r19, 0xF3	; 243
    1632:	41 e0       	ldi	r20, 0x01	; 1
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	0e 94 be 0a 	call	0x157c	; 0x157c <__divmodsi4>
    163a:	49 01       	movw	r8, r18
    163c:	5a 01       	movw	r10, r20
    163e:	9b 01       	movw	r18, r22
    1640:	ac 01       	movw	r20, r24
    1642:	a7 ea       	ldi	r26, 0xA7	; 167
    1644:	b1 e4       	ldi	r27, 0x41	; 65
    1646:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__muluhisi3>
    164a:	6b 01       	movw	r12, r22
    164c:	7c 01       	movw	r14, r24
    164e:	ac ee       	ldi	r26, 0xEC	; 236
    1650:	b4 ef       	ldi	r27, 0xF4	; 244
    1652:	a5 01       	movw	r20, r10
    1654:	94 01       	movw	r18, r8
    1656:	0e 94 af 0b 	call	0x175e	; 0x175e <__mulohisi3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	8c 0d       	add	r24, r12
    1660:	9d 1d       	adc	r25, r13
    1662:	ae 1d       	adc	r26, r14
    1664:	bf 1d       	adc	r27, r15
    1666:	b7 ff       	sbrs	r27, 7
    1668:	03 c0       	rjmp	.+6      	; 0x1670 <random_r+0x72>
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	a1 09       	sbc	r26, r1
    166e:	b0 48       	sbci	r27, 0x80	; 128
    1670:	88 83       	st	Y, r24
    1672:	99 83       	std	Y+1, r25	; 0x01
    1674:	aa 83       	std	Y+2, r26	; 0x02
    1676:	bb 83       	std	Y+3, r27	; 0x03
    1678:	bc 01       	movw	r22, r24
    167a:	cd 01       	movw	r24, r26
    167c:	9f 77       	andi	r25, 0x7F	; 127
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	ff 90       	pop	r15
    1684:	ef 90       	pop	r14
    1686:	df 90       	pop	r13
    1688:	cf 90       	pop	r12
    168a:	bf 90       	pop	r11
    168c:	af 90       	pop	r10
    168e:	9f 90       	pop	r9
    1690:	8f 90       	pop	r8
    1692:	08 95       	ret

00001694 <random>:
    1694:	8f 92       	push	r8
    1696:	9f 92       	push	r9
    1698:	af 92       	push	r10
    169a:	bf 92       	push	r11
    169c:	cf 92       	push	r12
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
    16a4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    16a8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    16ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    16b0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    16b4:	61 15       	cp	r22, r1
    16b6:	71 05       	cpc	r23, r1
    16b8:	81 05       	cpc	r24, r1
    16ba:	91 05       	cpc	r25, r1
    16bc:	21 f4       	brne	.+8      	; 0x16c6 <random+0x32>
    16be:	64 e2       	ldi	r22, 0x24	; 36
    16c0:	79 ed       	ldi	r23, 0xD9	; 217
    16c2:	8b e5       	ldi	r24, 0x5B	; 91
    16c4:	97 e0       	ldi	r25, 0x07	; 7
    16c6:	2d e1       	ldi	r18, 0x1D	; 29
    16c8:	33 ef       	ldi	r19, 0xF3	; 243
    16ca:	41 e0       	ldi	r20, 0x01	; 1
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	0e 94 be 0a 	call	0x157c	; 0x157c <__divmodsi4>
    16d2:	49 01       	movw	r8, r18
    16d4:	5a 01       	movw	r10, r20
    16d6:	9b 01       	movw	r18, r22
    16d8:	ac 01       	movw	r20, r24
    16da:	a7 ea       	ldi	r26, 0xA7	; 167
    16dc:	b1 e4       	ldi	r27, 0x41	; 65
    16de:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__muluhisi3>
    16e2:	6b 01       	movw	r12, r22
    16e4:	7c 01       	movw	r14, r24
    16e6:	ac ee       	ldi	r26, 0xEC	; 236
    16e8:	b4 ef       	ldi	r27, 0xF4	; 244
    16ea:	a5 01       	movw	r20, r10
    16ec:	94 01       	movw	r18, r8
    16ee:	0e 94 af 0b 	call	0x175e	; 0x175e <__mulohisi3>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	8c 0d       	add	r24, r12
    16f8:	9d 1d       	adc	r25, r13
    16fa:	ae 1d       	adc	r26, r14
    16fc:	bf 1d       	adc	r27, r15
    16fe:	b7 ff       	sbrs	r27, 7
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <random+0x74>
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	a1 09       	sbc	r26, r1
    1706:	b0 48       	sbci	r27, 0x80	; 128
    1708:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    170c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1710:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    1714:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1718:	bc 01       	movw	r22, r24
    171a:	cd 01       	movw	r24, r26
    171c:	9f 77       	andi	r25, 0x7F	; 127
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	df 90       	pop	r13
    1724:	cf 90       	pop	r12
    1726:	bf 90       	pop	r11
    1728:	af 90       	pop	r10
    172a:	9f 90       	pop	r9
    172c:	8f 90       	pop	r8
    172e:	08 95       	ret

00001730 <srandom>:
    1730:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
    1734:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1738:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    173c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1740:	08 95       	ret

00001742 <__muluhisi3>:
    1742:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__umulhisi3>
    1746:	a5 9f       	mul	r26, r21
    1748:	90 0d       	add	r25, r0
    174a:	b4 9f       	mul	r27, r20
    174c:	90 0d       	add	r25, r0
    174e:	a4 9f       	mul	r26, r20
    1750:	80 0d       	add	r24, r0
    1752:	91 1d       	adc	r25, r1
    1754:	11 24       	eor	r1, r1
    1756:	08 95       	ret

00001758 <__mulshisi3>:
    1758:	b7 ff       	sbrs	r27, 7
    175a:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__muluhisi3>

0000175e <__mulohisi3>:
    175e:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__muluhisi3>
    1762:	82 1b       	sub	r24, r18
    1764:	93 0b       	sbc	r25, r19
    1766:	08 95       	ret

00001768 <__umulhisi3>:
    1768:	a2 9f       	mul	r26, r18
    176a:	b0 01       	movw	r22, r0
    176c:	b3 9f       	mul	r27, r19
    176e:	c0 01       	movw	r24, r0
    1770:	a3 9f       	mul	r26, r19
    1772:	70 0d       	add	r23, r0
    1774:	81 1d       	adc	r24, r1
    1776:	11 24       	eor	r1, r1
    1778:	91 1d       	adc	r25, r1
    177a:	b2 9f       	mul	r27, r18
    177c:	70 0d       	add	r23, r0
    177e:	81 1d       	adc	r24, r1
    1780:	11 24       	eor	r1, r1
    1782:	91 1d       	adc	r25, r1
    1784:	08 95       	ret

00001786 <_exit>:
    1786:	f8 94       	cli

00001788 <__stop_program>:
    1788:	ff cf       	rjmp	.-2      	; 0x1788 <__stop_program>
