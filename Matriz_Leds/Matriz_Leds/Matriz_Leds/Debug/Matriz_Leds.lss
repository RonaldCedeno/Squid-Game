
Matriz_Leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000168  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081e  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000732  00000000  00000000  00000ada  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038c  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001598  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ff  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000178  00000000  00000000  00001a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001b8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "UART.h"

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	e0 97       	sbiw	r28, 0x30	; 48
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	// PARA EL DATO
	DDRB = 0B11111111;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	84 b9       	out	0x04, r24	; 4
	// PARA EL DESPLAZMIENTO
	DDRC |= (1<<0)|(1<<1); // SALIDAS C0 y C1 
  ae:	87 b1       	in	r24, 0x07	; 7
  b0:	83 60       	ori	r24, 0x03	; 3
  b2:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1<<2)|(1<<3)|(1<<4)|(1<<5)|(1<<6)|(1<<7); //SALIDAS D2,D3,D4,D5,D6,D7
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	8c 6f       	ori	r24, 0xFC	; 252
  b8:	8a b9       	out	0x0a, r24	; 10
	
	char PORT[8] =  {1,2,4,8,16,32,64,128};//valores de pines del  PORTD
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	e0 e0       	ldi	r30, 0x00	; 0
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	de 01       	movw	r26, r28
  c2:	11 96       	adiw	r26, 0x01	; 1
  c4:	01 90       	ld	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	8a 95       	dec	r24
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x2e>
	//{PD0,PD1,PD2,PD3,PD4,PD5,PD6,PD7}
	
	
	char MENSAJE[]={0x0, 0x7e, 0x7e, 0x18, 0x18, 0x7e, 0x7e, 0x0, //H
  cc:	88 e2       	ldi	r24, 0x28	; 40
  ce:	e8 e0       	ldi	r30, 0x08	; 8
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	de 01       	movw	r26, r28
  d4:	19 96       	adiw	r26, 0x09	; 9
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	8a 95       	dec	r24
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x40>
	
	while(1){
		
		
		//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
		for (int i=0;i<32;i++)//
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	3c c0       	rjmp	.+120    	; 0x15c <main+0xc6>
		{
			for (int k=0;k<50;k++)//
			{
				for (int j=0; j<8;j++)//
				{
					if (j==0 || j==1){
  e4:	9c 01       	movw	r18, r24
  e6:	82 30       	cpi	r24, 0x02	; 2
  e8:	91 05       	cpc	r25, r1
  ea:	48 f4       	brcc	.+18     	; 0xfe <main+0x68>
						PORTD = 0;
  ec:	1b b8       	out	0x0b, r1	; 11
						PORTC = PORT[j];
  ee:	e1 e0       	ldi	r30, 0x01	; 1
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	ec 0f       	add	r30, r28
  f4:	fd 1f       	adc	r31, r29
  f6:	e8 0f       	add	r30, r24
  f8:	f9 1f       	adc	r31, r25
  fa:	e0 81       	ld	r30, Z
  fc:	e8 b9       	out	0x08, r30	; 8
					}
					
					if (j!=0 && j!=1){
  fe:	22 30       	cpi	r18, 0x02	; 2
 100:	31 05       	cpc	r19, r1
 102:	48 f0       	brcs	.+18     	; 0x116 <main+0x80>
						PORTC = 0;
 104:	18 b8       	out	0x08, r1	; 8
						PORTD = PORT[j];
 106:	e1 e0       	ldi	r30, 0x01	; 1
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ec 0f       	add	r30, r28
 10c:	fd 1f       	adc	r31, r29
 10e:	e8 0f       	add	r30, r24
 110:	f9 1f       	adc	r31, r25
 112:	20 81       	ld	r18, Z
 114:	2b b9       	out	0x0b, r18	; 11
					}
					
					PORTB = ~MENSAJE[i+j];// se niega para que se muestre en la matriz
 116:	fa 01       	movw	r30, r20
 118:	e8 0f       	add	r30, r24
 11a:	f9 1f       	adc	r31, r25
 11c:	29 e0       	ldi	r18, 0x09	; 9
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	2c 0f       	add	r18, r28
 122:	3d 1f       	adc	r19, r29
 124:	e2 0f       	add	r30, r18
 126:	f3 1f       	adc	r31, r19
 128:	20 81       	ld	r18, Z
 12a:	20 95       	com	r18
 12c:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	e3 ef       	ldi	r30, 0xF3	; 243
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x9c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0xa2>
 138:	00 00       	nop
		//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
		for (int i=0;i<32;i++)//
		{
			for (int k=0;k<50;k++)//
			{
				for (int j=0; j<8;j++)//
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	02 c0       	rjmp	.+4      	; 0x142 <main+0xac>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	88 30       	cpi	r24, 0x08	; 8
 144:	91 05       	cpc	r25, r1
 146:	74 f2       	brlt	.-100    	; 0xe4 <main+0x4e>
		
		
		//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
		for (int i=0;i<32;i++)//
		{
			for (int k=0;k<50;k++)//
 148:	6f 5f       	subi	r22, 0xFF	; 255
 14a:	7f 4f       	sbci	r23, 0xFF	; 255
 14c:	02 c0       	rjmp	.+4      	; 0x152 <main+0xbc>
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	62 33       	cpi	r22, 0x32	; 50
 154:	71 05       	cpc	r23, r1
 156:	9c f3       	brlt	.-26     	; 0x13e <main+0xa8>
	
	while(1){
		
		
		//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
		for (int i=0;i<32;i++)//
 158:	4f 5f       	subi	r20, 0xFF	; 255
 15a:	5f 4f       	sbci	r21, 0xFF	; 255
 15c:	40 32       	cpi	r20, 0x20	; 32
 15e:	51 05       	cpc	r21, r1
 160:	b4 f3       	brlt	.-20     	; 0x14e <main+0xb8>
 162:	bd cf       	rjmp	.-134    	; 0xde <main+0x48>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
