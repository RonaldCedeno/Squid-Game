
Matriz_Leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  0000038e  00000402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d00  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078e  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000595  00000000  00000000  000019f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  00001f88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000485  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000703  00000000  00000000  000025a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002ca8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 38       	cpi	r26, 0x80	; 128
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 22 01 	call	0x244	; 0x244 <main>
  8e:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <filas>:
#include <avr/io.h>
#include <util/delay.h>
#include "UART.h"

// RECORRIDO DEL CODIGO HEXADECIMAL DE CADA CARACTER O FORMA
void filas(int i, int velocidad, char PORT[], char FORMA[]){
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	ec 01       	movw	r28, r24
	// VELOCIDAD DE DESPLAZAMIENTO
	for (int k=0;k<velocidad;k++)//
  a0:	00 e0       	ldi	r16, 0x00	; 0
  a2:	10 e0       	ldi	r17, 0x00	; 0
  a4:	1c c0       	rjmp	.+56     	; 0xde <filas+0x48>
	{
		//CANTIDAD DE HEXADECIMALES PARA 1 FORMA PARTICULAR
		for (int j=0; j<8;j++)//
		{
			PORTD = PORT[j];
  a6:	da 01       	movw	r26, r20
  a8:	ae 0f       	add	r26, r30
  aa:	bf 1f       	adc	r27, r31
  ac:	9c 91       	ld	r25, X
  ae:	9b b9       	out	0x0b, r25	; 11
			PORTB = ~FORMA[i+j];// SE NIEGA PARA QUE SE MUESTRE EN LA MATRIZ
  b0:	df 01       	movw	r26, r30
  b2:	ac 0f       	add	r26, r28
  b4:	bd 1f       	adc	r27, r29
  b6:	a2 0f       	add	r26, r18
  b8:	b3 1f       	adc	r27, r19
  ba:	9c 91       	ld	r25, X
  bc:	90 95       	com	r25
  be:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	83 ef       	ldi	r24, 0xF3	; 243
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <filas+0x2e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <filas+0x34>
  ca:	00 00       	nop
void filas(int i, int velocidad, char PORT[], char FORMA[]){
	// VELOCIDAD DE DESPLAZAMIENTO
	for (int k=0;k<velocidad;k++)//
	{
		//CANTIDAD DE HEXADECIMALES PARA 1 FORMA PARTICULAR
		for (int j=0; j<8;j++)//
  cc:	31 96       	adiw	r30, 0x01	; 1
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <filas+0x3e>
  d0:	e0 e0       	ldi	r30, 0x00	; 0
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e8 30       	cpi	r30, 0x08	; 8
  d6:	f1 05       	cpc	r31, r1
  d8:	34 f3       	brlt	.-52     	; 0xa6 <filas+0x10>
#include "UART.h"

// RECORRIDO DEL CODIGO HEXADECIMAL DE CADA CARACTER O FORMA
void filas(int i, int velocidad, char PORT[], char FORMA[]){
	// VELOCIDAD DE DESPLAZAMIENTO
	for (int k=0;k<velocidad;k++)//
  da:	0f 5f       	subi	r16, 0xFF	; 255
  dc:	1f 4f       	sbci	r17, 0xFF	; 255
  de:	06 17       	cp	r16, r22
  e0:	17 07       	cpc	r17, r23
  e2:	b4 f3       	brlt	.-20     	; 0xd0 <filas+0x3a>
			PORTD = PORT[j];
			PORTB = ~FORMA[i+j];// SE NIEGA PARA QUE SE MUESTRE EN LA MATRIZ
			_delay_ms(0.25);// DELAY PARA QUE SE MUESTRE EN LA MATRIZ SIN PARPADEOS
		}
	}
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	08 95       	ret

000000ee <animacion1>:

void animacion1(char PORT[], char ANIMACION1[]) {
  ee:	ef 92       	push	r14
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	8c 01       	movw	r16, r24
  fc:	7b 01       	movw	r14, r22
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	d0 e0       	ldi	r29, 0x00	; 0
 102:	08 c0       	rjmp	.+16     	; 0x114 <animacion1+0x26>
	{
		filas(i,5,PORT,ANIMACION1);
 104:	97 01       	movw	r18, r14
 106:	a8 01       	movw	r20, r16
 108:	65 e0       	ldi	r22, 0x05	; 5
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	ce 01       	movw	r24, r28
 10e:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
	}
}

void animacion1(char PORT[], char ANIMACION1[]) {
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
 112:	28 96       	adiw	r28, 0x08	; 8
 114:	c9 31       	cpi	r28, 0x19	; 25
 116:	d1 05       	cpc	r29, r1
 118:	ac f3       	brlt	.-22     	; 0x104 <animacion1+0x16>
 11a:	c8 e1       	ldi	r28, 0x18	; 24
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	08 c0       	rjmp	.+16     	; 0x130 <animacion1+0x42>
	{
		filas(i,5,PORT,ANIMACION1);
	}
	for (int i=24;i>=0;i-=8)// PARA CERRAR LA ANIMACION
	{
		filas(i,5,PORT,ANIMACION1);
 120:	97 01       	movw	r18, r14
 122:	a8 01       	movw	r20, r16
 124:	65 e0       	ldi	r22, 0x05	; 5
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	ce 01       	movw	r24, r28
 12a:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
	{
		filas(i,5,PORT,ANIMACION1);
	}
	for (int i=24;i>=0;i-=8)// PARA CERRAR LA ANIMACION
 12e:	28 97       	sbiw	r28, 0x08	; 8
 130:	dd 23       	and	r29, r29
 132:	b4 f7       	brge	.-20     	; 0x120 <animacion1+0x32>
	{
		filas(i,5,PORT,ANIMACION1);
	}
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	ff 90       	pop	r15
 13e:	ef 90       	pop	r14
 140:	08 95       	ret

00000142 <animacion2>:

void animacion2(char PORT[], char ANIMACION2[]) {
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	8c 01       	movw	r16, r24
 150:	7b 01       	movw	r14, r22
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
 152:	c0 e0       	ldi	r28, 0x00	; 0
 154:	d0 e0       	ldi	r29, 0x00	; 0
 156:	08 c0       	rjmp	.+16     	; 0x168 <animacion2+0x26>
	{
		filas(i,5,PORT,ANIMACION2);
 158:	97 01       	movw	r18, r14
 15a:	a8 01       	movw	r20, r16
 15c:	65 e0       	ldi	r22, 0x05	; 5
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	ce 01       	movw	r24, r28
 162:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
	}
}

void animacion2(char PORT[], char ANIMACION2[]) {
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
 166:	28 96       	adiw	r28, 0x08	; 8
 168:	c9 31       	cpi	r28, 0x19	; 25
 16a:	d1 05       	cpc	r29, r1
 16c:	ac f3       	brlt	.-22     	; 0x158 <animacion2+0x16>
 16e:	c8 e1       	ldi	r28, 0x18	; 24
 170:	d0 e0       	ldi	r29, 0x00	; 0
 172:	08 c0       	rjmp	.+16     	; 0x184 <animacion2+0x42>
	{
		filas(i,5,PORT,ANIMACION2);
	}
	for (int i=24;i>=0;i-=8)// PARA CERRAR LA ANIMACION
	{
		filas(i,5,PORT,ANIMACION2);
 174:	97 01       	movw	r18, r14
 176:	a8 01       	movw	r20, r16
 178:	65 e0       	ldi	r22, 0x05	; 5
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	ce 01       	movw	r24, r28
 17e:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
	// CANTIDAD DE FILAS -1
	for (int i=0;i<=24;i+=8)// PARA ABRIR LA ANIMACION
	{
		filas(i,5,PORT,ANIMACION2);
	}
	for (int i=24;i>=0;i-=8)// PARA CERRAR LA ANIMACION
 182:	28 97       	sbiw	r28, 0x08	; 8
 184:	dd 23       	and	r29, r29
 186:	b4 f7       	brge	.-20     	; 0x174 <animacion2+0x32>
	{
		filas(i,5,PORT,ANIMACION2);
	}
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	08 95       	ret

00000196 <hola>:

void hola(char PORT[], char MENSAJE[]) {
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	7c 01       	movw	r14, r24
 1a4:	8b 01       	movw	r16, r22
	//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
	for (int i=0;i<32;i++)
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
 1aa:	08 c0       	rjmp	.+16     	; 0x1bc <hola+0x26>
	{
		filas(i,20,PORT,MENSAJE);
 1ac:	98 01       	movw	r18, r16
 1ae:	a7 01       	movw	r20, r14
 1b0:	64 e1       	ldi	r22, 0x14	; 20
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	ce 01       	movw	r24, r28
 1b6:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
	}
}

void hola(char PORT[], char MENSAJE[]) {
	//MATRIZ DE LEDS CON DESPLAZAMIENTO DE UNA CADENA
	for (int i=0;i<32;i++)
 1ba:	21 96       	adiw	r28, 0x01	; 1
 1bc:	c0 32       	cpi	r28, 0x20	; 32
 1be:	d1 05       	cpc	r29, r1
 1c0:	ac f3       	brlt	.-22     	; 0x1ac <hola+0x16>
	{
		filas(i,20,PORT,MENSAJE);
	}
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	08 95       	ret

000001d0 <numero3>:

void numero3(char PORT[], char NUMERO3[]){
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	7c 01       	movw	r14, r24
 1de:	8b 01       	movw	r16, r22
	for (int i=0;i<8;i+=8)
 1e0:	c0 e0       	ldi	r28, 0x00	; 0
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
 1e4:	08 c0       	rjmp	.+16     	; 0x1f6 <numero3+0x26>
	{
		filas(i,10,PORT,NUMERO3);
 1e6:	98 01       	movw	r18, r16
 1e8:	a7 01       	movw	r20, r14
 1ea:	6a e0       	ldi	r22, 0x0A	; 10
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	ce 01       	movw	r24, r28
 1f0:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
		filas(i,20,PORT,MENSAJE);
	}
}

void numero3(char PORT[], char NUMERO3[]){
	for (int i=0;i<8;i+=8)
 1f4:	28 96       	adiw	r28, 0x08	; 8
 1f6:	c8 30       	cpi	r28, 0x08	; 8
 1f8:	d1 05       	cpc	r29, r1
 1fa:	ac f3       	brlt	.-22     	; 0x1e6 <numero3+0x16>
	{
		filas(i,10,PORT,NUMERO3);
	}
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	ff 90       	pop	r15
 206:	ef 90       	pop	r14
 208:	08 95       	ret

0000020a <numero4>:

void numero4(char PORT[], char NUMERO4[]){
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	7c 01       	movw	r14, r24
 218:	8b 01       	movw	r16, r22
	for (int i=0;i<8;i+=8)
 21a:	c0 e0       	ldi	r28, 0x00	; 0
 21c:	d0 e0       	ldi	r29, 0x00	; 0
 21e:	08 c0       	rjmp	.+16     	; 0x230 <numero4+0x26>
	{
		filas(i,10,PORT,NUMERO4);
 220:	98 01       	movw	r18, r16
 222:	a7 01       	movw	r20, r14
 224:	6a e0       	ldi	r22, 0x0A	; 10
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	ce 01       	movw	r24, r28
 22a:	0e 94 4b 00 	call	0x96	; 0x96 <filas>
		filas(i,10,PORT,NUMERO3);
	}
}

void numero4(char PORT[], char NUMERO4[]){
	for (int i=0;i<8;i+=8)
 22e:	28 96       	adiw	r28, 0x08	; 8
 230:	c8 30       	cpi	r28, 0x08	; 8
 232:	d1 05       	cpc	r29, r1
 234:	ac f3       	brlt	.-22     	; 0x220 <numero4+0x16>
	{
		filas(i,10,PORT,NUMERO4);
	}
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	ff 90       	pop	r15
 240:	ef 90       	pop	r14
 242:	08 95       	ret

00000244 <main>:

int main(void)
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	c0 58       	subi	r28, 0x80	; 128
 24e:	d1 09       	sbc	r29, r1
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	f8 94       	cli
 254:	de bf       	out	0x3e, r29	; 62
 256:	0f be       	out	0x3f, r0	; 63
 258:	cd bf       	out	0x3d, r28	; 61
	// PARA EL DATO
	DDRB = 0B11111111; // SALIDA TODO EL PUERTO B
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	84 b9       	out	0x04, r24	; 4
	
	// PARA EL DESPLAZMIENTO
	DDRD = 0B11111111; // SALIDAS TODO EL PUERTO D
 25e:	8a b9       	out	0x0a, r24	; 10
	
	// PARA LAS BOTONERAS
	DDRC |= (0<<0)|(0<<1)|(0<<2); //ENTRADAS PARA LOS PUERTOS C0,C1,C2
 260:	87 b1       	in	r24, 0x07	; 7
 262:	87 b9       	out	0x07, r24	; 7
		
	//UART_init();
	
	// VA CON EL DESPLAZMIENTO
	char PORT[8] =  {1,2,4,8,16,32,64,128};//VALORES DE PINES DEL PORTD
 264:	88 e0       	ldi	r24, 0x08	; 8
 266:	e0 e0       	ldi	r30, 0x00	; 0
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	de 01       	movw	r26, r28
 26c:	11 96       	adiw	r26, 0x01	; 1
 26e:	01 90       	ld	r0, Z+
 270:	0d 92       	st	X+, r0
 272:	8a 95       	dec	r24
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0x2a>
	//{PD0,PD1,PD2,PD3,PD4,PD5,PD6,PD7}
	
	 
	char MENSAJE[]={0x0, 0x7e, 0x7e, 0x18, 0x18, 0x7e, 0x7e, 0x0, //H
 276:	88 e2       	ldi	r24, 0x28	; 40
 278:	e8 e0       	ldi	r30, 0x08	; 8
 27a:	f1 e0       	ldi	r31, 0x01	; 1
 27c:	de 01       	movw	r26, r28
 27e:	19 96       	adiw	r26, 0x09	; 9
 280:	01 90       	ld	r0, Z+
 282:	0d 92       	st	X+, r0
 284:	8a 95       	dec	r24
 286:	e1 f7       	brne	.-8      	; 0x280 <main+0x3c>
		0x0, 0x7e, 0x7e, 0x66, 0x66, 0x7e, 0x7e, 0x0, //O
		0x0, 0x7e, 0x7e, 0x60, 0x60, 0x60, 0x60, 0x0, //L
		0x0, 0x7e, 0x7e, 0x16, 0x16, 0x7e, 0x7e, 0x0, //A
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}; //ESPACIO
	
	char ANIMACION1[] = {
 288:	80 e2       	ldi	r24, 0x20	; 32
 28a:	e0 e3       	ldi	r30, 0x30	; 48
 28c:	f1 e0       	ldi	r31, 0x01	; 1
 28e:	de 01       	movw	r26, r28
 290:	d1 96       	adiw	r26, 0x31	; 49
 292:	01 90       	ld	r0, Z+
 294:	0d 92       	st	X+, r0
 296:	8a 95       	dec	r24
 298:	e1 f7       	brne	.-8      	; 0x292 <main+0x4e>
		0x0, 0x0, 0x24, 0x0, 0x0, 0x24, 0x0, 0x0, // CENTRO 2
		0x0, 0x42, 0x0, 0x0, 0x0, 0x0, 0x42, 0x0, // CENTRO 3
		0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81 // CENTRO 4
	};
	
	char ANIMACION2[] = {
 29a:	80 e2       	ldi	r24, 0x20	; 32
 29c:	e0 e5       	ldi	r30, 0x50	; 80
 29e:	f1 e0       	ldi	r31, 0x01	; 1
 2a0:	de 01       	movw	r26, r28
 2a2:	af 5a       	subi	r26, 0xAF	; 175
 2a4:	bf 4f       	sbci	r27, 0xFF	; 255
 2a6:	01 90       	ld	r0, Z+
 2a8:	0d 92       	st	X+, r0
 2aa:	8a 95       	dec	r24
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <main+0x62>
		0x0, 0x0, 0x3C, 0x24, 0x24, 0x3C, 0x0, 0x0, // CENTRO 2
		0x0, 0x7E, 0x42, 0x42, 0x42, 0x42, 0x7E, 0x0, // CENTRO 3
		0xFF, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xFF // CENTRO 4
	};
	
	char NUMERO3[] = {
 2ae:	88 e0       	ldi	r24, 0x08	; 8
 2b0:	e0 e7       	ldi	r30, 0x70	; 112
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 2b4:	de 01       	movw	r26, r28
 2b6:	af 58       	subi	r26, 0x8F	; 143
 2b8:	bf 4f       	sbci	r27, 0xFF	; 255
 2ba:	01 90       	ld	r0, Z+
 2bc:	0d 92       	st	X+, r0
 2be:	8a 95       	dec	r24
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <main+0x76>
		0x00, 0x00, 0x11, 0x15, 0x15, 0x1F, 0xA0, 0x40, // CON FLECHAS
		//0x0, 0x0, 0x11, 0x15, 0x15, 0x1F, 0x0, 0x0 // SIN FLECHAS
	};
	
	char NUMERO4[] = {
 2c2:	88 e0       	ldi	r24, 0x08	; 8
 2c4:	e8 e7       	ldi	r30, 0x78	; 120
 2c6:	f1 e0       	ldi	r31, 0x01	; 1
 2c8:	de 01       	movw	r26, r28
 2ca:	a7 58       	subi	r26, 0x87	; 135
 2cc:	bf 4f       	sbci	r27, 0xFF	; 255
 2ce:	01 90       	ld	r0, Z+
 2d0:	0d 92       	st	X+, r0
 2d2:	8a 95       	dec	r24
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <main+0x8a>
		//0x0, 0x0, 0x07, 0x04, 0x04, 0x1F, 0x0, 0x0 // SIN FLECHAS
	};
	
	
	int inicio = 0;
	int valor3 = 1;
 2d6:	01 e0       	ldi	r16, 0x01	; 1
 2d8:	10 e0       	ldi	r17, 0x00	; 0
		0x40, 0xA0, 0x07, 0x04, 0x04, 0x1F, 0x0, 0x00, // CON FLECHAS
		//0x0, 0x0, 0x07, 0x04, 0x04, 0x1F, 0x0, 0x0 // SIN FLECHAS
	};
	
	
	int inicio = 0;
 2da:	e1 2c       	mov	r14, r1
 2dc:	f1 2c       	mov	r15, r1
 2de:	14 c0       	rjmp	.+40     	; 0x308 <main+0xc4>
	int jugadores = 0;
	
	while(1){
		
		while (!inicio) {
			animacion1(PORT,ANIMACION1);
 2e0:	be 01       	movw	r22, r28
 2e2:	6f 5c       	subi	r22, 0xCF	; 207
 2e4:	7f 4f       	sbci	r23, 0xFF	; 255
 2e6:	ce 01       	movw	r24, r28
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	0e 94 77 00 	call	0xee	; 0xee <animacion1>
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
 2ee:	86 b1       	in	r24, 0x06	; 6
 2f0:	81 34       	cpi	r24, 0x41	; 65
 2f2:	71 f0       	breq	.+28     	; 0x310 <main+0xcc>
				inicio = 1;
				break;
			}
			animacion2(PORT,ANIMACION2);
 2f4:	be 01       	movw	r22, r28
 2f6:	6f 5a       	subi	r22, 0xAF	; 175
 2f8:	7f 4f       	sbci	r23, 0xFF	; 255
 2fa:	ce 01       	movw	r24, r28
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	0e 94 a1 00 	call	0x142	; 0x142 <animacion2>
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
 302:	86 b1       	in	r24, 0x06	; 6
 304:	81 34       	cpi	r24, 0x41	; 65
 306:	41 f0       	breq	.+16     	; 0x318 <main+0xd4>
	int valor4 = 1;
	int jugadores = 0;
	
	while(1){
		
		while (!inicio) {
 308:	e1 14       	cp	r14, r1
 30a:	f1 04       	cpc	r15, r1
 30c:	41 f4       	brne	.+16     	; 0x31e <main+0xda>
 30e:	e8 cf       	rjmp	.-48     	; 0x2e0 <main+0x9c>
			animacion1(PORT,ANIMACION1);
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
				inicio = 1;
 310:	ee 24       	eor	r14, r14
 312:	e3 94       	inc	r14
 314:	f1 2c       	mov	r15, r1
 316:	03 c0       	rjmp	.+6      	; 0x31e <main+0xda>
				break;
			}
			animacion2(PORT,ANIMACION2);
			// EMPIEZA EL JUEGO CON START/NEXT 0B 0100 0001
			if (PINC == 0x41) {
				inicio = 1;
 318:	ee 24       	eor	r14, r14
 31a:	e3 94       	inc	r14
 31c:	f1 2c       	mov	r15, r1
				inicio = 1;
				break;
			}*/
		}
		
		hola(PORT,MENSAJE);
 31e:	be 01       	movw	r22, r28
 320:	67 5f       	subi	r22, 0xF7	; 247
 322:	7f 4f       	sbci	r23, 0xFF	; 255
 324:	ce 01       	movw	r24, r28
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	0e 94 cb 00 	call	0x196	; 0x196 <hola>
		DERECHA: 0B 0100 0010
		IZQUIERDA: 0B 0100 0100 */
		
		//NUMERO 3 CON FLECHA A LA DERECHA
		jugadores = 0;
		while (valor3) {
 32c:	21 c0       	rjmp	.+66     	; 0x370 <main+0x12c>
			numero3(PORT,NUMERO3);
 32e:	be 01       	movw	r22, r28
 330:	6f 58       	subi	r22, 0x8F	; 143
 332:	7f 4f       	sbci	r23, 0xFF	; 255
 334:	ce 01       	movw	r24, r28
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <numero3>
			// SI PRESIONA PARA LA DERECHA
			if (PINC == 0x42) {
 33c:	86 b1       	in	r24, 0x06	; 6
 33e:	82 34       	cpi	r24, 0x42	; 66
 340:	89 f4       	brne	.+34     	; 0x364 <main+0x120>
 342:	03 c0       	rjmp	.+6      	; 0x34a <main+0x106>
					// SI PRESIONA PARA LA IZQUIERDA
					if (PINC == 0x44) {
						break;
					}
					// SI SELECCIONA LA OPCION DE 4 JUGADORES
					if (PINC == 0x41) {
 344:	86 b1       	in	r24, 0x06	; 6
 346:	81 34       	cpi	r24, 0x41	; 65
 348:	59 f0       	breq	.+22     	; 0x360 <main+0x11c>
		while (valor3) {
			numero3(PORT,NUMERO3);
			// SI PRESIONA PARA LA DERECHA
			if (PINC == 0x42) {
				while (valor4) {
					numero4(PORT,NUMERO4);
 34a:	be 01       	movw	r22, r28
 34c:	67 58       	subi	r22, 0x87	; 135
 34e:	7f 4f       	sbci	r23, 0xFF	; 255
 350:	ce 01       	movw	r24, r28
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	0e 94 05 01 	call	0x20a	; 0x20a <numero4>
					// SI PRESIONA PARA LA IZQUIERDA
					if (PINC == 0x44) {
 358:	86 b1       	in	r24, 0x06	; 6
 35a:	84 34       	cpi	r24, 0x44	; 68
 35c:	99 f7       	brne	.-26     	; 0x344 <main+0x100>
 35e:	02 c0       	rjmp	.+4      	; 0x364 <main+0x120>
						break;
					}
					// SI SELECCIONA LA OPCION DE 4 JUGADORES
					if (PINC == 0x41) {
						jugadores = 4;
						valor3 = 0;
 360:	00 e0       	ldi	r16, 0x00	; 0
 362:	10 e0       	ldi	r17, 0x00	; 0
						break;
					}
				}
			}
			// SI SELECCIONA LA OPCION DE 3 JUGADORES
			if (PINC == 0x41 && valor3) {
 364:	86 b1       	in	r24, 0x06	; 6
 366:	81 34       	cpi	r24, 0x41	; 65
 368:	19 f4       	brne	.+6      	; 0x370 <main+0x12c>
 36a:	01 15       	cp	r16, r1
 36c:	11 05       	cpc	r17, r1
 36e:	19 f4       	brne	.+6      	; 0x376 <main+0x132>
		DERECHA: 0B 0100 0010
		IZQUIERDA: 0B 0100 0100 */
		
		//NUMERO 3 CON FLECHA A LA DERECHA
		jugadores = 0;
		while (valor3) {
 370:	01 15       	cp	r16, r1
 372:	11 05       	cpc	r17, r1
 374:	e1 f6       	brne	.-72     	; 0x32e <main+0xea>
		}
		
		valor3 = 0;
		
		
		hola(PORT,MENSAJE);
 376:	be 01       	movw	r22, r28
 378:	67 5f       	subi	r22, 0xF7	; 247
 37a:	7f 4f       	sbci	r23, 0xFF	; 255
 37c:	ce 01       	movw	r24, r28
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	0e 94 cb 00 	call	0x196	; 0x196 <hola>
				jugadores = 3;
				break;
			}
		}
		
		valor3 = 0;
 384:	00 e0       	ldi	r16, 0x00	; 0
 386:	10 e0       	ldi	r17, 0x00	; 0
			
			while (PIND == 0x6){
			}	
		}*/
		
	}
 388:	bf cf       	rjmp	.-130    	; 0x308 <main+0xc4>

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
